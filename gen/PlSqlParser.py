# Generated from /home/iitp/antlr-plsql/DBVC/Final-project/PlSql.g4 by ANTLR 4.7
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u020e")
        buf.write("\u1435\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8")
        buf.write("\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db")
        buf.write("\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df")
        buf.write("\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2")
        buf.write("\4\u00e3\t\u00e3\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6")
        buf.write("\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9")
        buf.write("\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed")
        buf.write("\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0")
        buf.write("\4\u00f1\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4")
        buf.write("\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7")
        buf.write("\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb")
        buf.write("\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe")
        buf.write("\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102")
        buf.write("\t\u0102\4\u0103\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105")
        buf.write("\4\u0106\t\u0106\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109")
        buf.write("\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c")
        buf.write("\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110")
        buf.write("\t\u0110\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113")
        buf.write("\4\u0114\t\u0114\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117")
        buf.write("\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a")
        buf.write("\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e")
        buf.write("\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121")
        buf.write("\4\u0122\t\u0122\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125")
        buf.write("\t\u0125\4\u0126\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128")
        buf.write("\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c")
        buf.write("\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f")
        buf.write("\4\u0130\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133")
        buf.write("\t\u0133\4\u0134\t\u0134\4\u0135\t\u0135\4\u0136\t\u0136")
        buf.write("\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139\t\u0139\4\u013a")
        buf.write("\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d")
        buf.write("\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141")
        buf.write("\t\u0141\4\u0142\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144")
        buf.write("\4\u0145\t\u0145\4\u0146\t\u0146\4\u0147\t\u0147\4\u0148")
        buf.write("\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b\t\u014b")
        buf.write("\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f")
        buf.write("\t\u014f\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152")
        buf.write("\4\u0153\t\u0153\4\u0154\t\u0154\4\u0155\t\u0155\4\u0156")
        buf.write("\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158\4\u0159\t\u0159")
        buf.write("\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d")
        buf.write("\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160")
        buf.write("\4\u0161\t\u0161\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164")
        buf.write("\t\u0164\4\u0165\t\u0165\4\u0166\t\u0166\4\u0167\t\u0167")
        buf.write("\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a\4\u016b")
        buf.write("\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e")
        buf.write("\4\u016f\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172")
        buf.write("\t\u0172\4\u0173\t\u0173\4\u0174\t\u0174\3\2\6\2\u02ea")
        buf.write("\n\2\r\2\16\2\u02eb\3\3\3\3\5\3\u02f0\n\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\7\3\u02fa\n\3\f\3\16\3\u02fd\13\3")
        buf.write("\3\3\5\3\u0300\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u0315\n\4")
        buf.write("\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\5\6\u0320\n\6\3\6")
        buf.write("\7\6\u0323\n\6\f\6\16\6\u0326\13\6\3\6\3\6\5\6\u032a\n")
        buf.write("\6\3\7\3\7\3\7\5\7\u032f\n\7\5\7\u0331\n\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\7\7\u0339\n\7\f\7\16\7\u033c\13\7\3\7\3\7")
        buf.write("\5\7\u0340\n\7\3\7\3\7\3\7\3\7\3\7\3\7\7\7\u0348\n\7\f")
        buf.write("\7\16\7\u034b\13\7\3\7\5\7\u034e\n\7\3\7\3\7\5\7\u0352")
        buf.write("\n\7\3\7\7\7\u0355\n\7\f\7\16\7\u0358\13\7\3\7\3\7\5\7")
        buf.write("\u035c\n\7\3\7\3\7\3\7\5\7\u0361\n\7\3\b\3\b\5\b\u0365")
        buf.write("\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\7\t\u0371")
        buf.write("\n\t\f\t\16\t\u0374\13\t\3\t\3\t\5\t\u0378\n\t\3\t\5\t")
        buf.write("\u037b\n\t\3\t\3\t\3\n\3\n\5\n\u0381\n\n\3\13\3\13\3\13")
        buf.write("\3\13\3\13\7\13\u0388\n\13\f\13\16\13\u038b\13\13\3\13")
        buf.write("\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\7\f\u0396\n\f\f\f\16")
        buf.write("\f\u0399\13\f\3\f\3\f\3\r\3\r\3\r\5\r\u03a0\n\r\3\r\3")
        buf.write("\r\3\16\3\16\3\16\3\16\3\16\5\16\u03a9\n\16\3\16\5\16")
        buf.write("\u03ac\n\16\3\16\7\16\u03af\n\16\f\16\16\16\u03b2\13\16")
        buf.write("\3\16\3\16\5\16\u03b6\n\16\3\17\3\17\3\17\5\17\u03bb\n")
        buf.write("\17\3\17\3\17\3\17\5\17\u03c0\n\17\3\20\3\20\3\20\3\20")
        buf.write("\7\20\u03c6\n\20\f\20\16\20\u03c9\13\20\3\20\3\20\3\20")
        buf.write("\3\20\5\20\u03cf\n\20\5\20\u03d1\n\20\3\21\3\21\5\21\u03d5")
        buf.write("\n\21\3\21\3\21\7\21\u03d9\n\21\f\21\16\21\u03dc\13\21")
        buf.write("\3\21\3\21\5\21\u03e0\n\21\3\22\3\22\3\22\3\22\3\22\3")
        buf.write("\22\3\22\3\22\3\22\5\22\u03eb\n\22\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\7\23\u03f3\n\23\f\23\16\23\u03f6\13\23\3\23")
        buf.write("\3\23\5\23\u03fa\n\23\3\23\3\23\3\24\3\24\3\24\3\24\3")
        buf.write("\24\3\24\7\24\u0404\n\24\f\24\16\24\u0407\13\24\3\24\3")
        buf.write("\24\5\24\u040b\n\24\3\24\3\24\3\24\5\24\u0410\n\24\3\24")
        buf.write("\5\24\u0413\n\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3")
        buf.write("\25\3\25\3\25\3\25\3\25\5\25\u0421\n\25\3\26\3\26\3\26")
        buf.write("\3\26\3\27\3\27\3\27\3\27\3\27\5\27\u042c\n\27\3\27\7")
        buf.write("\27\u042f\n\27\f\27\16\27\u0432\13\27\3\27\3\27\5\27\u0436")
        buf.write("\n\27\3\30\3\30\3\30\5\30\u043b\n\30\5\30\u043d\n\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\7\30\u0445\n\30\f\30\16\30")
        buf.write("\u0448\13\30\3\30\3\30\5\30\u044c\n\30\3\30\5\30\u044f")
        buf.write("\n\30\3\30\3\30\5\30\u0453\n\30\3\30\7\30\u0456\n\30\f")
        buf.write("\30\16\30\u0459\13\30\3\30\3\30\3\30\5\30\u045e\n\30\3")
        buf.write("\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\5\32\u046d\n\32\3\32\7\32\u0470\n\32\f\32\16")
        buf.write("\32\u0473\13\32\3\32\3\32\5\32\u0477\n\32\5\32\u0479\n")
        buf.write("\32\3\33\3\33\3\33\5\33\u047e\n\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\5\33\u0485\n\33\3\33\5\33\u0488\n\33\3\33\5\33\u048b")
        buf.write("\n\33\3\33\5\33\u048e\n\33\3\33\3\33\3\34\3\34\3\34\3")
        buf.write("\34\7\34\u0496\n\34\f\34\16\34\u0499\13\34\3\35\3\35\3")
        buf.write("\35\3\35\3\35\3\36\3\36\3\36\3\36\5\36\u04a4\n\36\3\36")
        buf.write("\3\36\5\36\u04a8\n\36\3\36\5\36\u04ab\n\36\3\37\3\37\3")
        buf.write("\37\3\37\3 \3 \3 \5 \u04b4\n \3!\3!\3!\3!\7!\u04ba\n!")
        buf.write("\f!\16!\u04bd\13!\3!\3!\3!\3!\3!\5!\u04c4\n!\3!\5!\u04c7")
        buf.write("\n!\3\"\3\"\3\"\3\"\3\"\5\"\u04ce\n\"\3#\3#\5#\u04d2\n")
        buf.write("#\3$\3$\3$\7$\u04d7\n$\f$\16$\u04da\13$\3$\6$\u04dd\n")
        buf.write("$\r$\16$\u04de\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%")
        buf.write("\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u0508\n%\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\5&\u0524\n&\3\'\3\'\3\'\7\'\u0529\n\'\f\'\16\'")
        buf.write("\u052c\13\'\3\'\3\'\5\'\u0530\n\'\3\'\3\'\3(\3(\3(\3(")
        buf.write("\3(\7(\u0539\n(\f(\16(\u053c\13(\5(\u053e\n(\3)\3)\3)")
        buf.write("\3)\3)\3*\3*\6*\u0547\n*\r*\16*\u0548\3+\3+\3+\3,\3,\3")
        buf.write(",\5,\u0551\n,\3,\3,\5,\u0555\n,\3-\3-\3-\3-\3-\3-\3-\3")
        buf.write("-\5-\u055f\n-\3-\5-\u0562\n-\3.\3.\5.\u0566\n.\3.\5.\u0569")
        buf.write("\n.\3.\7.\u056c\n.\f.\16.\u056f\13.\3.\3.\5.\u0573\n.")
        buf.write("\3/\3/\5/\u0577\n/\3/\3/\3/\3/\3/\3/\7/\u057f\n/\f/\16")
        buf.write("/\u0582\13/\3/\3/\3\60\3\60\3\60\7\60\u0589\n\60\f\60")
        buf.write("\16\60\u058c\13\60\3\61\3\61\3\61\5\61\u0591\n\61\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\7\62\u059a\n\62\f\62\16")
        buf.write("\62\u059d\13\62\3\62\3\62\5\62\u05a1\n\62\3\63\3\63\5")
        buf.write("\63\u05a5\n\63\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u05ad")
        buf.write("\n\64\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u05b5\n\65\3")
        buf.write("\65\3\65\3\65\5\65\u05ba\n\65\3\65\5\65\u05bd\n\65\5\65")
        buf.write("\u05bf\n\65\3\66\5\66\u05c2\n\66\3\66\3\66\3\66\3\66\3")
        buf.write("\67\3\67\3\67\5\67\u05cb\n\67\3\67\3\67\3\67\5\67\u05d0")
        buf.write("\n\67\38\38\38\58\u05d5\n8\38\58\u05d8\n8\39\59\u05db")
        buf.write("\n9\39\39\59\u05df\n9\39\59\u05e2\n9\39\39\39\39\79\u05e8")
        buf.write("\n9\f9\169\u05eb\139\39\39\59\u05ef\n9\39\79\u05f2\n9")
        buf.write("\f9\169\u05f5\139\3:\3:\3:\3:\5:\u05fb\n:\3;\3;\3;\3<")
        buf.write("\3<\3<\3<\3<\5<\u0605\n<\3=\3=\3=\3=\3=\3=\3=\3=\3>\3")
        buf.write(">\3>\3>\6>\u0613\n>\r>\16>\u0614\3>\3>\3?\3?\5?\u061b")
        buf.write("\n?\3@\3@\3@\3@\3A\3A\3A\3A\5A\u0625\nA\3B\3B\3B\3B\3")
        buf.write("B\3B\7B\u062d\nB\fB\16B\u0630\13B\3B\3B\3B\3B\5B\u0636")
        buf.write("\nB\3B\7B\u0639\nB\fB\16B\u063c\13B\3B\3B\3B\5B\u0641")
        buf.write("\nB\3C\3C\3C\3C\3C\3C\7C\u0649\nC\fC\16C\u064c\13C\3C")
        buf.write("\3C\5C\u0650\nC\3C\3C\3C\3C\3C\5C\u0657\nC\3C\7C\u065a")
        buf.write("\nC\fC\16C\u065d\13C\3C\3C\3C\5C\u0662\nC\3D\5D\u0665")
        buf.write("\nD\3D\5D\u0668\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3")
        buf.write("D\3D\7D\u0677\nD\fD\16D\u067a\13D\3D\3D\5D\u067e\nD\3")
        buf.write("D\3D\3D\3D\3D\3D\3D\5D\u0687\nD\3D\7D\u068a\nD\fD\16D")
        buf.write("\u068d\13D\3D\3D\3D\5D\u0692\nD\3E\5E\u0695\nE\3E\3E\3")
        buf.write("F\3F\3F\5F\u069c\nF\3F\5F\u069f\nF\3G\3G\3G\3G\3H\5H\u06a6")
        buf.write("\nH\3H\6H\u06a9\nH\rH\16H\u06aa\3H\3H\5H\u06af\nH\3I\3")
        buf.write("I\3I\5I\u06b4\nI\3J\3J\3J\5J\u06b9\nJ\3K\3K\3K\3K\3K\3")
        buf.write("K\7K\u06c1\nK\fK\16K\u06c4\13K\3K\3K\3K\5K\u06c9\nK\3")
        buf.write("L\3L\3L\3L\3L\3L\7L\u06d1\nL\fL\16L\u06d4\13L\3L\3L\5")
        buf.write("L\u06d8\nL\3L\3L\3L\3L\3L\5L\u06df\nL\3L\3L\3L\3L\5L\u06e5")
        buf.write("\nL\3L\3L\5L\u06e9\nL\3M\5M\u06ec\nM\3M\5M\u06ef\nM\3")
        buf.write("M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\7M\u06fe\nM\fM\16")
        buf.write("M\u0701\13M\3M\3M\5M\u0705\nM\3M\3M\3M\3M\3M\3M\5M\u070d")
        buf.write("\nM\3N\3N\3N\3N\3O\3O\3O\3O\3O\3O\7O\u0719\nO\fO\16O\u071c")
        buf.write("\13O\3O\3O\3P\3P\5P\u0722\nP\3Q\3Q\3Q\3R\3R\3R\3R\3S\3")
        buf.write("S\3S\3S\6S\u072f\nS\rS\16S\u0730\3T\3T\3T\3T\3T\7T\u0738")
        buf.write("\nT\fT\16T\u073b\13T\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U")
        buf.write("\3U\3U\3U\3U\3U\5U\u074d\nU\3V\3V\3V\3V\3W\3W\3W\3X\3")
        buf.write("X\3X\3X\3Y\3Y\3Y\5Y\u075d\nY\3Z\3Z\3Z\3Z\3[\3[\3[\5[\u0766")
        buf.write("\n[\3[\3[\3[\5[\u076b\n[\3[\3[\5[\u076f\n[\3[\5[\u0772")
        buf.write("\n[\3\\\3\\\3\\\3\\\3\\\3\\\7\\\u077a\n\\\f\\\16\\\u077d")
        buf.write("\13\\\3\\\3\\\3]\3]\3]\3]\3]\7]\u0786\n]\f]\16]\u0789")
        buf.write("\13]\3]\3]\3]\5]\u078e\n]\3]\3]\3^\3^\7^\u0794\n^\f^\16")
        buf.write("^\u0797\13^\3^\5^\u079a\n^\3^\5^\u079d\n^\3_\3_\3_\3`")
        buf.write("\3`\3`\3`\3`\3`\3`\3`\3`\5`\u07ab\n`\3a\3a\5a\u07af\n")
        buf.write("a\3a\3a\3a\5a\u07b4\na\3a\5a\u07b7\na\3a\3a\3b\3b\3b\3")
        buf.write("b\3b\3b\3b\3b\3b\5b\u07c4\nb\3b\3b\5b\u07c8\nb\3b\3b\3")
        buf.write("c\3c\3c\3c\3c\3c\7c\u07d2\nc\fc\16c\u07d5\13c\3c\3c\5")
        buf.write("c\u07d9\nc\3c\3c\5c\u07dd\nc\3c\3c\5c\u07e1\nc\3c\3c\3")
        buf.write("d\3d\5d\u07e7\nd\3d\5d\u07ea\nd\3d\5d\u07ed\nd\3e\3e\3")
        buf.write("e\3e\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3")
        buf.write("f\3f\3f\3f\3f\5f\u0808\nf\3f\3f\6f\u080c\nf\rf\16f\u080d")
        buf.write("\3f\3f\5f\u0812\nf\3f\3f\3g\3g\5g\u0818\ng\3h\3h\3h\3")
        buf.write("h\3h\3h\3h\3h\7h\u0822\nh\fh\16h\u0825\13h\3h\3h\3h\3")
        buf.write("h\3h\3h\5h\u082d\nh\5h\u082f\nh\3h\3h\3i\3i\5i\u0835\n")
        buf.write("i\3i\3i\5i\u0839\ni\3i\5i\u083c\ni\3j\3j\3j\3j\3j\3k\3")
        buf.write("k\5k\u0845\nk\3k\3k\3l\3l\3l\3l\3l\3l\3l\5l\u0850\nl\3")
        buf.write("l\3l\5l\u0854\nl\3l\5l\u0857\nl\3m\3m\5m\u085b\nm\3m\3")
        buf.write("m\3m\3n\3n\3n\5n\u0863\nn\3n\3n\3n\3n\3n\3n\3n\5n\u086c")
        buf.write("\nn\3o\3o\3o\3p\3p\3p\3p\6p\u0875\np\rp\16p\u0876\3q\3")
        buf.write("q\3q\3q\3q\3q\3r\3r\3r\3r\3r\3r\5r\u0885\nr\3r\3r\3r\3")
        buf.write("r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\5r\u089b")
        buf.write("\nr\3s\3s\3s\3t\3t\3t\3u\3u\5u\u08a5\nu\3u\3u\3u\3v\3")
        buf.write("v\5v\u08ac\nv\3v\3v\5v\u08b0\nv\3w\3w\5w\u08b4\nw\3w\3")
        buf.write("w\5w\u08b8\nw\3x\3x\3x\3y\3y\3y\3y\3y\7y\u08c2\ny\fy\16")
        buf.write("y\u08c5\13y\3y\5y\u08c8\ny\3y\3y\3y\3z\3z\3z\3z\3z\3{")
        buf.write("\3{\3{\3|\5|\u08d6\n|\3|\3|\3|\3|\5|\u08dc\n|\3|\3|\3")
        buf.write("|\3|\3|\5|\u08e3\n|\3}\3}\3}\5}\u08e8\n}\3}\3}\3}\3}\3")
        buf.write("}\3}\3}\3}\5}\u08f2\n}\3}\3}\3}\3}\5}\u08f8\n}\5}\u08fa")
        buf.write("\n}\3~\3~\3~\3~\3~\3~\3~\5~\u0903\n~\3\177\3\177\3\177")
        buf.write("\3\177\3\177\3\177\3\177\3\177\5\177\u090d\n\177\3\177")
        buf.write("\3\177\3\177\5\177\u0912\n\177\3\u0080\3\u0080\3\u0080")
        buf.write("\3\u0080\3\u0080\3\u0081\3\u0081\3\u0082\3\u0082\3\u0083")
        buf.write("\3\u0083\3\u0084\3\u0084\5\u0084\u0921\n\u0084\3\u0085")
        buf.write("\3\u0085\5\u0085\u0925\n\u0085\3\u0086\5\u0086\u0928\n")
        buf.write("\u0086\3\u0086\3\u0086\5\u0086\u092c\n\u0086\3\u0087\3")
        buf.write("\u0087\3\u0087\3\u0087\6\u0087\u0932\n\u0087\r\u0087\16")
        buf.write("\u0087\u0933\5\u0087\u0936\n\u0087\3\u0087\3\u0087\5\u0087")
        buf.write("\u093a\n\u0087\3\u0088\3\u0088\3\u0088\3\u0088\7\u0088")
        buf.write("\u0940\n\u0088\f\u0088\16\u0088\u0943\13\u0088\3\u0088")
        buf.write("\3\u0088\3\u0088\3\u0089\5\u0089\u0949\n\u0089\3\u0089")
        buf.write("\6\u0089\u094c\n\u0089\r\u0089\16\u0089\u094d\5\u0089")
        buf.write("\u0950\n\u0089\3\u0089\3\u0089\3\u008a\5\u008a\u0955\n")
        buf.write("\u008a\3\u008a\6\u008a\u0958\n\u008a\r\u008a\16\u008a")
        buf.write("\u0959\3\u008a\3\u008a\3\u008b\3\u008b\3\u008b\3\u008b")
        buf.write("\5\u008b\u0962\n\u008b\3\u008c\3\u008c\3\u008c\3\u008c")
        buf.write("\3\u008c\5\u008c\u0969\n\u008c\3\u008c\3\u008c\5\u008c")
        buf.write("\u096d\n\u008c\3\u008c\5\u008c\u0970\n\u008c\3\u008d\3")
        buf.write("\u008d\3\u008d\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e")
        buf.write("\3\u008e\3\u008e\5\u008e\u097c\n\u008e\3\u008f\3\u008f")
        buf.write("\3\u008f\3\u008f\5\u008f\u0982\n\u008f\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0091\3\u0091\3\u0091\5\u0091\u098a\n\u0091")
        buf.write("\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\7\u0092")
        buf.write("\u0992\n\u0092\f\u0092\16\u0092\u0995\13\u0092\3\u0092")
        buf.write("\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\7\u0092\u099d")
        buf.write("\n\u0092\f\u0092\16\u0092\u09a0\13\u0092\5\u0092\u09a2")
        buf.write("\n\u0092\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093")
        buf.write("\u09a9\n\u0093\3\u0093\5\u0093\u09ac\n\u0093\3\u0094\3")
        buf.write("\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u09b3\n\u0094\3")
        buf.write("\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\5\u0095\u09be\n\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\5\u0095\u09c4\n\u0095\3\u0095\3\u0095")
        buf.write("\5\u0095\u09c8\n\u0095\3\u0096\3\u0096\3\u0096\3\u0096")
        buf.write("\3\u0096\3\u0096\7\u0096\u09d0\n\u0096\f\u0096\16\u0096")
        buf.write("\u09d3\13\u0096\5\u0096\u09d5\n\u0096\3\u0096\3\u0096")
        buf.write("\3\u0097\3\u0097\5\u0097\u09db\n\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\5\u0097\u09e6\n\u0097\5\u0097\u09e8\n\u0097\5\u0097\u09ea")
        buf.write("\n\u0097\3\u0097\5\u0097\u09ed\n\u0097\3\u0098\3\u0098")
        buf.write("\5\u0098\u09f1\n\u0098\3\u0098\5\u0098\u09f4\n\u0098\3")
        buf.write("\u0099\3\u0099\5\u0099\u09f8\n\u0099\3\u0099\3\u0099\5")
        buf.write("\u0099\u09fc\n\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0a01")
        buf.write("\n\u0099\3\u009a\3\u009a\3\u009a\3\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\3\u009b\5\u009b\u0a0c\n\u009b\3\u009b")
        buf.write("\3\u009b\5\u009b\u0a10\n\u009b\3\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\3\u009b\5\u009b\u0a18\n\u009b\3\u009c")
        buf.write("\5\u009c\u0a1b\n\u009c\3\u009c\3\u009c\3\u009d\3\u009d")
        buf.write("\3\u009d\3\u009d\7\u009d\u0a23\n\u009d\f\u009d\16\u009d")
        buf.write("\u0a26\13\u009d\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\7\u009e\u0a2d\n\u009e\f\u009e\16\u009e\u0a30\13\u009e")
        buf.write("\3\u009e\3\u009e\5\u009e\u0a34\n\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\5\u009e\u0a3a\n\u009e\3\u009e\3\u009e")
        buf.write("\5\u009e\u0a3e\n\u009e\3\u009e\5\u009e\u0a41\n\u009e\3")
        buf.write("\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f")
        buf.write("\u0a49\n\u009f\3\u009f\5\u009f\u0a4c\n\u009f\3\u009f\3")
        buf.write("\u009f\5\u009f\u0a50\n\u009f\3\u009f\3\u009f\5\u009f\u0a54")
        buf.write("\n\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0a59\n\u009f")
        buf.write("\3\u009f\5\u009f\u0a5c\n\u009f\3\u009f\3\u009f\5\u009f")
        buf.write("\u0a60\n\u009f\3\u009f\3\u009f\5\u009f\u0a64\n\u009f\7")
        buf.write("\u009f\u0a66\n\u009f\f\u009f\16\u009f\u0a69\13\u009f\3")
        buf.write("\u009f\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\7\u00a0\u0a72\n\u00a0\f\u00a0\16\u00a0\u0a75\13\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1")
        buf.write("\u0a84\n\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1")
        buf.write("\u0a8a\n\u00a1\7\u00a1\u0a8c\n\u00a1\f\u00a1\16\u00a1")
        buf.write("\u0a8f\13\u00a1\3\u00a2\3\u00a2\5\u00a2\u0a93\n\u00a2")
        buf.write("\3\u00a3\3\u00a3\5\u00a3\u0a97\n\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\7\u00a3\u0a9c\n\u00a3\f\u00a3\16\u00a3\u0a9f")
        buf.write("\13\u00a3\3\u00a3\5\u00a3\u0aa2\n\u00a3\3\u00a3\3\u00a3")
        buf.write("\5\u00a3\u0aa6\n\u00a3\3\u00a3\5\u00a3\u0aa9\n\u00a3\3")
        buf.write("\u00a3\3\u00a3\7\u00a3\u0aad\n\u00a3\f\u00a3\16\u00a3")
        buf.write("\u0ab0\13\u00a3\3\u00a3\5\u00a3\u0ab3\n\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\7\u00a3\u0ab8\n\u00a3\f\u00a3\16\u00a3")
        buf.write("\u0abb\13\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0ac5\n\u00a4\5\u00a4")
        buf.write("\u0ac7\n\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\7\u00a5")
        buf.write("\u0acd\n\u00a5\f\u00a5\16\u00a5\u0ad0\13\u00a5\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\5\u00a6\u0ad5\n\u00a6\3\u00a7\3\u00a7")
        buf.write("\3\u00a7\7\u00a7\u0ada\n\u00a7\f\u00a7\16\u00a7\u0add")
        buf.write("\13\u00a7\3\u00a7\3\u00a7\7\u00a7\u0ae1\n\u00a7\f\u00a7")
        buf.write("\16\u00a7\u0ae4\13\u00a7\3\u00a7\5\u00a7\u0ae7\n\u00a7")
        buf.write("\5\u00a7\u0ae9\n\u00a7\3\u00a7\3\u00a7\7\u00a7\u0aed\n")
        buf.write("\u00a7\f\u00a7\16\u00a7\u0af0\13\u00a7\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\5\u00a8\u0af5\n\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\5\u00a8\u0afc\n\u00a8\3\u00a9\5\u00a9")
        buf.write("\u0aff\n\u00a9\3\u00a9\5\u00a9\u0b02\n\u00a9\3\u00a9\3")
        buf.write("\u00a9\3\u00a9\5\u00a9\u0b07\n\u00a9\3\u00a9\3\u00a9\5")
        buf.write("\u00a9\u0b0b\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00ab\3")
        buf.write("\u00ab\3\u00ab\3\u00ab\3\u00ab\7\u00ab\u0b15\n\u00ab\f")
        buf.write("\u00ab\16\u00ab\u0b18\13\u00ab\3\u00ab\3\u00ab\3\u00ac")
        buf.write("\3\u00ac\5\u00ac\u0b1e\n\u00ac\3\u00ac\3\u00ac\3\u00ac")
        buf.write("\5\u00ac\u0b23\n\u00ac\5\u00ac\u0b25\n\u00ac\5\u00ac\u0b27")
        buf.write("\n\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad")
        buf.write("\3\u00ad\3\u00ad\3\u00ad\3\u00ad\7\u00ad\u0b33\n\u00ad")
        buf.write("\f\u00ad\16\u00ad\u0b36\13\u00ad\5\u00ad\u0b38\n\u00ad")
        buf.write("\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\5\u00ae\u0b42\n\u00ae\3\u00af\3\u00af\5\u00af")
        buf.write("\u0b46\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af\7\u00af")
        buf.write("\u0b4c\n\u00af\f\u00af\16\u00af\u0b4f\13\u00af\3\u00af")
        buf.write("\3\u00af\3\u00af\3\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0")
        buf.write("\3\u00b0\5\u00b0\u0b5a\n\u00b0\3\u00b1\3\u00b1\3\u00b1")
        buf.write("\3\u00b1\3\u00b1\3\u00b1\7\u00b1\u0b62\n\u00b1\f\u00b1")
        buf.write("\16\u00b1\u0b65\13\u00b1\3\u00b1\3\u00b1\5\u00b1\u0b69")
        buf.write("\n\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2")
        buf.write("\7\u00b2\u0b71\n\u00b2\f\u00b2\16\u00b2\u0b74\13\u00b2")
        buf.write("\3\u00b2\3\u00b2\3\u00b2\7\u00b2\u0b79\n\u00b2\f\u00b2")
        buf.write("\16\u00b2\u0b7c\13\u00b2\5\u00b2\u0b7e\n\u00b2\3\u00b2")
        buf.write("\3\u00b2\3\u00b3\3\u00b3\5\u00b3\u0b84\n\u00b3\3\u00b4")
        buf.write("\3\u00b4\5\u00b4\u0b88\n\u00b4\3\u00b5\3\u00b5\3\u00b5")
        buf.write("\5\u00b5\u0b8d\n\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5")
        buf.write("\3\u00b5\3\u00b5\7\u00b5\u0b95\n\u00b5\f\u00b5\16\u00b5")
        buf.write("\u0b98\13\u00b5\3\u00b5\3\u00b5\5\u00b5\u0b9c\n\u00b5")
        buf.write("\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\7\u00b6\u0ba7\n\u00b6\f\u00b6\16\u00b6")
        buf.write("\u0baa\13\u00b6\3\u00b6\3\u00b6\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\3\u00b7\3\u00b7\7\u00b7\u0bb3\n\u00b7\f\u00b7\16\u00b7")
        buf.write("\u0bb6\13\u00b7\3\u00b7\3\u00b7\5\u00b7\u0bba\n\u00b7")
        buf.write("\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\7\u00b7")
        buf.write("\u0bc2\n\u00b7\f\u00b7\16\u00b7\u0bc5\13\u00b7\3\u00b7")
        buf.write("\3\u00b7\5\u00b7\u0bc9\n\u00b7\5\u00b7\u0bcb\n\u00b7\3")
        buf.write("\u00b8\3\u00b8\3\u00b8\5\u00b8\u0bd0\n\u00b8\3\u00b8\3")
        buf.write("\u00b8\5\u00b8\u0bd4\n\u00b8\3\u00b8\3\u00b8\3\u00b8\3")
        buf.write("\u00b8\5\u00b8\u0bda\n\u00b8\3\u00b8\3\u00b8\5\u00b8\u0bde")
        buf.write("\n\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00ba\3\u00ba")
        buf.write("\3\u00ba\3\u00ba\3\u00ba\7\u00ba\u0be9\n\u00ba\f\u00ba")
        buf.write("\16\u00ba\u0bec\13\u00ba\3\u00bb\3\u00bb\3\u00bb\5\u00bb")
        buf.write("\u0bf1\n\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc")
        buf.write("\7\u00bc\u0bf8\n\u00bc\f\u00bc\16\u00bc\u0bfb\13\u00bc")
        buf.write("\3\u00bc\3\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd")
        buf.write("\3\u00bd\7\u00bd\u0c05\n\u00bd\f\u00bd\16\u00bd\u0c08")
        buf.write("\13\u00bd\3\u00bd\3\u00bd\3\u00be\3\u00be\3\u00be\5\u00be")
        buf.write("\u0c0f\n\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00c0\3\u00c0")
        buf.write("\7\u00c0\u0c16\n\u00c0\f\u00c0\16\u00c0\u0c19\13\u00c0")
        buf.write("\3\u00c0\5\u00c0\u0c1c\n\u00c0\3\u00c0\7\u00c0\u0c1f\n")
        buf.write("\u00c0\f\u00c0\16\u00c0\u0c22\13\u00c0\3\u00c0\3\u00c0")
        buf.write("\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1")
        buf.write("\u0c2c\n\u00c1\5\u00c1\u0c2e\n\u00c1\3\u00c2\3\u00c2\3")
        buf.write("\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3")
        buf.write("\3\u00c3\3\u00c3\3\u00c3\7\u00c3\u0c3c\n\u00c3\f\u00c3")
        buf.write("\16\u00c3\u0c3f\13\u00c3\3\u00c4\3\u00c4\5\u00c4\u0c43")
        buf.write("\n\u00c4\3\u00c4\3\u00c4\7\u00c4\u0c47\n\u00c4\f\u00c4")
        buf.write("\16\u00c4\u0c4a\13\u00c4\3\u00c4\3\u00c4\3\u00c5\5\u00c5")
        buf.write("\u0c4f\n\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\7\u00c7\u0c5f\n\u00c7\f\u00c7\16\u00c7")
        buf.write("\u0c62\13\u00c7\3\u00c7\3\u00c7\3\u00c8\3\u00c8\5\u00c8")
        buf.write("\u0c68\n\u00c8\3\u00c9\5\u00c9\u0c6b\n\u00c9\3\u00c9\3")
        buf.write("\u00c9\3\u00c9\3\u00c9\7\u00c9\u0c71\n\u00c9\f\u00c9\16")
        buf.write("\u00c9\u0c74\13\u00c9\3\u00c9\3\u00c9\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\5\u00ca\u0c7c\n\u00ca\5\u00ca\u0c7e\n")
        buf.write("\u00ca\3\u00ca\3\u00ca\5\u00ca\u0c82\n\u00ca\3\u00ca\5")
        buf.write("\u00ca\u0c85\n\u00ca\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u0c8a")
        buf.write("\n\u00cb\5\u00cb\u0c8c\n\u00cb\3\u00cb\3\u00cb\5\u00cb")
        buf.write("\u0c90\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cc\3\u00cc")
        buf.write("\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u0c9c")
        buf.write("\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00cf")
        buf.write("\3\u00cf\5\u00cf\u0ca5\n\u00cf\3\u00cf\3\u00cf\3\u00cf")
        buf.write("\3\u00cf\7\u00cf\u0cab\n\u00cf\f\u00cf\16\u00cf\u0cae")
        buf.write("\13\u00cf\3\u00d0\3\u00d0\5\u00d0\u0cb2\n\u00d0\3\u00d0")
        buf.write("\3\u00d0\5\u00d0\u0cb6\n\u00d0\3\u00d1\3\u00d1\3\u00d1")
        buf.write("\5\u00d1\u0cbb\n\u00d1\3\u00d1\5\u00d1\u0cbe\n\u00d1\3")
        buf.write("\u00d2\3\u00d2\3\u00d2\3\u00d2\7\u00d2\u0cc4\n\u00d2\f")
        buf.write("\u00d2\16\u00d2\u0cc7\13\u00d2\3\u00d3\3\u00d3\3\u00d3")
        buf.write("\3\u00d3\3\u00d3\5\u00d3\u0cce\n\u00d3\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u0cd7")
        buf.write("\n\u00d5\3\u00d5\5\u00d5\u0cda\n\u00d5\3\u00d5\5\u00d5")
        buf.write("\u0cdd\n\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\7\u00d6")
        buf.write("\u0ce3\n\u00d6\f\u00d6\16\u00d6\u0ce6\13\u00d6\3\u00d6")
        buf.write("\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6")
        buf.write("\u0cef\n\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7")
        buf.write("\3\u00d7\3\u00d7\3\u00d7\7\u00d7\u0cf9\n\u00d7\f\u00d7")
        buf.write("\16\u00d7\u0cfc\13\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7")
        buf.write("\5\u00d7\u0d02\n\u00d7\3\u00d8\3\u00d8\5\u00d8\u0d06\n")
        buf.write("\u00d8\3\u00d8\3\u00d8\5\u00d8\u0d0a\n\u00d8\3\u00d8\5")
        buf.write("\u00d8\u0d0d\n\u00d8\3\u00d8\5\u00d8\u0d10\n\u00d8\3\u00d9")
        buf.write("\3\u00d9\3\u00d9\5\u00d9\u0d15\n\u00d9\3\u00da\3\u00da")
        buf.write("\3\u00da\5\u00da\u0d1a\n\u00da\3\u00da\5\u00da\u0d1d\n")
        buf.write("\u00da\3\u00da\5\u00da\u0d20\n\u00da\3\u00db\3\u00db\6")
        buf.write("\u00db\u0d24\n\u00db\r\u00db\16\u00db\u0d25\3\u00db\5")
        buf.write("\u00db\u0d29\n\u00db\3\u00db\3\u00db\3\u00dc\3\u00dc\5")
        buf.write("\u00dc\u0d2f\n\u00dc\3\u00dc\5\u00dc\u0d32\n\u00dc\3\u00dd")
        buf.write("\5\u00dd\u0d35\n\u00dd\3\u00dd\6\u00dd\u0d38\n\u00dd\r")
        buf.write("\u00dd\16\u00dd\u0d39\3\u00dd\5\u00dd\u0d3d\n\u00dd\3")
        buf.write("\u00de\3\u00de\3\u00de\3\u00de\6\u00de\u0d43\n\u00de\r")
        buf.write("\u00de\16\u00de\u0d44\3\u00df\3\u00df\6\u00df\u0d49\n")
        buf.write("\u00df\r\u00df\16\u00df\u0d4a\3\u00e0\3\u00e0\3\u00e0")
        buf.write("\3\u00e0\3\u00e0\3\u00e0\7\u00e0\u0d53\n\u00e0\f\u00e0")
        buf.write("\16\u00e0\u0d56\13\u00e0\3\u00e0\3\u00e0\5\u00e0\u0d5a")
        buf.write("\n\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e2\3\u00e2\3\u00e2")
        buf.write("\3\u00e2\5\u00e2\u0d63\n\u00e2\3\u00e2\3\u00e2\3\u00e2")
        buf.write("\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0d6d")
        buf.write("\n\u00e2\3\u00e2\3\u00e2\5\u00e2\u0d71\n\u00e2\5\u00e2")
        buf.write("\u0d73\n\u00e2\3\u00e2\5\u00e2\u0d76\n\u00e2\3\u00e3\3")
        buf.write("\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3")
        buf.write("\7\u00e3\u0d80\n\u00e3\f\u00e3\16\u00e3\u0d83\13\u00e3")
        buf.write("\3\u00e3\5\u00e3\u0d86\n\u00e3\3\u00e3\5\u00e3\u0d89\n")
        buf.write("\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6")
        buf.write("\3\u00e6\3\u00e6\3\u00e6\7\u00e6\u0d9b\n\u00e6\f\u00e6")
        buf.write("\16\u00e6\u0d9e\13\u00e6\3\u00e6\3\u00e6\5\u00e6\u0da2")
        buf.write("\n\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u0da7\n\u00e6")
        buf.write("\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u0dae")
        buf.write("\n\u00e7\3\u00e7\5\u00e7\u0db1\n\u00e7\3\u00e8\3\u00e8")
        buf.write("\3\u00e8\3\u00e8\3\u00e8\7\u00e8\u0db8\n\u00e8\f\u00e8")
        buf.write("\16\u00e8\u0dbb\13\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8")
        buf.write("\5\u00e8\u0dc1\n\u00e8\3\u00e9\3\u00e9\3\u00e9\5\u00e9")
        buf.write("\u0dc6\n\u00e9\3\u00ea\3\u00ea\5\u00ea\u0dca\n\u00ea\3")
        buf.write("\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb")
        buf.write("\u0dd2\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb")
        buf.write("\u0dd8\n\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec")
        buf.write("\3\u00ec\5\u00ec\u0de0\n\u00ec\3\u00ec\5\u00ec\u0de3\n")
        buf.write("\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\7\u00ed\u0de9\n")
        buf.write("\u00ed\f\u00ed\16\u00ed\u0dec\13\u00ed\3\u00ed\3\u00ed")
        buf.write("\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u0df3\n\u00ee\3\u00ee")
        buf.write("\5\u00ee\u0df6\n\u00ee\3\u00ee\5\u00ee\u0df9\n\u00ee\3")
        buf.write("\u00ef\3\u00ef\3\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0")
        buf.write("\5\u00f0\u0e02\n\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1")
        buf.write("\5\u00f1\u0e08\n\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1")
        buf.write("\5\u00f1\u0e0e\n\u00f1\5\u00f1\u0e10\n\u00f1\3\u00f2\3")
        buf.write("\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2")
        buf.write("\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u0e1d\n\u00f2\5\u00f2")
        buf.write("\u0e1f\n\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3")
        buf.write("\3\u00f3\3\u00f3\5\u00f3\u0e28\n\u00f3\5\u00f3\u0e2a\n")
        buf.write("\u00f3\3\u00f4\3\u00f4\5\u00f4\u0e2e\n\u00f4\3\u00f4\3")
        buf.write("\u00f4\3\u00f4\3\u00f4\5\u00f4\u0e34\n\u00f4\3\u00f4\3")
        buf.write("\u00f4\5\u00f4\u0e38\n\u00f4\3\u00f5\3\u00f5\3\u00f5\3")
        buf.write("\u00f5\3\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6")
        buf.write("\3\u00f7\3\u00f7\5\u00f7\u0e46\n\u00f7\3\u00f7\3\u00f7")
        buf.write("\7\u00f7\u0e4a\n\u00f7\f\u00f7\16\u00f7\u0e4d\13\u00f7")
        buf.write("\3\u00f7\3\u00f7\3\u00f8\3\u00f8\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\5\u00f9\u0e5d\n\u00f9\3\u00f9\3\u00f9\5\u00f9\u0e61\n")
        buf.write("\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\5\u00f9\u0e77\n\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\3\u00f9\3\u00f9\5\u00f9\u0e7f\n\u00f9\3\u00f9\3\u00f9")
        buf.write("\5\u00f9\u0e83\n\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\5\u00f9\u0e89\n\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9")
        buf.write("\u0e8e\n\u00f9\3\u00f9\7\u00f9\u0e91\n\u00f9\f\u00f9\16")
        buf.write("\u00f9\u0e94\13\u00f9\3\u00fa\5\u00fa\u0e97\n\u00fa\3")
        buf.write("\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa")
        buf.write("\3\u00fa\3\u00fa\5\u00fa\u0ea2\n\u00fa\3\u00fa\3\u00fa")
        buf.write("\5\u00fa\u0ea6\n\u00fa\3\u00fa\3\u00fa\3\u00fa\7\u00fa")
        buf.write("\u0eab\n\u00fa\f\u00fa\16\u00fa\u0eae\13\u00fa\3\u00fa")
        buf.write("\3\u00fa\5\u00fa\u0eb2\n\u00fa\3\u00fb\3\u00fb\3\u00fb")
        buf.write("\3\u00fb\3\u00fc\3\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd")
        buf.write("\3\u00fd\3\u00fd\5\u00fd\u0ec0\n\u00fd\3\u00fe\3\u00fe")
        buf.write("\3\u00ff\3\u00ff\3\u00ff\3\u0100\3\u0100\3\u0100\3\u0100")
        buf.write("\3\u0101\3\u0101\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102")
        buf.write("\3\u0102\5\u0102\u0ed3\n\u0102\3\u0102\3\u0102\3\u0102")
        buf.write("\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102")
        buf.write("\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u0ee4")
        buf.write("\n\u0102\3\u0102\5\u0102\u0ee7\n\u0102\7\u0102\u0ee9\n")
        buf.write("\u0102\f\u0102\16\u0102\u0eec\13\u0102\3\u0103\3\u0103")
        buf.write("\3\u0103\3\u0103\3\u0103\5\u0103\u0ef3\n\u0103\3\u0103")
        buf.write("\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u0efb")
        buf.write("\n\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103")
        buf.write("\u0f02\n\u0103\3\u0103\3\u0103\5\u0103\u0f06\n\u0103\3")
        buf.write("\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0105\3\u0105")
        buf.write("\5\u0105\u0f0f\n\u0105\3\u0105\3\u0105\3\u0105\5\u0105")
        buf.write("\u0f14\n\u0105\7\u0105\u0f16\n\u0105\f\u0105\16\u0105")
        buf.write("\u0f19\13\u0105\3\u0105\3\u0105\3\u0105\7\u0105\u0f1e")
        buf.write("\n\u0105\f\u0105\16\u0105\u0f21\13\u0105\3\u0105\5\u0105")
        buf.write("\u0f24\n\u0105\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106")
        buf.write("\5\u0106\u0f2b\n\u0106\3\u0106\3\u0106\3\u0106\3\u0106")
        buf.write("\3\u0106\3\u0106\3\u0106\5\u0106\u0f34\n\u0106\3\u0107")
        buf.write("\3\u0107\3\u0107\3\u0108\3\u0108\3\u0109\3\u0109\3\u0109")
        buf.write("\3\u0109\3\u0109\7\u0109\u0f40\n\u0109\f\u0109\16\u0109")
        buf.write("\u0f43\13\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109")
        buf.write("\3\u0109\3\u0109\3\u0109\7\u0109\u0f4d\n\u0109\f\u0109")
        buf.write("\16\u0109\u0f50\13\u0109\3\u0109\3\u0109\5\u0109\u0f54")
        buf.write("\n\u0109\3\u0109\3\u0109\3\u010a\3\u010a\3\u010a\3\u010a")
        buf.write("\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a")
        buf.write("\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a")
        buf.write("\u0f69\n\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a")
        buf.write("\7\u010a\u0f70\n\u010a\f\u010a\16\u010a\u0f73\13\u010a")
        buf.write("\3\u010b\3\u010b\5\u010b\u0f77\n\u010b\3\u010c\5\u010c")
        buf.write("\u0f7a\n\u010c\3\u010c\3\u010c\3\u010c\6\u010c\u0f7f\n")
        buf.write("\u010c\r\u010c\16\u010c\u0f80\3\u010c\5\u010c\u0f84\n")
        buf.write("\u010c\3\u010c\3\u010c\5\u010c\u0f88\n\u010c\3\u010c\5")
        buf.write("\u010c\u0f8b\n\u010c\3\u010d\3\u010d\3\u010d\3\u010d\3")
        buf.write("\u010d\5\u010d\u0f92\n\u010d\3\u010e\5\u010e\u0f95\n\u010e")
        buf.write("\3\u010e\3\u010e\6\u010e\u0f99\n\u010e\r\u010e\16\u010e")
        buf.write("\u0f9a\3\u010e\5\u010e\u0f9e\n\u010e\3\u010e\3\u010e\5")
        buf.write("\u010e\u0fa2\n\u010e\3\u010e\5\u010e\u0fa5\n\u010e\3\u010f")
        buf.write("\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u0fac\n\u010f")
        buf.write("\3\u0110\3\u0110\3\u0110\5\u0110\u0fb1\n\u0110\3\u0111")
        buf.write("\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111")
        buf.write("\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111")
        buf.write("\5\u0111\u0fc2\n\u0111\5\u0111\u0fc4\n\u0111\3\u0112\3")
        buf.write("\u0112\5\u0112\u0fc8\n\u0112\3\u0113\3\u0113\3\u0113\3")
        buf.write("\u0113\7\u0113\u0fce\n\u0113\f\u0113\16\u0113\u0fd1\13")
        buf.write("\u0113\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\5\u0114\u0fdc\n\u0114\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\5\u0115\u0fe2\n\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\5\u0115\u0fec\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\5\u0115\u0ffc\n\u0115\3\u0115")
        buf.write("\3\u0115\5\u0115\u1000\n\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\6\u0115\u1007\n\u0115\r\u0115\16\u0115")
        buf.write("\u1008\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u100f\n")
        buf.write("\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115")
        buf.write("\u101d\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\7\u0115\u1026\n\u0115\f\u0115\16\u0115")
        buf.write("\u1029\13\u0115\3\u0115\5\u0115\u102c\n\u0115\3\u0115")
        buf.write("\5\u0115\u102f\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\5\u0115\u1038\n\u0115\3\u0115")
        buf.write("\3\u0115\7\u0115\u103c\n\u0115\f\u0115\16\u0115\u103f")
        buf.write("\13\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\5\u0115\u1048\n\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\5\u0115\u1050\n\u0115\3\u0115")
        buf.write("\5\u0115\u1053\n\u0115\3\u0115\5\u0115\u1056\n\u0115\3")
        buf.write("\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\5\u0115\u105f\n\u0115\3\u0115\3\u0115\3\u0115\5\u0115")
        buf.write("\u1064\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\7\u0115\u106b\n\u0115\f\u0115\16\u0115\u106e\13\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\5\u0115\u1073\n\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\5\u0115\u1078\n\u0115\3\u0115\5\u0115")
        buf.write("\u107b\n\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u1080\n")
        buf.write("\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u1085\n\u0115\7")
        buf.write("\u0115\u1087\n\u0115\f\u0115\16\u0115\u108a\13\u0115\3")
        buf.write("\u0115\3\u0115\3\u0115\5\u0115\u108f\n\u0115\3\u0115\3")
        buf.write("\u0115\3\u0115\3\u0115\5\u0115\u1095\n\u0115\3\u0115\3")
        buf.write("\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115")
        buf.write("\u109e\n\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u10a3\n")
        buf.write("\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115")
        buf.write("\5\u0115\u10ab\n\u0115\3\u0115\3\u0115\5\u0115\u10af\n")
        buf.write("\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u10b4\n\u0115\3")
        buf.write("\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u10ba\n\u0115\3")
        buf.write("\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u10c1\n")
        buf.write("\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u10c6\n\u0115\3")
        buf.write("\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u10cd\n")
        buf.write("\u0115\3\u0115\3\u0115\5\u0115\u10d1\n\u0115\3\u0115\3")
        buf.write("\u0115\3\u0115\5\u0115\u10d6\n\u0115\3\u0115\3\u0115\3")
        buf.write("\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u10de\n\u0115\3")
        buf.write("\u0115\5\u0115\u10e1\n\u0115\3\u0115\5\u0115\u10e4\n\u0115")
        buf.write("\3\u0115\5\u0115\u10e7\n\u0115\3\u0115\3\u0115\5\u0115")
        buf.write("\u10eb\n\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u10f0\n")
        buf.write("\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u10f5\n\u0115\3")
        buf.write("\u0115\3\u0115\5\u0115\u10f9\n\u0115\3\u0115\3\u0115\3")
        buf.write("\u0115\3\u0115\3\u0115\5\u0115\u1100\n\u0115\3\u0115\3")
        buf.write("\u0115\3\u0115\5\u0115\u1105\n\u0115\5\u0115\u1107\n\u0115")
        buf.write("\3\u0116\3\u0116\3\u0116\5\u0116\u110c\n\u0116\3\u0116")
        buf.write("\3\u0116\3\u0116\3\u0116\5\u0116\u1112\n\u0116\3\u0116")
        buf.write("\5\u0116\u1115\n\u0116\3\u0116\3\u0116\5\u0116\u1119\n")
        buf.write("\u0116\5\u0116\u111b\n\u0116\3\u0117\3\u0117\3\u0118\3")
        buf.write("\u0118\3\u0119\3\u0119\3\u011a\3\u011a\3\u011a\5\u011a")
        buf.write("\u1126\n\u011a\3\u011a\3\u011a\5\u011a\u112a\n\u011a\5")
        buf.write("\u011a\u112c\n\u011a\3\u011a\3\u011a\3\u011b\3\u011b\3")
        buf.write("\u011b\3\u011b\3\u011b\3\u011b\3\u011b\5\u011b\u1137\n")
        buf.write("\u011b\3\u011c\3\u011c\3\u011d\3\u011d\3\u011d\3\u011d")
        buf.write("\3\u011d\3\u011d\3\u011d\5\u011d\u1142\n\u011d\3\u011e")
        buf.write("\3\u011e\3\u011e\3\u011e\3\u011e\7\u011e\u1149\n\u011e")
        buf.write("\f\u011e\16\u011e\u114c\13\u011e\5\u011e\u114e\n\u011e")
        buf.write("\3\u011f\3\u011f\5\u011f\u1152\n\u011f\3\u011f\5\u011f")
        buf.write("\u1155\n\u011f\3\u011f\3\u011f\5\u011f\u1159\n\u011f\3")
        buf.write("\u0120\3\u0120\3\u0120\3\u0120\3\u0121\3\u0121\3\u0121")
        buf.write("\3\u0121\3\u0121\3\u0121\3\u0121\5\u0121\u1166\n\u0121")
        buf.write("\3\u0122\3\u0122\3\u0122\5\u0122\u116b\n\u0122\3\u0122")
        buf.write("\3\u0122\3\u0122\3\u0122\7\u0122\u1171\n\u0122\f\u0122")
        buf.write("\16\u0122\u1174\13\u0122\3\u0122\3\u0122\3\u0122\3\u0122")
        buf.write("\5\u0122\u117a\n\u0122\3\u0123\3\u0123\3\u0123\5\u0123")
        buf.write("\u117f\n\u0123\3\u0123\3\u0123\5\u0123\u1183\n\u0123\3")
        buf.write("\u0123\3\u0123\3\u0123\5\u0123\u1188\n\u0123\3\u0124\3")
        buf.write("\u0124\3\u0124\5\u0124\u118d\n\u0124\3\u0124\5\u0124\u1190")
        buf.write("\n\u0124\3\u0124\3\u0124\3\u0124\7\u0124\u1195\n\u0124")
        buf.write("\f\u0124\16\u0124\u1198\13\u0124\3\u0124\3\u0124\3\u0125")
        buf.write("\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u11a1\n\u0125")
        buf.write("\3\u0125\3\u0125\3\u0125\3\u0125\7\u0125\u11a7\n\u0125")
        buf.write("\f\u0125\16\u0125\u11aa\13\u0125\3\u0125\5\u0125\u11ad")
        buf.write("\n\u0125\3\u0125\3\u0125\3\u0126\3\u0126\3\u0126\3\u0126")
        buf.write("\3\u0126\3\u0126\5\u0126\u11b7\n\u0126\3\u0126\5\u0126")
        buf.write("\u11ba\n\u0126\5\u0126\u11bc\n\u0126\3\u0127\3\u0127\3")
        buf.write("\u0127\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128")
        buf.write("\u11c6\n\u0128\5\u0128\u11c8\n\u0128\3\u0129\3\u0129\3")
        buf.write("\u0129\3\u0129\5\u0129\u11ce\n\u0129\3\u012a\3\u012a\3")
        buf.write("\u012a\3\u012a\5\u012a\u11d4\n\u012a\5\u012a\u11d6\n\u012a")
        buf.write("\3\u012b\3\u012b\3\u012b\3\u012c\3\u012c\3\u012c\3\u012d")
        buf.write("\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u11e4")
        buf.write("\n\u012d\5\u012d\u11e6\n\u012d\3\u012e\3\u012e\3\u012e")
        buf.write("\3\u012e\3\u012e\3\u012e\5\u012e\u11ee\n\u012e\3\u012f")
        buf.write("\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f")
        buf.write("\u11f7\n\u012f\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130")
        buf.write("\3\u0130\3\u0130\5\u0130\u1200\n\u0130\3\u0131\3\u0131")
        buf.write("\3\u0132\3\u0132\3\u0133\3\u0133\3\u0133\3\u0133\5\u0133")
        buf.write("\u120a\n\u0133\3\u0134\3\u0134\5\u0134\u120e\n\u0134\3")
        buf.write("\u0134\3\u0134\3\u0135\5\u0135\u1213\n\u0135\3\u0135\3")
        buf.write("\u0135\5\u0135\u1217\n\u0135\3\u0135\5\u0135\u121a\n\u0135")
        buf.write("\3\u0136\5\u0136\u121d\n\u0136\3\u0136\3\u0136\5\u0136")
        buf.write("\u1221\n\u0136\3\u0137\3\u0137\3\u0138\3\u0138\3\u0138")
        buf.write("\5\u0138\u1228\n\u0138\3\u0139\3\u0139\3\u0139\3\u0139")
        buf.write("\3\u013a\3\u013a\3\u013a\3\u013a\7\u013a\u1232\n\u013a")
        buf.write("\f\u013a\16\u013a\u1235\13\u013a\3\u013a\3\u013a\3\u013a")
        buf.write("\3\u013a\3\u013a\3\u013a\7\u013a\u123d\n\u013a\f\u013a")
        buf.write("\16\u013a\u1240\13\u013a\5\u013a\u1242\n\u013a\3\u013b")
        buf.write("\3\u013b\5\u013b\u1246\n\u013b\3\u013c\3\u013c\3\u013d")
        buf.write("\3\u013d\3\u013e\3\u013e\3\u013f\3\u013f\3\u0140\3\u0140")
        buf.write("\3\u0141\3\u0141\3\u0142\3\u0142\3\u0142\7\u0142\u1257")
        buf.write("\n\u0142\f\u0142\16\u0142\u125a\13\u0142\3\u0142\3\u0142")
        buf.write("\5\u0142\u125e\n\u0142\3\u0143\3\u0143\3\u0144\3\u0144")
        buf.write("\3\u0144\5\u0144\u1265\n\u0144\3\u0145\3\u0145\3\u0146")
        buf.write("\3\u0146\3\u0147\3\u0147\3\u0148\3\u0148\3\u0148\7\u0148")
        buf.write("\u1270\n\u0148\f\u0148\16\u0148\u1273\13\u0148\3\u0149")
        buf.write("\3\u0149\3\u014a\3\u014a\3\u014a\7\u014a\u127a\n\u014a")
        buf.write("\f\u014a\16\u014a\u127d\13\u014a\3\u014a\3\u014a\5\u014a")
        buf.write("\u1281\n\u014a\3\u014b\3\u014b\3\u014c\3\u014c\3\u014c")
        buf.write("\7\u014c\u1288\n\u014c\f\u014c\16\u014c\u128b\13\u014c")
        buf.write("\3\u014d\3\u014d\3\u014d\7\u014d\u1290\n\u014d\f\u014d")
        buf.write("\16\u014d\u1293\13\u014d\3\u014e\3\u014e\3\u014e\7\u014e")
        buf.write("\u1298\n\u014e\f\u014e\16\u014e\u129b\13\u014e\3\u014f")
        buf.write("\3\u014f\3\u014f\5\u014f\u12a0\n\u014f\3\u0150\3\u0150")
        buf.write("\3\u0150\5\u0150\u12a5\n\u0150\3\u0151\3\u0151\3\u0151")
        buf.write("\5\u0151\u12aa\n\u0151\3\u0152\3\u0152\5\u0152\u12ae\n")
        buf.write("\u0152\3\u0153\3\u0153\3\u0154\3\u0154\5\u0154\u12b4\n")
        buf.write("\u0154\3\u0155\3\u0155\5\u0155\u12b8\n\u0155\3\u0156\3")
        buf.write("\u0156\3\u0156\5\u0156\u12bd\n\u0156\3\u0157\3\u0157\3")
        buf.write("\u0158\3\u0158\3\u0158\7\u0158\u12c4\n\u0158\f\u0158\16")
        buf.write("\u0158\u12c7\13\u0158\3\u0159\3\u0159\3\u0159\3\u0159")
        buf.write("\5\u0159\u12cd\n\u0159\3\u015a\3\u015a\3\u015a\7\u015a")
        buf.write("\u12d2\n\u015a\f\u015a\16\u015a\u12d5\13\u015a\3\u015b")
        buf.write("\3\u015b\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c")
        buf.write("\3\u015c\5\u015c\u12e0\n\u015c\3\u015d\3\u015d\5\u015d")
        buf.write("\u12e4\n\u015d\3\u015d\3\u015d\7\u015d\u12e8\n\u015d\f")
        buf.write("\u015d\16\u015d\u12eb\13\u015d\3\u015d\3\u015d\5\u015d")
        buf.write("\u12ef\n\u015d\3\u015e\3\u015e\3\u015e\5\u015e\u12f4\n")
        buf.write("\u015e\5\u015e\u12f6\n\u015e\3\u015e\3\u015e\3\u015e\5")
        buf.write("\u015e\u12fb\n\u015e\7\u015e\u12fd\n\u015e\f\u015e\16")
        buf.write("\u015e\u1300\13\u015e\3\u015e\3\u015e\5\u015e\u1304\n")
        buf.write("\u015e\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\5\u015f")
        buf.write("\u130b\n\u015f\3\u015f\3\u015f\3\u015f\5\u015f\u1310\n")
        buf.write("\u015f\5\u015f\u1312\n\u015f\5\u015f\u1314\n\u015f\3\u015f")
        buf.write("\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f")
        buf.write("\5\u015f\u131e\n\u015f\3\u015f\3\u015f\3\u015f\5\u015f")
        buf.write("\u1323\n\u015f\7\u015f\u1325\n\u015f\f\u015f\16\u015f")
        buf.write("\u1328\13\u015f\5\u015f\u132a\n\u015f\3\u015f\3\u015f")
        buf.write("\5\u015f\u132e\n\u015f\3\u0160\3\u0160\3\u0160\3\u0161")
        buf.write("\3\u0161\3\u0161\3\u0161\5\u0161\u1337\n\u0161\3\u0161")
        buf.write("\3\u0161\3\u0162\3\u0162\5\u0162\u133d\n\u0162\3\u0162")
        buf.write("\3\u0162\5\u0162\u1341\n\u0162\5\u0162\u1343\n\u0162\3")
        buf.write("\u0163\3\u0163\5\u0163\u1347\n\u0163\3\u0163\3\u0163\5")
        buf.write("\u0163\u134b\n\u0163\3\u0163\3\u0163\5\u0163\u134f\n\u0163")
        buf.write("\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163")
        buf.write("\u1357\n\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163")
        buf.write("\3\u0163\5\u0163\u135f\n\u0163\5\u0163\u1361\n\u0163\3")
        buf.write("\u0164\3\u0164\3\u0164\3\u0164\5\u0164\u1367\n\u0164\3")
        buf.write("\u0164\5\u0164\u136a\n\u0164\3\u0164\3\u0164\3\u0165\3")
        buf.write("\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165")
        buf.write("\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165")
        buf.write("\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\5\u0165\u1382")
        buf.write("\n\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\5\u0165")
        buf.write("\u1389\n\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165")
        buf.write("\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165")
        buf.write("\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165")
        buf.write("\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165")
        buf.write("\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\5\u0165\u13aa")
        buf.write("\n\u0165\3\u0166\3\u0166\3\u0166\5\u0166\u13af\n\u0166")
        buf.write("\3\u0166\5\u0166\u13b2\n\u0166\3\u0166\3\u0166\3\u0166")
        buf.write("\5\u0166\u13b7\n\u0166\5\u0166\u13b9\n\u0166\3\u0166\3")
        buf.write("\u0166\7\u0166\u13bd\n\u0166\f\u0166\16\u0166\u13c0\13")
        buf.write("\u0166\3\u0167\3\u0167\3\u0167\3\u0167\5\u0167\u13c6\n")
        buf.write("\u0167\3\u0168\3\u0168\3\u0169\3\u0169\3\u0169\5\u0169")
        buf.write("\u13cd\n\u0169\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169")
        buf.write("\u13d3\n\u0169\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169")
        buf.write("\u13d9\n\u0169\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169")
        buf.write("\u13df\n\u0169\3\u0169\3\u0169\3\u0169\5\u0169\u13e4\n")
        buf.write("\u0169\5\u0169\u13e6\n\u0169\3\u0169\5\u0169\u13e9\n\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\5\u0169\u13f3\n\u0169\3\u0169\5\u0169\u13f6\n")
        buf.write("\u0169\5\u0169\u13f8\n\u0169\5\u0169\u13fa\n\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169\u1408\n\u0169")
        buf.write("\3\u016a\3\u016a\3\u016b\3\u016b\3\u016b\3\u016c\3\u016c")
        buf.write("\3\u016d\3\u016d\3\u016e\3\u016e\5\u016e\u1415\n\u016e")
        buf.write("\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f")
        buf.write("\5\u016f\u141e\n\u016f\3\u0170\3\u0170\3\u0170\5\u0170")
        buf.write("\u1423\n\u0170\3\u0171\3\u0171\3\u0171\5\u0171\u1428\n")
        buf.write("\u0171\3\u0172\3\u0172\3\u0172\5\u0172\u142d\n\u0172\3")
        buf.write("\u0173\3\u0173\3\u0173\3\u0173\3\u0174\3\u0174\3\u0174")
        buf.write("\2\7\u0140\u014c\u01f0\u0202\u0212\u0175\2\4\6\b\n\f\16")
        buf.write("\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDF")
        buf.write("HJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce")
        buf.write("\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0")
        buf.write("\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2")
        buf.write("\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104")
        buf.write("\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116")
        buf.write("\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128")
        buf.write("\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a")
        buf.write("\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c")
        buf.write("\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e")
        buf.write("\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170")
        buf.write("\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182")
        buf.write("\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194")
        buf.write("\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6")
        buf.write("\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8")
        buf.write("\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca")
        buf.write("\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc")
        buf.write("\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee")
        buf.write("\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200")
        buf.write("\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212")
        buf.write("\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224")
        buf.write("\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236")
        buf.write("\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248")
        buf.write("\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a")
        buf.write("\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c")
        buf.write("\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e")
        buf.write("\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290")
        buf.write("\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2")
        buf.write("\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4")
        buf.write("\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6")
        buf.write("\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8")
        buf.write("\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\2R\3\2\u01fa")
        buf.write("\u01fa\4\2\17\17\u00bf\u00bf\4\2\b\b\u0120\u0120\4\2\u00a2")
        buf.write("\u00a2\u012d\u012d\4\2::\u0110\u0110\5\2%%\u0117\u0117")
        buf.write("\u016a\u016a\4\2oo{{\4\2\6\6\34\34\5\2jj\u00b6\u00b6\u0198")
        buf.write("\u0198\5\2\u00f2\u00f2\u0109\u0109\u011a\u011a\4\2\u009a")
        buf.write("\u009a\u019e\u019e\4\2%%\u016a\u016a\4\2\5\5tt\5\2\5\5")
        buf.write("tt\u00e6\u00e6\5\2WW\u010f\u010f\u016b\u016b\4\2\u00da")
        buf.write("\u00da\u0110\u0110\4\2\u00de\u00de\u0172\u0172\5\2\u0092")
        buf.write("\u0092\u00b7\u00b7\u0116\u0116\4\2UUii\6\2\u00a9\u00a9")
        buf.write("\u00b5\u00b5\u00f6\u00f6\u0113\u0113\4\2ff\u01f7\u01f7")
        buf.write("\3\2\u011e\u011f\3\3\u01fa\u01fa\3\2\u013d\u013e\4\2\u010b")
        buf.write("\u010b\u01b2\u01b2\3\2FG\4\2hh\u00a8\u00a8\4\2\u00ff\u00ff")
        buf.write("\u01a8\u01a8\4\2\33\33\u00a8\u00a8\4\2((kk\6\2\u0083\u0083")
        buf.write("\u00bb\u00bb\u00e0\u00e0\u0193\u0193\5\2\t\tqq\u0194\u0194")
        buf.write("\5\2\u009c\u009c\u00c9\u00c9\u0142\u0142\4\2\u014e\u014e")
        buf.write("\u017f\u017f\5\2\u014e\u014e\u0168\u0168\u017f\u017f\4")
        buf.write("\2\u0087\u0087\u00aa\u00aa\4\2SS\u0144\u0144\4\2\u00a7")
        buf.write("\u00a7\u00c4\u00c4\4\2\t\t\u0199\u0199\4\2\31\31\u0156")
        buf.write("\u0156\4\2\22\22ll\4\2\u0093\u0093\u00c6\u00c6\4\2\t\t")
        buf.write("\u0093\u0093\3\2\u017b\u017c\4\2\u00de\u00de\u0175\u0175")
        buf.write("\3\2\u00cc\u00cf\5\2\u01ec\u01ec\u01f1\u01f1\u01f5\u01f5")
        buf.write("\3\2\u01f2\u01f3\4\2ee\u00ac\u00ac\6\2\t\t\r\r\u008a\u008a")
        buf.write("\u0169\u0169\4\2\62\62\u01b6\u01b6\4\2qq\u0194\u0194\4")
        buf.write("\2//@@\4\2\u0094\u0094\u00c7\u00c7\4\2\64\64\u00ef\u00ef")
        buf.write("\5\2\'\'\u00c8\u00c8\u0188\u0188\4\2\u01b7\u01b7\u01ba")
        buf.write("\u01ba\4\2~~\u00f8\u00f8\4\2\u0082\u0082\u00e9\u00e9\4")
        buf.write("\2IIrr\4\2\u00a4\u00a4\u015f\u015f\3\2\u01d3\u01e2\3\2")
        buf.write("\u01cc\u01d2\3\2\u01c6\u01cb\4\2\u012d\u012d\u0147\u0147")
        buf.write("\4\2\u0096\u0096\u0127\u0127\4\2\u00fd\u00fd\u014d\u014d")
        buf.write("\4\2\u0112\u0112\u016c\u016c\5\2\u008f\u008f\u0179\u0179")
        buf.write("\u01a9\u01a9\4\2>>\u0143\u0143\5\2>>\u00fb\u00fb\u0143")
        buf.write("\u0143\4\2\u011b\u011b\u0176\u0176\4\2\u00a7\u00a7\u0139")
        buf.write("\u0139\4\2\\\\\u01c2\u01c2\4\2\u00e7\u00e7\u0150\u0150")
        buf.write("\4\2++\63\63\6\2\\\\\u00a5\u00a5\u00e1\u00e1\u0150\u0150")
        buf.write("\3\2\u01e8\u01e9\4\2\u01e3\u01e3\u01ea\u01eaG\2\4\b\13")
        buf.write("\13\16\16\20\21\23\34\37\'))+,.\60\62\65\67BEPRSUbdeg")
        buf.write("imprsuwz|~\u0082\u0084\u0087\u0089\u0089\u008b\u008f\u0092")
        buf.write("\u0097\u0099\u009a\u009c\u009d\u00a1\u00a2\u00a4\u00a5")
        buf.write("\u00a7\u00a8\u00aa\u00ad\u00af\u00b5\u00b7\u00ba\u00bc")
        buf.write("\u00bc\u00be\u00be\u00c0\u00cb\u00cd\u00d1\u00d3\u00df")
        buf.write("\u00e1\u00e3\u00e5\u00f4\u00f6\u00f8\u00fb\u00fb\u00fd")
        buf.write("\u00fd\u0101\u0105\u0107\u0109\u010b\u010c\u010f\u010f")
        buf.write("\u0111\u011d\u0120\u0120\u0122\u0129\u012c\u0140\u0142")
        buf.write("\u014e\u0150\u0152\u0154\u0154\u0156\u015d\u015f\u016d")
        buf.write("\u016f\u017a\u017e\u0186\u0188\u018d\u018f\u0192\u0195")
        buf.write("\u0195\u0197\u0197\u0199\u019c\u019e\u019f\u01a1\u01aa")
        buf.write("\u01ac\u01ac\u01ae\u01ae\u01b0\u01e2\u020d\u020d\2\u1683")
        buf.write("\2\u02e9\3\2\2\2\4\u02ff\3\2\2\2\6\u0314\3\2\2\2\b\u0316")
        buf.write("\3\2\2\2\n\u031a\3\2\2\2\f\u0330\3\2\2\2\16\u0362\3\2")
        buf.write("\2\2\20\u0366\3\2\2\2\22\u037e\3\2\2\2\24\u0382\3\2\2")
        buf.write("\2\26\u038e\3\2\2\2\30\u039c\3\2\2\2\32\u03a3\3\2\2\2")
        buf.write("\34\u03b7\3\2\2\2\36\u03c1\3\2\2\2 \u03d2\3\2\2\2\"\u03ea")
        buf.write("\3\2\2\2$\u03ec\3\2\2\2&\u03fd\3\2\2\2(\u0420\3\2\2\2")
        buf.write("*\u0422\3\2\2\2,\u0426\3\2\2\2.\u043c\3\2\2\2\60\u045f")
        buf.write("\3\2\2\2\62\u0463\3\2\2\2\64\u047a\3\2\2\2\66\u0491\3")
        buf.write("\2\2\28\u049a\3\2\2\2:\u04a3\3\2\2\2<\u04ac\3\2\2\2>\u04b0")
        buf.write("\3\2\2\2@\u04b5\3\2\2\2B\u04cd\3\2\2\2D\u04cf\3\2\2\2")
        buf.write("F\u04d3\3\2\2\2H\u0507\3\2\2\2J\u0523\3\2\2\2L\u0525\3")
        buf.write("\2\2\2N\u0533\3\2\2\2P\u053f\3\2\2\2R\u0544\3\2\2\2T\u054a")
        buf.write("\3\2\2\2V\u054d\3\2\2\2X\u0556\3\2\2\2Z\u0563\3\2\2\2")
        buf.write("\\\u0574\3\2\2\2^\u0585\3\2\2\2`\u058d\3\2\2\2b\u0592")
        buf.write("\3\2\2\2d\u05a2\3\2\2\2f\u05a6\3\2\2\2h\u05be\3\2\2\2")
        buf.write("j\u05c1\3\2\2\2l\u05c7\3\2\2\2n\u05d1\3\2\2\2p\u05da\3")
        buf.write("\2\2\2r\u05f6\3\2\2\2t\u05fc\3\2\2\2v\u05ff\3\2\2\2x\u0606")
        buf.write("\3\2\2\2z\u060e\3\2\2\2|\u061a\3\2\2\2~\u061c\3\2\2\2")
        buf.write("\u0080\u0620\3\2\2\2\u0082\u0626\3\2\2\2\u0084\u0642\3")
        buf.write("\2\2\2\u0086\u0664\3\2\2\2\u0088\u0694\3\2\2\2\u008a\u069e")
        buf.write("\3\2\2\2\u008c\u06a0\3\2\2\2\u008e\u06a5\3\2\2\2\u0090")
        buf.write("\u06b3\3\2\2\2\u0092\u06b5\3\2\2\2\u0094\u06ba\3\2\2\2")
        buf.write("\u0096\u06ca\3\2\2\2\u0098\u06eb\3\2\2\2\u009a\u070e\3")
        buf.write("\2\2\2\u009c\u0712\3\2\2\2\u009e\u0721\3\2\2\2\u00a0\u0723")
        buf.write("\3\2\2\2\u00a2\u0726\3\2\2\2\u00a4\u072a\3\2\2\2\u00a6")
        buf.write("\u0732\3\2\2\2\u00a8\u074c\3\2\2\2\u00aa\u074e\3\2\2\2")
        buf.write("\u00ac\u0752\3\2\2\2\u00ae\u0755\3\2\2\2\u00b0\u0759\3")
        buf.write("\2\2\2\u00b2\u075e\3\2\2\2\u00b4\u0762\3\2\2\2\u00b6\u0773")
        buf.write("\3\2\2\2\u00b8\u0780\3\2\2\2\u00ba\u0791\3\2\2\2\u00bc")
        buf.write("\u079e\3\2\2\2\u00be\u07aa\3\2\2\2\u00c0\u07ac\3\2\2\2")
        buf.write("\u00c2\u07ba\3\2\2\2\u00c4\u07cb\3\2\2\2\u00c6\u07e4\3")
        buf.write("\2\2\2\u00c8\u07ee\3\2\2\2\u00ca\u07f2\3\2\2\2\u00cc\u0817")
        buf.write("\3\2\2\2\u00ce\u0819\3\2\2\2\u00d0\u0832\3\2\2\2\u00d2")
        buf.write("\u083d\3\2\2\2\u00d4\u0844\3\2\2\2\u00d6\u0848\3\2\2\2")
        buf.write("\u00d8\u085a\3\2\2\2\u00da\u0862\3\2\2\2\u00dc\u086d\3")
        buf.write("\2\2\2\u00de\u0874\3\2\2\2\u00e0\u0878\3\2\2\2\u00e2\u089a")
        buf.write("\3\2\2\2\u00e4\u089c\3\2\2\2\u00e6\u089f\3\2\2\2\u00e8")
        buf.write("\u08a4\3\2\2\2\u00ea\u08a9\3\2\2\2\u00ec\u08b1\3\2\2\2")
        buf.write("\u00ee\u08b9\3\2\2\2\u00f0\u08bc\3\2\2\2\u00f2\u08cc\3")
        buf.write("\2\2\2\u00f4\u08d1\3\2\2\2\u00f6\u08d5\3\2\2\2\u00f8\u08f9")
        buf.write("\3\2\2\2\u00fa\u08fb\3\2\2\2\u00fc\u0911\3\2\2\2\u00fe")
        buf.write("\u0913\3\2\2\2\u0100\u0918\3\2\2\2\u0102\u091a\3\2\2\2")
        buf.write("\u0104\u091c\3\2\2\2\u0106\u091e\3\2\2\2\u0108\u0922\3")
        buf.write("\2\2\2\u010a\u0927\3\2\2\2\u010c\u092d\3\2\2\2\u010e\u093b")
        buf.write("\3\2\2\2\u0110\u094f\3\2\2\2\u0112\u0954\3\2\2\2\u0114")
        buf.write("\u0961\3\2\2\2\u0116\u0963\3\2\2\2\u0118\u0971\3\2\2\2")
        buf.write("\u011a\u097b\3\2\2\2\u011c\u0981\3\2\2\2\u011e\u0983\3")
        buf.write("\2\2\2\u0120\u0986\3\2\2\2\u0122\u098b\3\2\2\2\u0124\u09a3")
        buf.write("\3\2\2\2\u0126\u09b2\3\2\2\2\u0128\u09b4\3\2\2\2\u012a")
        buf.write("\u09c9\3\2\2\2\u012c\u09d8\3\2\2\2\u012e\u09ee\3\2\2\2")
        buf.write("\u0130\u09f5\3\2\2\2\u0132\u0a02\3\2\2\2\u0134\u0a05\3")
        buf.write("\2\2\2\u0136\u0a1a\3\2\2\2\u0138\u0a1e\3\2\2\2\u013a\u0a27")
        buf.write("\3\2\2\2\u013c\u0a42\3\2\2\2\u013e\u0a6d\3\2\2\2\u0140")
        buf.write("\u0a83\3\2\2\2\u0142\u0a90\3\2\2\2\u0144\u0a94\3\2\2\2")
        buf.write("\u0146\u0ac6\3\2\2\2\u0148\u0ac8\3\2\2\2\u014a\u0ad1\3")
        buf.write("\2\2\2\u014c\u0ae8\3\2\2\2\u014e\u0afb\3\2\2\2\u0150\u0afe")
        buf.write("\3\2\2\2\u0152\u0b0c\3\2\2\2\u0154\u0b0f\3\2\2\2\u0156")
        buf.write("\u0b26\3\2\2\2\u0158\u0b28\3\2\2\2\u015a\u0b41\3\2\2\2")
        buf.write("\u015c\u0b43\3\2\2\2\u015e\u0b54\3\2\2\2\u0160\u0b5b\3")
        buf.write("\2\2\2\u0162\u0b6a\3\2\2\2\u0164\u0b81\3\2\2\2\u0166\u0b87")
        buf.write("\3\2\2\2\u0168\u0b89\3\2\2\2\u016a\u0ba1\3\2\2\2\u016c")
        buf.write("\u0bb9\3\2\2\2\u016e\u0bdd\3\2\2\2\u0170\u0bdf\3\2\2\2")
        buf.write("\u0172\u0be3\3\2\2\2\u0174\u0bf0\3\2\2\2\u0176\u0bf2\3")
        buf.write("\2\2\2\u0178\u0bfe\3\2\2\2\u017a\u0c0e\3\2\2\2\u017c\u0c10")
        buf.write("\3\2\2\2\u017e\u0c13\3\2\2\2\u0180\u0c2d\3\2\2\2\u0182")
        buf.write("\u0c2f\3\2\2\2\u0184\u0c33\3\2\2\2\u0186\u0c42\3\2\2\2")
        buf.write("\u0188\u0c4e\3\2\2\2\u018a\u0c56\3\2\2\2\u018c\u0c5a\3")
        buf.write("\2\2\2\u018e\u0c65\3\2\2\2\u0190\u0c6a\3\2\2\2\u0192\u0c77")
        buf.write("\3\2\2\2\u0194\u0c8b\3\2\2\2\u0196\u0c94\3\2\2\2\u0198")
        buf.write("\u0c96\3\2\2\2\u019a\u0c9d\3\2\2\2\u019c\u0ca2\3\2\2\2")
        buf.write("\u019e\u0caf\3\2\2\2\u01a0\u0cb7\3\2\2\2\u01a2\u0cbf\3")
        buf.write("\2\2\2\u01a4\u0ccd\3\2\2\2\u01a6\u0ccf\3\2\2\2\u01a8\u0cd2")
        buf.write("\3\2\2\2\u01aa\u0cde\3\2\2\2\u01ac\u0d01\3\2\2\2\u01ae")
        buf.write("\u0d03\3\2\2\2\u01b0\u0d11\3\2\2\2\u01b2\u0d16\3\2\2\2")
        buf.write("\u01b4\u0d28\3\2\2\2\u01b6\u0d2c\3\2\2\2\u01b8\u0d34\3")
        buf.write("\2\2\2\u01ba\u0d3e\3\2\2\2\u01bc\u0d46\3\2\2\2\u01be\u0d4c")
        buf.write("\3\2\2\2\u01c0\u0d5b\3\2\2\2\u01c2\u0d5e\3\2\2\2\u01c4")
        buf.write("\u0d77\3\2\2\2\u01c6\u0d8a\3\2\2\2\u01c8\u0d8e\3\2\2\2")
        buf.write("\u01ca\u0d91\3\2\2\2\u01cc\u0dad\3\2\2\2\u01ce\u0db2\3")
        buf.write("\2\2\2\u01d0\u0dc5\3\2\2\2\u01d2\u0dc7\3\2\2\2\u01d4\u0dd7")
        buf.write("\3\2\2\2\u01d6\u0ddf\3\2\2\2\u01d8\u0de4\3\2\2\2\u01da")
        buf.write("\u0def\3\2\2\2\u01dc\u0dfa\3\2\2\2\u01de\u0dfd\3\2\2\2")
        buf.write("\u01e0\u0e0f\3\2\2\2\u01e2\u0e11\3\2\2\2\u01e4\u0e20\3")
        buf.write("\2\2\2\u01e6\u0e2b\3\2\2\2\u01e8\u0e39\3\2\2\2\u01ea\u0e3e")
        buf.write("\3\2\2\2\u01ec\u0e43\3\2\2\2\u01ee\u0e50\3\2\2\2\u01f0")
        buf.write("\u0e5c\3\2\2\2\u01f2\u0e96\3\2\2\2\u01f4\u0eb3\3\2\2\2")
        buf.write("\u01f6\u0eb7\3\2\2\2\u01f8\u0ebf\3\2\2\2\u01fa\u0ec1\3")
        buf.write("\2\2\2\u01fc\u0ec3\3\2\2\2\u01fe\u0ec6\3\2\2\2\u0200\u0eca")
        buf.write("\3\2\2\2\u0202\u0ed2\3\2\2\2\u0204\u0f05\3\2\2\2\u0206")
        buf.write("\u0f07\3\2\2\2\u0208\u0f23\3\2\2\2\u020a\u0f25\3\2\2\2")
        buf.write("\u020c\u0f35\3\2\2\2\u020e\u0f38\3\2\2\2\u0210\u0f3a\3")
        buf.write("\2\2\2\u0212\u0f68\3\2\2\2\u0214\u0f76\3\2\2\2\u0216\u0f79")
        buf.write("\3\2\2\2\u0218\u0f8c\3\2\2\2\u021a\u0f94\3\2\2\2\u021c")
        buf.write("\u0fa6\3\2\2\2\u021e\u0fad\3\2\2\2\u0220\u0fc3\3\2\2\2")
        buf.write("\u0222\u0fc5\3\2\2\2\u0224\u0fc9\3\2\2\2\u0226\u0fd2\3")
        buf.write("\2\2\2\u0228\u1106\3\2\2\2\u022a\u111a\3\2\2\2\u022c\u111c")
        buf.write("\3\2\2\2\u022e\u111e\3\2\2\2\u0230\u1120\3\2\2\2\u0232")
        buf.write("\u1122\3\2\2\2\u0234\u112f\3\2\2\2\u0236\u1138\3\2\2\2")
        buf.write("\u0238\u1141\3\2\2\2\u023a\u1143\3\2\2\2\u023c\u1154\3")
        buf.write("\2\2\2\u023e\u115a\3\2\2\2\u0240\u1165\3\2\2\2\u0242\u1167")
        buf.write("\3\2\2\2\u0244\u117b\3\2\2\2\u0246\u1189\3\2\2\2\u0248")
        buf.write("\u119b\3\2\2\2\u024a\u11b0\3\2\2\2\u024c\u11bd\3\2\2\2")
        buf.write("\u024e\u11c0\3\2\2\2\u0250\u11c9\3\2\2\2\u0252\u11cf\3")
        buf.write("\2\2\2\u0254\u11d7\3\2\2\2\u0256\u11da\3\2\2\2\u0258\u11e5")
        buf.write("\3\2\2\2\u025a\u11ed\3\2\2\2\u025c\u11ef\3\2\2\2\u025e")
        buf.write("\u11f8\3\2\2\2\u0260\u1201\3\2\2\2\u0262\u1203\3\2\2\2")
        buf.write("\u0264\u1209\3\2\2\2\u0266\u120b\3\2\2\2\u0268\u1219\3")
        buf.write("\2\2\2\u026a\u121c\3\2\2\2\u026c\u1222\3\2\2\2\u026e\u1224")
        buf.write("\3\2\2\2\u0270\u1229\3\2\2\2\u0272\u1241\3\2\2\2\u0274")
        buf.write("\u1245\3\2\2\2\u0276\u1247\3\2\2\2\u0278\u1249\3\2\2\2")
        buf.write("\u027a\u124b\3\2\2\2\u027c\u124d\3\2\2\2\u027e\u124f\3")
        buf.write("\2\2\2\u0280\u1251\3\2\2\2\u0282\u1253\3\2\2\2\u0284\u125f")
        buf.write("\3\2\2\2\u0286\u1261\3\2\2\2\u0288\u1266\3\2\2\2\u028a")
        buf.write("\u1268\3\2\2\2\u028c\u126a\3\2\2\2\u028e\u126c\3\2\2\2")
        buf.write("\u0290\u1274\3\2\2\2\u0292\u1276\3\2\2\2\u0294\u1282\3")
        buf.write("\2\2\2\u0296\u1284\3\2\2\2\u0298\u128c\3\2\2\2\u029a\u1294")
        buf.write("\3\2\2\2\u029c\u129c\3\2\2\2\u029e\u12a1\3\2\2\2\u02a0")
        buf.write("\u12a6\3\2\2\2\u02a2\u12ad\3\2\2\2\u02a4\u12af\3\2\2\2")
        buf.write("\u02a6\u12b3\3\2\2\2\u02a8\u12b7\3\2\2\2\u02aa\u12b9\3")
        buf.write("\2\2\2\u02ac\u12be\3\2\2\2\u02ae\u12c0\3\2\2\2\u02b0\u12c8")
        buf.write("\3\2\2\2\u02b2\u12ce\3\2\2\2\u02b4\u12d6\3\2\2\2\u02b6")
        buf.write("\u12d8\3\2\2\2\u02b8\u12e1\3\2\2\2\u02ba\u12f0\3\2\2\2")
        buf.write("\u02bc\u1305\3\2\2\2\u02be\u132f\3\2\2\2\u02c0\u1336\3")
        buf.write("\2\2\2\u02c2\u1342\3\2\2\2\u02c4\u1360\3\2\2\2\u02c6\u1362")
        buf.write("\3\2\2\2\u02c8\u13a9\3\2\2\2\u02ca\u13ae\3\2\2\2\u02cc")
        buf.write("\u13c5\3\2\2\2\u02ce\u13c7\3\2\2\2\u02d0\u1407\3\2\2\2")
        buf.write("\u02d2\u1409\3\2\2\2\u02d4\u140b\3\2\2\2\u02d6\u140e\3")
        buf.write("\2\2\2\u02d8\u1410\3\2\2\2\u02da\u1414\3\2\2\2\u02dc\u141d")
        buf.write("\3\2\2\2\u02de\u1422\3\2\2\2\u02e0\u1427\3\2\2\2\u02e2")
        buf.write("\u142c\3\2\2\2\u02e4\u142e\3\2\2\2\u02e6\u1432\3\2\2\2")
        buf.write("\u02e8\u02ea\n\2\2\2\u02e9\u02e8\3\2\2\2\u02ea\u02eb\3")
        buf.write("\2\2\2\u02eb\u02e9\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\3")
        buf.write("\3\2\2\2\u02ed\u02f0\5\6\4\2\u02ee\u02f0\5\u025a\u012e")
        buf.write("\2\u02ef\u02ed\3\2\2\2\u02ef\u02ee\3\2\2\2\u02f0\u02f1")
        buf.write("\3\2\2\2\u02f1\u02f2\7\2\2\3\u02f2\u0300\3\2\2\2\u02f3")
        buf.write("\u02f4\5\6\4\2\u02f4\u02f5\7\u01fa\2\2\u02f5\u02fa\3\2")
        buf.write("\2\2\u02f6\u02f7\5\u025a\u012e\2\u02f7\u02f8\7\u01fa\2")
        buf.write("\2\u02f8\u02fa\3\2\2\2\u02f9\u02f3\3\2\2\2\u02f9\u02f6")
        buf.write("\3\2\2\2\u02fa\u02fd\3\2\2\2\u02fb\u02f9\3\2\2\2\u02fb")
        buf.write("\u02fc\3\2\2\2\u02fc\u02fe\3\2\2\2\u02fd\u02fb\3\2\2\2")
        buf.write("\u02fe\u0300\7\2\2\3\u02ff\u02ef\3\2\2\2\u02ff\u02fb\3")
        buf.write("\2\2\2\u0300\5\3\2\2\2\u0301\u0315\5\n\6\2\u0302\u0315")
        buf.write("\5\32\16\2\u0303\u0315\5,\27\2\u0304\u0315\5\u00a4S\2")
        buf.write("\u0305\u0315\5\62\32\2\u0306\u0315\5X-\2\u0307\u0315\5")
        buf.write("\f\7\2\u0308\u0315\5.\30\2\u0309\u0315\5\34\17\2\u030a")
        buf.write("\u0315\5\u00a6T\2\u030b\u0315\5\64\33\2\u030c\u0315\5")
        buf.write("l\67\2\u030d\u0315\5\b\5\2\u030e\u0315\5\30\r\2\u030f")
        buf.write("\u0315\5*\26\2\u0310\u0315\5\u00a2R\2\u0311\u0315\5\60")
        buf.write("\31\2\u0312\u0315\5V,\2\u0313\u0315\5\u011a\u008e\2\u0314")
        buf.write("\u0301\3\2\2\2\u0314\u0302\3\2\2\2\u0314\u0303\3\2\2\2")
        buf.write("\u0314\u0304\3\2\2\2\u0314\u0305\3\2\2\2\u0314\u0306\3")
        buf.write("\2\2\2\u0314\u0307\3\2\2\2\u0314\u0308\3\2\2\2\u0314\u0309")
        buf.write("\3\2\2\2\u0314\u030a\3\2\2\2\u0314\u030b\3\2\2\2\u0314")
        buf.write("\u030c\3\2\2\2\u0314\u030d\3\2\2\2\u0314\u030e\3\2\2\2")
        buf.write("\u0314\u030f\3\2\2\2\u0314\u0310\3\2\2\2\u0314\u0311\3")
        buf.write("\2\2\2\u0314\u0312\3\2\2\2\u0314\u0313\3\2\2\2\u0315\7")
        buf.write("\3\2\2\2\u0316\u0317\7t\2\2\u0317\u0318\7\u009d\2\2\u0318")
        buf.write("\u0319\5\u029c\u014f\2\u0319\t\3\2\2\2\u031a\u031b\7\n")
        buf.write("\2\2\u031b\u031c\7\u009d\2\2\u031c\u031d\5\u029c\u014f")
        buf.write("\2\u031d\u031f\7A\2\2\u031e\u0320\7`\2\2\u031f\u031e\3")
        buf.write("\2\2\2\u031f\u0320\3\2\2\2\u0320\u0324\3\2\2\2\u0321\u0323")
        buf.write("\5\u00aeX\2\u0322\u0321\3\2\2\2\u0323\u0326\3\2\2\2\u0324")
        buf.write("\u0322\3\2\2\2\u0324\u0325\3\2\2\2\u0325\u0329\3\2\2\2")
        buf.write("\u0326\u0324\3\2\2\2\u0327\u0328\7\u013f\2\2\u0328\u032a")
        buf.write("\7\u015d\2\2\u0329\u0327\3\2\2\2\u0329\u032a\3\2\2\2\u032a")
        buf.write("\13\3\2\2\2\u032b\u032e\7Q\2\2\u032c\u032d\7\u010e\2\2")
        buf.write("\u032d\u032f\7\u0138\2\2\u032e\u032c\3\2\2\2\u032e\u032f")
        buf.write("\3\2\2\2\u032f\u0331\3\2\2\2\u0330\u032b\3\2\2\2\u0330")
        buf.write("\u0331\3\2\2\2\u0331\u0332\3\2\2\2\u0332\u0333\7\u009d")
        buf.write("\2\2\u0333\u033f\5\u029c\u014f\2\u0334\u0335\7\u01ee\2")
        buf.write("\2\u0335\u033a\5\u00ba^\2\u0336\u0337\7\u01f4\2\2\u0337")
        buf.write("\u0339\5\u00ba^\2\u0338\u0336\3\2\2\2\u0339\u033c\3\2")
        buf.write("\2\2\u033a\u0338\3\2\2\2\u033a\u033b\3\2\2\2\u033b\u033d")
        buf.write("\3\2\2\2\u033c\u033a\3\2\2\2\u033d\u033e\7\u01ef\2\2\u033e")
        buf.write("\u0340\3\2\2\2\u033f\u0334\3\2\2\2\u033f\u0340\3\2\2\2")
        buf.write("\u0340\u0341\3\2\2\2\u0341\u0342\7\u013d\2\2\u0342\u0349")
        buf.write("\5\u02c2\u0162\2\u0343\u0348\5\u00acW\2\u0344\u0348\5")
        buf.write("\16\b\2\u0345\u0348\5\22\n\2\u0346\u0348\7m\2\2\u0347")
        buf.write("\u0343\3\2\2\2\u0347\u0344\3\2\2\2\u0347\u0345\3\2\2\2")
        buf.write("\u0347\u0346\3\2\2\2\u0348\u034b\3\2\2\2\u0349\u0347\3")
        buf.write("\2\2\2\u0349\u034a\3\2\2\2\u034a\u0360\3\2\2\2\u034b\u0349")
        buf.write("\3\2\2\2\u034c\u034e\7\u0120\2\2\u034d\u034c\3\2\2\2\u034d")
        buf.write("\u034e\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u035b\t\3\2\2")
        buf.write("\u0350\u0352\7c\2\2\u0351\u0350\3\2\2\2\u0351\u0352\3")
        buf.write("\2\2\2\u0352\u0356\3\2\2\2\u0353\u0355\5\u00be`\2\u0354")
        buf.write("\u0353\3\2\2\2\u0355\u0358\3\2\2\2\u0356\u0354\3\2\2\2")
        buf.write("\u0356\u0357\3\2\2\2\u0357\u0359\3\2\2\2\u0358\u0356\3")
        buf.write("\2\2\2\u0359\u035c\5\u010c\u0087\2\u035a\u035c\5\u00b0")
        buf.write("Y\2\u035b\u0351\3\2\2\2\u035b\u035a\3\2\2\2\u035c\u0361")
        buf.write("\3\2\2\2\u035d\u035e\t\4\2\2\u035e\u035f\7\u019d\2\2\u035f")
        buf.write("\u0361\5\u0286\u0144\2\u0360\u034d\3\2\2\2\u0360\u035d")
        buf.write("\3\2\2\2\u0361\r\3\2\2\2\u0362\u0364\7\u0118\2\2\u0363")
        buf.write("\u0365\5\20\t\2\u0364\u0363\3\2\2\2\u0364\u0365\3\2\2")
        buf.write("\2\u0365\17\3\2\2\2\u0366\u0367\7\u01ee\2\2\u0367\u0368")
        buf.write("\7\u011b\2\2\u0368\u0369\5\u01f0\u00f9\2\u0369\u0377\7")
        buf.write("*\2\2\u036a\u0378\7\r\2\2\u036b\u036c\t\5\2\2\u036c\u036d")
        buf.write("\7\u01ee\2\2\u036d\u0372\5\u02ae\u0158\2\u036e\u036f\7")
        buf.write("\u01f4\2\2\u036f\u0371\5\u02ae\u0158\2\u0370\u036e\3\2")
        buf.write("\2\2\u0371\u0374\3\2\2\2\u0372\u0370\3\2\2\2\u0372\u0373")
        buf.write("\3\2\2\2\u0373\u0375\3\2\2\2\u0374\u0372\3\2\2\2\u0375")
        buf.write("\u0376\7\u01ef\2\2\u0376\u0378\3\2\2\2\u0377\u036a\3\2")
        buf.write("\2\2\u0377\u036b\3\2\2\2\u0378\u037a\3\2\2\2\u0379\u037b")
        buf.write("\5\26\f\2\u037a\u0379\3\2\2\2\u037a\u037b\3\2\2\2\u037b")
        buf.write("\u037c\3\2\2\2\u037c\u037d\7\u01ef\2\2\u037d\21\3\2\2")
        buf.write("\2\u037e\u0380\7\u013c\2\2\u037f\u0381\5\24\13\2\u0380")
        buf.write("\u037f\3\2\2\2\u0380\u0381\3\2\2\2\u0381\23\3\2\2\2\u0382")
        buf.write("\u0383\7\u0136\2\2\u0383\u0384\7\u01ee\2\2\u0384\u0389")
        buf.write("\5\u02b0\u0159\2\u0385\u0386\7\u01f4\2\2\u0386\u0388\5")
        buf.write("\u02b0\u0159\2\u0387\u0385\3\2\2\2\u0388\u038b\3\2\2\2")
        buf.write("\u0389\u0387\3\2\2\2\u0389\u038a\3\2\2\2\u038a\u038c\3")
        buf.write("\2\2\2\u038b\u0389\3\2\2\2\u038c\u038d\7\u01ef\2\2\u038d")
        buf.write("\25\3\2\2\2\u038e\u038f\t\6\2\2\u038f\u0390\5\u01f0\u00f9")
        buf.write("\2\u0390\u0391\7*\2\2\u0391\u0392\7\u01ee\2\2\u0392\u0397")
        buf.write("\5\u02ae\u0158\2\u0393\u0394\7\u01f4\2\2\u0394\u0396\5")
        buf.write("\u02ae\u0158\2\u0395\u0393\3\2\2\2\u0396\u0399\3\2\2\2")
        buf.write("\u0397\u0395\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u039a\3")
        buf.write("\2\2\2\u0399\u0397\3\2\2\2\u039a\u039b\7\u01ef\2\2\u039b")
        buf.write("\27\3\2\2\2\u039c\u039d\7t\2\2\u039d\u039f\7\u0117\2\2")
        buf.write("\u039e\u03a0\7%\2\2\u039f\u039e\3\2\2\2\u039f\u03a0\3")
        buf.write("\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a2\5\u0284\u0143\2")
        buf.write("\u03a2\31\3\2\2\2\u03a3\u03a4\7\n\2\2\u03a4\u03a5\7\u0117")
        buf.write("\2\2\u03a5\u03a6\5\u0284\u0143\2\u03a6\u03a8\7A\2\2\u03a7")
        buf.write("\u03a9\7`\2\2\u03a8\u03a7\3\2\2\2\u03a8\u03a9\3\2\2\2")
        buf.write("\u03a9\u03ab\3\2\2\2\u03aa\u03ac\t\7\2\2\u03ab\u03aa\3")
        buf.write("\2\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03b0\3\2\2\2\u03ad\u03af")
        buf.write("\5\u00aeX\2\u03ae\u03ad\3\2\2\2\u03af\u03b2\3\2\2\2\u03b0")
        buf.write("\u03ae\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03b5\3\2\2\2")
        buf.write("\u03b2\u03b0\3\2\2\2\u03b3\u03b4\7\u013f\2\2\u03b4\u03b6")
        buf.write("\7\u015d\2\2\u03b5\u03b3\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6")
        buf.write("\33\3\2\2\2\u03b7\u03ba\7Q\2\2\u03b8\u03b9\7\u010e\2\2")
        buf.write("\u03b9\u03bb\7\u0138\2\2\u03ba\u03b8\3\2\2\2\u03ba\u03bb")
        buf.write("\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03bf\7\u0117\2\2\u03bd")
        buf.write("\u03c0\5 \21\2\u03be\u03c0\5\36\20\2\u03bf\u03bd\3\2\2")
        buf.write("\2\u03bf\u03be\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0\35\3")
        buf.write("\2\2\2\u03c1\u03c2\7%\2\2\u03c2\u03c3\5\u0284\u0143\2")
        buf.write("\u03c3\u03c7\t\3\2\2\u03c4\u03c6\5(\25\2\u03c5\u03c4\3")
        buf.write("\2\2\2\u03c6\u03c9\3\2\2\2\u03c7\u03c5\3\2\2\2\u03c7\u03c8")
        buf.write("\3\2\2\2\u03c8\u03d0\3\2\2\2\u03c9\u03c7\3\2\2\2\u03ca")
        buf.write("\u03cb\7\35\2\2\u03cb\u03d1\5\u00dep\2\u03cc\u03ce\7}")
        buf.write("\2\2\u03cd\u03cf\5\u0284\u0143\2\u03ce\u03cd\3\2\2\2\u03ce")
        buf.write("\u03cf\3\2\2\2\u03cf\u03d1\3\2\2\2\u03d0\u03ca\3\2\2\2")
        buf.write("\u03d0\u03cc\3\2\2\2\u03d1\37\3\2\2\2\u03d2\u03d4\5\u0284")
        buf.write("\u0143\2\u03d3\u03d5\5\u00acW\2\u03d4\u03d3\3\2\2\2\u03d4")
        buf.write("\u03d5\3\2\2\2\u03d5\u03d6\3\2\2\2\u03d6\u03da\t\3\2\2")
        buf.write("\u03d7\u03d9\5\"\22\2\u03d8\u03d7\3\2\2\2\u03d9\u03dc")
        buf.write("\3\2\2\2\u03da\u03d8\3\2\2\2\u03da\u03db\3\2\2\2\u03db")
        buf.write("\u03dd\3\2\2\2\u03dc\u03da\3\2\2\2\u03dd\u03df\7}\2\2")
        buf.write("\u03de\u03e0\5\u0284\u0143\2\u03df\u03de\3\2\2\2\u03df")
        buf.write("\u03e0\3\2\2\2\u03e0!\3\2\2\2\u03e1\u03eb\5\u00c0a\2\u03e2")
        buf.write("\u03eb\5\u00c2b\2\u03e3\u03eb\5\u00c4c\2\u03e4\u03eb\5")
        buf.write("\u00c8e\2\u03e5\u03eb\5\u00caf\2\u03e6\u03eb\5\u00ccg")
        buf.write("\2\u03e7\u03eb\5\u00d4k\2\u03e8\u03eb\5$\23\2\u03e9\u03eb")
        buf.write("\5&\24\2\u03ea\u03e1\3\2\2\2\u03ea\u03e2\3\2\2\2\u03ea")
        buf.write("\u03e3\3\2\2\2\u03ea\u03e4\3\2\2\2\u03ea\u03e5\3\2\2\2")
        buf.write("\u03ea\u03e6\3\2\2\2\u03ea\u03e7\3\2\2\2\u03ea\u03e8\3")
        buf.write("\2\2\2\u03ea\u03e9\3\2\2\2\u03eb#\3\2\2\2\u03ec\u03ed")
        buf.write("\7\u012b\2\2\u03ed\u03f9\5\u029e\u0150\2\u03ee\u03ef\7")
        buf.write("\u01ee\2\2\u03ef\u03f4\5\u00ba^\2\u03f0\u03f1\7\u01f4")
        buf.write("\2\2\u03f1\u03f3\5\u00ba^\2\u03f2\u03f0\3\2\2\2\u03f3")
        buf.write("\u03f6\3\2\2\2\u03f4\u03f2\3\2\2\2\u03f4\u03f5\3\2\2\2")
        buf.write("\u03f5\u03f7\3\2\2\2\u03f6\u03f4\3\2\2\2\u03f7\u03f8\7")
        buf.write("\u01ef\2\2\u03f8\u03fa\3\2\2\2\u03f9\u03ee\3\2\2\2\u03f9")
        buf.write("\u03fa\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u03fc\7\u01fa")
        buf.write("\2\2\u03fc%\3\2\2\2\u03fd\u03fe\7\u009d\2\2\u03fe\u040a")
        buf.write("\5\u029c\u014f\2\u03ff\u0400\7\u01ee\2\2\u0400\u0405\5")
        buf.write("\u00ba^\2\u0401\u0402\7\u01f4\2\2\u0402\u0404\5\u00ba")
        buf.write("^\2\u0403\u0401\3\2\2\2\u0404\u0407\3\2\2\2\u0405\u0403")
        buf.write("\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0408\3\2\2\2\u0407")
        buf.write("\u0405\3\2\2\2\u0408\u0409\7\u01ef\2\2\u0409\u040b\3\2")
        buf.write("\2\2\u040a\u03ff\3\2\2\2\u040a\u040b\3\2\2\2\u040b\u040c")
        buf.write("\3\2\2\2\u040c\u040d\7\u013d\2\2\u040d\u040f\5\u02c2\u0162")
        buf.write("\2\u040e\u0410\7m\2\2\u040f\u040e\3\2\2\2\u040f\u0410")
        buf.write("\3\2\2\2\u0410\u0412\3\2\2\2\u0411\u0413\7\u013c\2\2\u0412")
        buf.write("\u0411\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u0414\3\2\2\2")
        buf.write("\u0414\u0415\7\u01fa\2\2\u0415\'\3\2\2\2\u0416\u0421\5")
        buf.write("\u00c0a\2\u0417\u0421\5\u00c2b\2\u0418\u0421\5\u00c4c")
        buf.write("\2\u0419\u0421\5\u00c8e\2\u041a\u0421\5\u00ccg\2\u041b")
        buf.write("\u0421\5\u00d4k\2\u041c\u0421\5.\30\2\u041d\u0421\5\f")
        buf.write("\7\2\u041e\u0421\5$\23\2\u041f\u0421\5&\24\2\u0420\u0416")
        buf.write("\3\2\2\2\u0420\u0417\3\2\2\2\u0420\u0418\3\2\2\2\u0420")
        buf.write("\u0419\3\2\2\2\u0420\u041a\3\2\2\2\u0420\u041b\3\2\2\2")
        buf.write("\u0420\u041c\3\2\2\2\u0420\u041d\3\2\2\2\u0420\u041e\3")
        buf.write("\2\2\2\u0420\u041f\3\2\2\2\u0421)\3\2\2\2\u0422\u0423")
        buf.write("\7t\2\2\u0423\u0424\7\u012b\2\2\u0424\u0425\5\u029e\u0150")
        buf.write("\2\u0425+\3\2\2\2\u0426\u0427\7\n\2\2\u0427\u0428\7\u012b")
        buf.write("\2\2\u0428\u0429\5\u029e\u0150\2\u0429\u042b\7A\2\2\u042a")
        buf.write("\u042c\7`\2\2\u042b\u042a\3\2\2\2\u042b\u042c\3\2\2\2")
        buf.write("\u042c\u0430\3\2\2\2\u042d\u042f\5\u00aeX\2\u042e\u042d")
        buf.write("\3\2\2\2\u042f\u0432\3\2\2\2\u0430\u042e\3\2\2\2\u0430")
        buf.write("\u0431\3\2\2\2\u0431\u0435\3\2\2\2\u0432\u0430\3\2\2\2")
        buf.write("\u0433\u0434\7\u013f\2\2\u0434\u0436\7\u015d\2\2\u0435")
        buf.write("\u0433\3\2\2\2\u0435\u0436\3\2\2\2\u0436-\3\2\2\2\u0437")
        buf.write("\u043a\7Q\2\2\u0438\u0439\7\u010e\2\2\u0439\u043b\7\u0138")
        buf.write("\2\2\u043a\u0438\3\2\2\2\u043a\u043b\3\2\2\2\u043b\u043d")
        buf.write("\3\2\2\2\u043c\u0437\3\2\2\2\u043c\u043d\3\2\2\2\u043d")
        buf.write("\u043e\3\2\2\2\u043e\u043f\7\u012b\2\2\u043f\u044b\5\u029e")
        buf.write("\u0150\2\u0440\u0441\7\u01ee\2\2\u0441\u0446\5\u00ba^")
        buf.write("\2\u0442\u0443\7\u01f4\2\2\u0443\u0445\5\u00ba^\2\u0444")
        buf.write("\u0442\3\2\2\2\u0445\u0448\3\2\2\2\u0446\u0444\3\2\2\2")
        buf.write("\u0446\u0447\3\2\2\2\u0447\u0449\3\2\2\2\u0448\u0446\3")
        buf.write("\2\2\2\u0449\u044a\7\u01ef\2\2\u044a\u044c\3\2\2\2\u044b")
        buf.write("\u0440\3\2\2\2\u044b\u044c\3\2\2\2\u044c\u044e\3\2\2\2")
        buf.write("\u044d\u044f\5\u00acW\2\u044e\u044d\3\2\2\2\u044e\u044f")
        buf.write("\3\2\2\2\u044f\u0450\3\2\2\2\u0450\u045d\t\3\2\2\u0451")
        buf.write("\u0453\7c\2\2\u0452\u0451\3\2\2\2\u0452\u0453\3\2\2\2")
        buf.write("\u0453\u0457\3\2\2\2\u0454\u0456\5\u00be`\2\u0455\u0454")
        buf.write("\3\2\2\2\u0456\u0459\3\2\2\2\u0457\u0455\3\2\2\2\u0457")
        buf.write("\u0458\3\2\2\2\u0458\u045a\3\2\2\2\u0459\u0457\3\2\2\2")
        buf.write("\u045a\u045e\5\u010c\u0087\2\u045b\u045e\5\u00b0Y\2\u045c")
        buf.write("\u045e\7\u008d\2\2\u045d\u0452\3\2\2\2\u045d\u045b\3\2")
        buf.write("\2\2\u045d\u045c\3\2\2\2\u045e/\3\2\2\2\u045f\u0460\7")
        buf.write("t\2\2\u0460\u0461\7\u018c\2\2\u0461\u0462\5\u02a0\u0151")
        buf.write("\2\u0462\61\3\2\2\2\u0463\u0464\7\n\2\2\u0464\u0465\7")
        buf.write("\u018c\2\2\u0465\u0478\5\u02a0\u0151\2\u0466\u0479\t\b")
        buf.write("\2\2\u0467\u0468\7\u0137\2\2\u0468\u0469\7\u0187\2\2\u0469")
        buf.write("\u0479\5\u02a0\u0151\2\u046a\u046c\7A\2\2\u046b\u046d")
        buf.write("\7`\2\2\u046c\u046b\3\2\2\2\u046c\u046d\3\2\2\2\u046d")
        buf.write("\u0471\3\2\2\2\u046e\u0470\5\u00aeX\2\u046f\u046e\3\2")
        buf.write("\2\2\u0470\u0473\3\2\2\2\u0471\u046f\3\2\2\2\u0471\u0472")
        buf.write("\3\2\2\2\u0472\u0476\3\2\2\2\u0473\u0471\3\2\2\2\u0474")
        buf.write("\u0475\7\u013f\2\2\u0475\u0477\7\u015d\2\2\u0476\u0474")
        buf.write("\3\2\2\2\u0476\u0477\3\2\2\2\u0477\u0479\3\2\2\2\u0478")
        buf.write("\u0466\3\2\2\2\u0478\u0467\3\2\2\2\u0478\u046a\3\2\2\2")
        buf.write("\u0479\63\3\2\2\2\u047a\u047d\7Q\2\2\u047b\u047c\7\u010e")
        buf.write("\2\2\u047c\u047e\7\u0138\2\2\u047d\u047b\3\2\2\2\u047d")
        buf.write("\u047e\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u0480\7\u018c")
        buf.write("\2\2\u0480\u0484\5\u02a0\u0151\2\u0481\u0485\5:\36\2\u0482")
        buf.write("\u0485\5> \2\u0483\u0485\5@!\2\u0484\u0481\3\2\2\2\u0484")
        buf.write("\u0482\3\2\2\2\u0484\u0483\3\2\2\2\u0485\u0487\3\2\2\2")
        buf.write("\u0486\u0488\5\66\34\2\u0487\u0486\3\2\2\2\u0487\u0488")
        buf.write("\3\2\2\2\u0488\u048a\3\2\2\2\u0489\u048b\t\b\2\2\u048a")
        buf.write("\u0489\3\2\2\2\u048a\u048b\3\2\2\2\u048b\u048d\3\2\2\2")
        buf.write("\u048c\u048e\58\35\2\u048d\u048c\3\2\2\2\u048d\u048e\3")
        buf.write("\2\2\2\u048e\u048f\3\2\2\2\u048f\u0490\5B\"\2\u0490\65")
        buf.write("\3\2\2\2\u0491\u0492\7\u0097\2\2\u0492\u0497\5\u02a0\u0151")
        buf.write("\2\u0493\u0494\7\u01f4\2\2\u0494\u0496\5\u02a0\u0151\2")
        buf.write("\u0495\u0493\3\2\2\2\u0496\u0499\3\2\2\2\u0497\u0495\3")
        buf.write("\2\2\2\u0497\u0498\3\2\2\2\u0498\67\3\2\2\2\u0499\u0497")
        buf.write("\3\2\2\2\u049a\u049b\7\u01ab\2\2\u049b\u049c\7\u01ee\2")
        buf.write("\2\u049c\u049d\5\u01ee\u00f8\2\u049d\u049e\7\u01ef\2\2")
        buf.write("\u049e9\3\2\2\2\u049f\u04a4\7\34\2\2\u04a0\u04a4\7\6\2")
        buf.write("\2\u04a1\u04a2\7\u00b8\2\2\u04a2\u04a4\7\u0106\2\2\u04a3")
        buf.write("\u049f\3\2\2\2\u04a3\u04a0\3\2\2\2\u04a3\u04a1\3\2\2\2")
        buf.write("\u04a4\u04a5\3\2\2\2\u04a5\u04a7\5L\'\2\u04a6\u04a8\5")
        buf.write("R*\2\u04a7\u04a6\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04aa")
        buf.write("\3\2\2\2\u04a9\u04ab\5<\37\2\u04aa\u04a9\3\2\2\2\u04aa")
        buf.write("\u04ab\3\2\2\2\u04ab;\3\2\2\2\u04ac\u04ad\7\u0098\2\2")
        buf.write("\u04ad\u04ae\7v\2\2\u04ae\u04af\7\u0145\2\2\u04af=\3\2")
        buf.write("\2\2\u04b0\u04b1\7\u0098\2\2\u04b1\u04b3\5L\'\2\u04b2")
        buf.write("\u04b4\5R*\2\u04b3\u04b2\3\2\2\2\u04b3\u04b4\3\2\2\2\u04b4")
        buf.write("?\3\2\2\2\u04b5\u04b6\t\t\2\2\u04b6\u04bb\5J&\2\u04b7")
        buf.write("\u04b8\7\u010e\2\2\u04b8\u04ba\5J&\2\u04b9\u04b7\3\2\2")
        buf.write("\2\u04ba\u04bd\3\2\2\2\u04bb\u04b9\3\2\2\2\u04bb\u04bc")
        buf.write("\3\2\2\2\u04bc\u04be\3\2\2\2\u04bd\u04bb\3\2\2\2\u04be")
        buf.write("\u04c6\7\u010a\2\2\u04bf\u04c7\7Z\2\2\u04c0\u04c1\5\u0280")
        buf.write("\u0141\2\u04c1\u04c2\7\u01e7\2\2\u04c2\u04c4\3\2\2\2\u04c3")
        buf.write("\u04c0\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4\u04c5\3\2\2\2")
        buf.write("\u04c5\u04c7\7\u014c\2\2\u04c6\u04bf\3\2\2\2\u04c6\u04c3")
        buf.write("\3\2\2\2\u04c7A\3\2\2\2\u04c8\u04c9\7B\2\2\u04c9\u04ce")
        buf.write("\7\u018c\2\2\u04ca\u04cb\7.\2\2\u04cb\u04ce\5\u02d8\u016d")
        buf.write("\2\u04cc\u04ce\5\u0110\u0089\2\u04cd\u04c8\3\2\2\2\u04cd")
        buf.write("\u04ca\3\2\2\2\u04cd\u04cc\3\2\2\2\u04ceC\3\2\2\2\u04cf")
        buf.write("\u04d1\5\u0282\u0142\2\u04d0\u04d2\5\u02b8\u015d\2\u04d1")
        buf.write("\u04d0\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2E\3\2\2\2\u04d3")
        buf.write("\u04d4\7B\2\2\u04d4\u04d8\7\u018c\2\2\u04d5\u04d7\5\u00be")
        buf.write("`\2\u04d6\u04d5\3\2\2\2\u04d7\u04da\3\2\2\2\u04d8\u04d6")
        buf.write("\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9\u04dc\3\2\2\2\u04da")
        buf.write("\u04d8\3\2\2\2\u04db\u04dd\5H%\2\u04dc\u04db\3\2\2\2\u04dd")
        buf.write("\u04de\3\2\2\2\u04de\u04dc\3\2\2\2\u04de\u04df\3\2\2\2")
        buf.write("\u04df\u04e0\3\2\2\2\u04e0\u04e1\7}\2\2\u04e1\u04e2\5")
        buf.write("\u02a0\u0151\2\u04e2G\3\2\2\2\u04e3\u04e4\7\34\2\2\u04e4")
        buf.write("\u04e5\7\u0170\2\2\u04e5\u04e6\7\u00bf\2\2\u04e6\u04e7")
        buf.write("\5\u0110\u0089\2\u04e7\u04e8\7\34\2\2\u04e8\u04e9\7\u0170")
        buf.write("\2\2\u04e9\u04ea\7\u01fa\2\2\u04ea\u0508\3\2\2\2\u04eb")
        buf.write("\u04ec\7\34\2\2\u04ec\u04ed\7v\2\2\u04ed\u04ee\7\u0145")
        buf.write("\2\2\u04ee\u04ef\7\u00bf\2\2\u04ef\u04f0\5\u0110\u0089")
        buf.write("\2\u04f0\u04f1\7\34\2\2\u04f1\u04f2\7v\2\2\u04f2\u04f3")
        buf.write("\7\u0145\2\2\u04f3\u04f4\7\u01fa\2\2\u04f4\u0508\3\2\2")
        buf.write("\2\u04f5\u04f6\7\6\2\2\u04f6\u04f7\7\u0170\2\2\u04f7\u04f8")
        buf.write("\7\u00bf\2\2\u04f8\u04f9\5\u0110\u0089\2\u04f9\u04fa\7")
        buf.write("\6\2\2\u04fa\u04fb\7\u0170\2\2\u04fb\u04fc\7\u01fa\2\2")
        buf.write("\u04fc\u0508\3\2\2\2\u04fd\u04fe\7\6\2\2\u04fe\u04ff\7")
        buf.write("v\2\2\u04ff\u0500\7\u0145\2\2\u0500\u0501\7\u00bf\2\2")
        buf.write("\u0501\u0502\5\u0110\u0089\2\u0502\u0503\7\6\2\2\u0503")
        buf.write("\u0504\7v\2\2\u0504\u0505\7\u0145\2\2\u0505\u0506\7\u01fa")
        buf.write("\2\2\u0506\u0508\3\2\2\2\u0507\u04e3\3\2\2\2\u0507\u04eb")
        buf.write("\3\2\2\2\u0507\u04f5\3\2\2\2\u0507\u04fd\3\2\2\2\u0508")
        buf.write("I\3\2\2\2\u0509\u0524\7\n\2\2\u050a\u0524\7\13\2\2\u050b")
        buf.write("\u050c\7\23\2\2\u050c\u0524\7\u0173\2\2\u050d\u0524\7")
        buf.write("\26\2\2\u050e\u0524\7=\2\2\u050f\u0524\7Q\2\2\u0510\u0511")
        buf.write("\7p\2\2\u0511\u0524\7\u0173\2\2\u0512\u0524\7t\2\2\u0513")
        buf.write("\u0524\7\u009f\2\2\u0514\u0524\7\u00f4\2\2\u0515\u0524")
        buf.write("\7\u0137\2\2\u0516\u0524\7\u0141\2\2\u0517\u0524\7\u018f")
        buf.write("\2\2\u0518\u0524\7_\2\2\u0519\u0524\7\u016f\2\2\u051a")
        buf.write("\u0524\7\u0160\2\2\u051b\u0524\7]\2\2\u051c\u0524\7\u00d6")
        buf.write("\2\2\u051d\u0524\7\u00d5\2\2\u051e\u0524\7\u0159\2\2\u051f")
        buf.write("\u0524\7\u017a\2\2\u0520\u0524\7Z\2\2\u0521\u0524\7\u014c")
        buf.write("\2\2\u0522\u0524\7\u0097\2\2\u0523\u0509\3\2\2\2\u0523")
        buf.write("\u050a\3\2\2\2\u0523\u050b\3\2\2\2\u0523\u050d\3\2\2\2")
        buf.write("\u0523\u050e\3\2\2\2\u0523\u050f\3\2\2\2\u0523\u0510\3")
        buf.write("\2\2\2\u0523\u0512\3\2\2\2\u0523\u0513\3\2\2\2\u0523\u0514")
        buf.write("\3\2\2\2\u0523\u0515\3\2\2\2\u0523\u0516\3\2\2\2\u0523")
        buf.write("\u0517\3\2\2\2\u0523\u0518\3\2\2\2\u0523\u0519\3\2\2\2")
        buf.write("\u0523\u051a\3\2\2\2\u0523\u051b\3\2\2\2\u0523\u051c\3")
        buf.write("\2\2\2\u0523\u051d\3\2\2\2\u0523\u051e\3\2\2\2\u0523\u051f")
        buf.write("\3\2\2\2\u0523\u0520\3\2\2\2\u0523\u0521\3\2\2\2\u0523")
        buf.write("\u0522\3\2\2\2\u0524K\3\2\2\2\u0525\u052a\5N(\2\u0526")
        buf.write("\u0527\7\u010e\2\2\u0527\u0529\5N(\2\u0528\u0526\3\2\2")
        buf.write("\2\u0529\u052c\3\2\2\2\u052a\u0528\3\2\2\2\u052a\u052b")
        buf.write("\3\2\2\2\u052b\u052d\3\2\2\2\u052c\u052a\3\2\2\2\u052d")
        buf.write("\u052f\7\u010a\2\2\u052e\u0530\5P)\2\u052f\u052e\3\2\2")
        buf.write("\2\u052f\u0530\3\2\2\2\u0530\u0531\3\2\2\2\u0531\u0532")
        buf.write("\5\u02b0\u0159\2\u0532M\3\2\2\2\u0533\u053d\t\n\2\2\u0534")
        buf.write("\u0535\7\u0106\2\2\u0535\u053a\5\u02ae\u0158\2\u0536\u0537")
        buf.write("\7\u01f4\2\2\u0537\u0539\5\u02ae\u0158\2\u0538\u0536\3")
        buf.write("\2\2\2\u0539\u053c\3\2\2\2\u053a\u0538\3\2\2\2\u053a\u053b")
        buf.write("\3\2\2\2\u053b\u053e\3\2\2\2\u053c\u053a\3\2\2\2\u053d")
        buf.write("\u0534\3\2\2\2\u053d\u053e\3\2\2\2\u053eO\3\2\2\2\u053f")
        buf.write("\u0540\7\u00f1\2\2\u0540\u0541\7\u017b\2\2\u0541\u0542")
        buf.write("\5\u02b0\u0159\2\u0542\u0543\7\u0106\2\2\u0543Q\3\2\2")
        buf.write("\2\u0544\u0546\7\u0134\2\2\u0545\u0547\5T+\2\u0546\u0545")
        buf.write("\3\2\2\2\u0547\u0548\3\2\2\2\u0548\u0546\3\2\2\2\u0548")
        buf.write("\u0549\3\2\2\2\u0549S\3\2\2\2\u054a\u054b\t\13\2\2\u054b")
        buf.write("\u054c\5\u0268\u0135\2\u054cU\3\2\2\2\u054d\u054e\7t\2")
        buf.write("\2\u054e\u0550\7\u0190\2\2\u054f\u0551\7%\2\2\u0550\u054f")
        buf.write("\3\2\2\2\u0550\u0551\3\2\2\2\u0551\u0552\3\2\2\2\u0552")
        buf.write("\u0554\5\u0296\u014c\2\u0553\u0555\t\f\2\2\u0554\u0553")
        buf.write("\3\2\2\2\u0554\u0555\3\2\2\2\u0555W\3\2\2\2\u0556\u0557")
        buf.write("\7\n\2\2\u0557\u0558\7\u0190\2\2\u0558\u055e\5\u0296\u014c")
        buf.write("\2\u0559\u055f\5Z.\2\u055a\u055f\5\\/\2\u055b\u055f\5")
        buf.write("^\60\2\u055c\u055f\5f\64\2\u055d\u055f\5\u0088E\2\u055e")
        buf.write("\u0559\3\2\2\2\u055e\u055a\3\2\2\2\u055e\u055b\3\2\2\2")
        buf.write("\u055e\u055c\3\2\2\2\u055e\u055d\3\2\2\2\u055f\u0561\3")
        buf.write("\2\2\2\u0560\u0562\5h\65\2\u0561\u0560\3\2\2\2\u0561\u0562")
        buf.write("\3\2\2\2\u0562Y\3\2\2\2\u0563\u0565\7A\2\2\u0564\u0566")
        buf.write("\7`\2\2\u0565\u0564\3\2\2\2\u0565\u0566\3\2\2\2\u0566")
        buf.write("\u0568\3\2\2\2\u0567\u0569\t\r\2\2\u0568\u0567\3\2\2\2")
        buf.write("\u0568\u0569\3\2\2\2\u0569\u056d\3\2\2\2\u056a\u056c\5")
        buf.write("\u00aeX\2\u056b\u056a\3\2\2\2\u056c\u056f\3\2\2\2\u056d")
        buf.write("\u056b\3\2\2\2\u056d\u056e\3\2\2\2\u056e\u0572\3\2\2\2")
        buf.write("\u056f\u056d\3\2\2\2\u0570\u0571\7\u013f\2\2\u0571\u0573")
        buf.write("\7\u015d\2\2\u0572\u0570\3\2\2\2\u0572\u0573\3\2\2\2\u0573")
        buf.write("[\3\2\2\2\u0574\u0576\7\u0138\2\2\u0575\u0577\5\u00ac")
        buf.write("W\2\u0576\u0575\3\2\2\2\u0576\u0577\3\2\2\2\u0577\u0578")
        buf.write("\3\2\2\2\u0578\u0579\7\17\2\2\u0579\u057a\7\u0105\2\2")
        buf.write("\u057a\u057b\7\u01ee\2\2\u057b\u0580\5\u008aF\2\u057c")
        buf.write("\u057d\7\u01f4\2\2\u057d\u057f\5\u008aF\2\u057e\u057c")
        buf.write("\3\2\2\2\u057f\u0582\3\2\2\2\u0580\u057e\3\2\2\2\u0580")
        buf.write("\u0581\3\2\2\2\u0581\u0583\3\2\2\2\u0582\u0580\3\2\2\2")
        buf.write("\u0583\u0584\7\u01ef\2\2\u0584]\3\2\2\2\u0585\u058a\5")
        buf.write("`\61\2\u0586\u0587\7\u01f4\2\2\u0587\u0589\5`\61\2\u0588")
        buf.write("\u0586\3\2\2\2\u0589\u058c\3\2\2\2\u058a\u0588\3\2\2\2")
        buf.write("\u058a\u058b\3\2\2\2\u058b_\3\2\2\2\u058c\u058a\3\2\2")
        buf.write("\2\u058d\u0590\t\16\2\2\u058e\u0591\5\u009aN\2\u058f\u0591")
        buf.write("\5\u0092J\2\u0590\u058e\3\2\2\2\u0590\u058f\3\2\2\2\u0591")
        buf.write("a\3\2\2\2\u0592\u0593\t\17\2\2\u0593\u05a0\7\25\2\2\u0594")
        buf.write("\u05a1\5d\63\2\u0595\u0596\7\u01ee\2\2\u0596\u059b\5d")
        buf.write("\63\2\u0597\u0598\7\u01f4\2\2\u0598\u059a\5d\63\2\u0599")
        buf.write("\u0597\3\2\2\2\u059a\u059d\3\2\2\2\u059b\u0599\3\2\2\2")
        buf.write("\u059b\u059c\3\2\2\2\u059c\u059e\3\2\2\2\u059d\u059b\3")
        buf.write("\2\2\2\u059e\u059f\7\u01ef\2\2\u059f\u05a1\3\2\2\2\u05a0")
        buf.write("\u0594\3\2\2\2\u05a0\u0595\3\2\2\2\u05a1c\3\2\2\2\u05a2")
        buf.write("\u05a4\5\u0278\u013d\2\u05a3\u05a5\5\u02c2\u0162\2\u05a4")
        buf.write("\u05a3\3\2\2\2\u05a4\u05a5\3\2\2\2\u05a5e\3\2\2\2\u05a6")
        buf.write("\u05ac\7\u00e6\2\2\u05a7\u05a8\7\u00d0\2\2\u05a8\u05ad")
        buf.write("\5\u01f0\u00f9\2\u05a9\u05aa\7w\2\2\u05aa\u05ab\7\u0190")
        buf.write("\2\2\u05ab\u05ad\5\u02c2\u0162\2\u05ac\u05a7\3\2\2\2\u05ac")
        buf.write("\u05a9\3\2\2\2\u05adg\3\2\2\2\u05ae\u05bf\7\u00be\2\2")
        buf.write("\u05af\u05b9\7\60\2\2\u05b0\u05b1\7L\2\2\u05b1\u05b2\7")
        buf.write("\u0187\2\2\u05b2\u05ba\7\u0177\2\2\u05b3\u05b5\7\u00fe")
        buf.write("\2\2\u05b4\u05b3\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5\u05b6")
        buf.write("\3\2\2\2\u05b6\u05b7\7\u00ab\2\2\u05b7\u05b8\7\u017b\2")
        buf.write("\2\u05b8\u05ba\7Y\2\2\u05b9\u05b0\3\2\2\2\u05b9\u05b4")
        buf.write("\3\2\2\2\u05b9\u05ba\3\2\2\2\u05ba\u05bc\3\2\2\2\u05bb")
        buf.write("\u05bd\5j\66\2\u05bc\u05bb\3\2\2\2\u05bc\u05bd\3\2\2\2")
        buf.write("\u05bd\u05bf\3\2\2\2\u05be\u05ae\3\2\2\2\u05be\u05af\3")
        buf.write("\2\2\2\u05bfi\3\2\2\2\u05c0\u05c2\7\u009a\2\2\u05c1\u05c0")
        buf.write("\3\2\2\2\u05c1\u05c2\3\2\2\2\u05c2\u05c3\3\2\2\2\u05c3")
        buf.write("\u05c4\7\u0086\2\2\u05c4\u05c5\7\u00bd\2\2\u05c5\u05c6")
        buf.write("\5\u02b0\u0159\2\u05c6k\3\2\2\2\u05c7\u05ca\7Q\2\2\u05c8")
        buf.write("\u05c9\7\u010e\2\2\u05c9\u05cb\7\u0138\2\2\u05ca\u05c8")
        buf.write("\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05cc\3\2\2\2\u05cc")
        buf.write("\u05cf\7\u0190\2\2\u05cd\u05d0\5n8\2\u05ce\u05d0\5z>\2")
        buf.write("\u05cf\u05cd\3\2\2\2\u05cf\u05ce\3\2\2\2\u05d0m\3\2\2")
        buf.write("\2\u05d1\u05d4\5\u0296\u014c\2\u05d2\u05d3\7\u0108\2\2")
        buf.write("\u05d3\u05d5\7\u01ea\2\2\u05d4\u05d2\3\2\2\2\u05d4\u05d5")
        buf.write("\3\2\2\2\u05d5\u05d7\3\2\2\2\u05d6\u05d8\5p9\2\u05d7\u05d6")
        buf.write("\3\2\2\2\u05d7\u05d8\3\2\2\2\u05d8o\3\2\2\2\u05d9\u05db")
        buf.write("\5\u00acW\2\u05da\u05d9\3\2\2\2\u05da\u05db\3\2\2\2\u05db")
        buf.write("\u05de\3\2\2\2\u05dc\u05df\5r:\2\u05dd\u05df\5t;\2\u05de")
        buf.write("\u05dc\3\2\2\2\u05de\u05dd\3\2\2\2\u05df\u05e1\3\2\2\2")
        buf.write("\u05e0\u05e2\5x=\2\u05e1\u05e0\3\2\2\2\u05e1\u05e2\3\2")
        buf.write("\2\2\u05e2\u05ee\3\2\2\2\u05e3\u05e4\7\u01ee\2\2\u05e4")
        buf.write("\u05e9\5\u008aF\2\u05e5\u05e6\7\u01f4\2\2\u05e6\u05e8")
        buf.write("\5\u008aF\2\u05e7\u05e5\3\2\2\2\u05e8\u05eb\3\2\2\2\u05e9")
        buf.write("\u05e7\3\2\2\2\u05e9\u05ea\3\2\2\2\u05ea\u05ec\3\2\2\2")
        buf.write("\u05eb\u05e9\3\2\2\2\u05ec\u05ed\7\u01ef\2\2\u05ed\u05ef")
        buf.write("\3\2\2\2\u05ee\u05e3\3\2\2\2\u05ee\u05ef\3\2\2\2\u05ef")
        buf.write("\u05f3\3\2\2\2\u05f0\u05f2\5\u0088E\2\u05f1\u05f0\3\2")
        buf.write("\2\2\u05f2\u05f5\3\2\2\2\u05f3\u05f1\3\2\2\2\u05f3\u05f4")
        buf.write("\3\2\2\2\u05f4q\3\2\2\2\u05f5\u05f3\3\2\2\2\u05f6\u05fa")
        buf.write("\t\3\2\2\u05f7\u05fb\7\u0105\2\2\u05f8\u05fb\5\u00dan")
        buf.write("\2\u05f9\u05fb\5v<\2\u05fa\u05f7\3\2\2\2\u05fa\u05f8\3")
        buf.write("\2\2\2\u05fa\u05f9\3\2\2\2\u05fbs\3\2\2\2\u05fc\u05fd")
        buf.write("\7\u0192\2\2\u05fd\u05fe\5\u02c2\u0162\2\u05feu\3\2\2")
        buf.write("\2\u05ff\u0600\7\u017b\2\2\u0600\u0601\7\u0106\2\2\u0601")
        buf.write("\u0604\5\u02c2\u0162\2\u0602\u0603\7\u00fe\2\2\u0603\u0605")
        buf.write("\7\u0100\2\2\u0604\u0602\3\2\2\2\u0604\u0605\3\2\2\2\u0605")
        buf.write("w\3\2\2\2\u0606\u0607\7\u008d\2\2\u0607\u0608\7\u00e9")
        buf.write("\2\2\u0608\u0609\5\u01f0\u00f9\2\u0609\u060a\7\u00c5\2")
        buf.write("\2\u060a\u060b\7\u00c2\2\2\u060b\u060c\7\u019d\2\2\u060c")
        buf.write("\u060d\t\20\2\2\u060dy\3\2\2\2\u060e\u060f\7%\2\2\u060f")
        buf.write("\u0610\5\u0296\u014c\2\u0610\u0612\t\3\2\2\u0611\u0613")
        buf.write("\5|?\2\u0612\u0611\3\2\2\2\u0613\u0614\3\2\2\2\u0614\u0612")
        buf.write("\3\2\2\2\u0614\u0615\3\2\2\2\u0615\u0616\3\2\2\2\u0616")
        buf.write("\u0617\7}\2\2\u0617{\3\2\2\2\u0618\u061b\5~@\2\u0619\u061b")
        buf.write("\5\u0080A\2\u061a\u0618\3\2\2\2\u061a\u0619\3\2\2\2\u061b")
        buf.write("}\3\2\2\2\u061c\u061d\t\21\2\2\u061d\u061e\7\u00de\2\2")
        buf.write("\u061e\u061f\5\u0084C\2\u061f\177\3\2\2\2\u0620\u0624")
        buf.write("\t\22\2\2\u0621\u0625\5\u0082B\2\u0622\u0625\5\u0084C")
        buf.write("\2\u0623\u0625\5\u0086D\2\u0624\u0621\3\2\2\2\u0624\u0622")
        buf.write("\3\2\2\2\u0624\u0623\3\2\2\2\u0625\u0081\3\2\2\2\u0626")
        buf.write("\u0627\7\u012b\2\2\u0627\u0628\5\u029e\u0150\2\u0628\u0629")
        buf.write("\7\u01ee\2\2\u0629\u062e\5\u00a0Q\2\u062a\u062b\7\u01f4")
        buf.write("\2\2\u062b\u062d\5\u00a0Q\2\u062c\u062a\3\2\2\2\u062d")
        buf.write("\u0630\3\2\2\2\u062e\u062c\3\2\2\2\u062e\u062f\3\2\2\2")
        buf.write("\u062f\u0631\3\2\2\2\u0630\u062e\3\2\2\2\u0631\u0632\7")
        buf.write("\u01ef\2\2\u0632\u0640\t\3\2\2\u0633\u0641\5\u00b0Y\2")
        buf.write("\u0634\u0636\7c\2\2\u0635\u0634\3\2\2\2\u0635\u0636\3")
        buf.write("\2\2\2\u0636\u063a\3\2\2\2\u0637\u0639\5\u00be`\2\u0638")
        buf.write("\u0637\3\2\2\2\u0639\u063c\3\2\2\2\u063a\u0638\3\2\2\2")
        buf.write("\u063a\u063b\3\2\2\2\u063b\u063d\3\2\2\2\u063c\u063a\3")
        buf.write("\2\2\2\u063d\u063e\5\u010c\u0087\2\u063e\u063f\7\u01fa")
        buf.write("\2\2\u063f\u0641\3\2\2\2\u0640\u0633\3\2\2\2\u0640\u0635")
        buf.write("\3\2\2\2\u0641\u0083\3\2\2\2\u0642\u0643\7\u009d\2\2\u0643")
        buf.write("\u064f\5\u029c\u014f\2\u0644\u0645\7\u01ee\2\2\u0645\u064a")
        buf.write("\5\u00a0Q\2\u0646\u0647\7\u01f4\2\2\u0647\u0649\5\u00a0")
        buf.write("Q\2\u0648\u0646\3\2\2\2\u0649\u064c\3\2\2\2\u064a\u0648")
        buf.write("\3\2\2\2\u064a\u064b\3\2\2\2\u064b\u064d\3\2\2\2\u064c")
        buf.write("\u064a\3\2\2\2\u064d\u064e\7\u01ef\2\2\u064e\u0650\3\2")
        buf.write("\2\2\u064f\u0644\3\2\2\2\u064f\u0650\3\2\2\2\u0650\u0651")
        buf.write("\3\2\2\2\u0651\u0652\7\u013d\2\2\u0652\u0653\5\u02c2\u0162")
        buf.write("\2\u0653\u0661\t\3\2\2\u0654\u0662\5\u00b0Y\2\u0655\u0657")
        buf.write("\7c\2\2\u0656\u0655\3\2\2\2\u0656\u0657\3\2\2\2\u0657")
        buf.write("\u065b\3\2\2\2\u0658\u065a\5\u00be`\2\u0659\u0658\3\2")
        buf.write("\2\2\u065a\u065d\3\2\2\2\u065b\u0659\3\2\2\2\u065b\u065c")
        buf.write("\3\2\2\2\u065c\u065e\3\2\2\2\u065d\u065b\3\2\2\2\u065e")
        buf.write("\u065f\5\u010c\u0087\2\u065f\u0660\7\u01fa\2\2\u0660\u0662")
        buf.write("\3\2\2\2\u0661\u0654\3\2\2\2\u0661\u0656\3\2\2\2\u0662")
        buf.write("\u0085\3\2\2\2\u0663\u0665\7\u0092\2\2\u0664\u0663\3\2")
        buf.write("\2\2\u0664\u0665\3\2\2\2\u0665\u0667\3\2\2\2\u0666\u0668")
        buf.write("\7\u00b7\2\2\u0667\u0666\3\2\2\2\u0667\u0668\3\2\2\2\u0668")
        buf.write("\u0669\3\2\2\2\u0669\u066a\7H\2\2\u066a\u066b\7\u009d")
        buf.write("\2\2\u066b\u067d\5\u02c2\u0162\2\u066c\u066d\7\u01ee\2")
        buf.write("\2\u066d\u066e\7\u0154\2\2\u066e\u066f\7\u00a9\2\2\u066f")
        buf.write("\u0670\7\u0113\2\2\u0670\u0671\5\u02c2\u0162\2\u0671\u0672")
        buf.write("\7\u01f4\2\2\u0672\u0673\3\2\2\2\u0673\u0678\5\u00a0Q")
        buf.write("\2\u0674\u0675\7\u01f4\2\2\u0675\u0677\5\u00a0Q\2\u0676")
        buf.write("\u0674\3\2\2\2\u0677\u067a\3\2\2\2\u0678\u0676\3\2\2\2")
        buf.write("\u0678\u0679\3\2\2\2\u0679\u067b\3\2\2\2\u067a\u0678\3")
        buf.write("\2\2\2\u067b\u067c\7\u01ef\2\2\u067c\u067e\3\2\2\2\u067d")
        buf.write("\u066c\3\2\2\2\u067d\u067e\3\2\2\2\u067e\u067f\3\2\2\2")
        buf.write("\u067f\u0680\7\u013d\2\2\u0680\u0681\7\u0154\2\2\u0681")
        buf.write("\u0682\7\17\2\2\u0682\u0683\7\u013b\2\2\u0683\u0691\t")
        buf.write("\3\2\2\u0684\u0692\5\u00b0Y\2\u0685\u0687\7c\2\2\u0686")
        buf.write("\u0685\3\2\2\2\u0686\u0687\3\2\2\2\u0687\u068b\3\2\2\2")
        buf.write("\u0688\u068a\5\u00be`\2\u0689\u0688\3\2\2\2\u068a\u068d")
        buf.write("\3\2\2\2\u068b\u0689\3\2\2\2\u068b\u068c\3\2\2\2\u068c")
        buf.write("\u068e\3\2\2\2\u068d\u068b\3\2\2\2\u068e\u068f\5\u010c")
        buf.write("\u0087\2\u068f\u0690\7\u01fa\2\2\u0690\u0692\3\2\2\2\u0691")
        buf.write("\u0684\3\2\2\2\u0691\u0686\3\2\2\2\u0692\u0087\3\2\2\2")
        buf.write("\u0693\u0695\7\u00fe\2\2\u0694\u0693\3\2\2\2\u0694\u0695")
        buf.write("\3\2\2\2\u0695\u0696\3\2\2\2\u0696\u0697\t\23\2\2\u0697")
        buf.write("\u0089\3\2\2\2\u0698\u0699\5\u02d8\u016d\2\u0699\u069b")
        buf.write("\5\u02c2\u0162\2\u069a\u069c\5\u008cG\2\u069b\u069a\3")
        buf.write("\2\2\2\u069b\u069c\3\2\2\2\u069c\u069f\3\2\2\2\u069d\u069f")
        buf.write("\5\u008eH\2\u069e\u0698\3\2\2\2\u069e\u069d\3\2\2\2\u069f")
        buf.write("\u008b\3\2\2\2\u06a0\u06a1\7\u008d\2\2\u06a1\u06a2\7\u00e9")
        buf.write("\2\2\u06a2\u06a3\5\u01f0\u00f9\2\u06a3\u008d\3\2\2\2\u06a4")
        buf.write("\u06a6\5\u0088E\2\u06a5\u06a4\3\2\2\2\u06a5\u06a6\3\2")
        buf.write("\2\2\u06a6\u06a8\3\2\2\2\u06a7\u06a9\5\u0090I\2\u06a8")
        buf.write("\u06a7\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa\u06a8\3\2\2\2")
        buf.write("\u06aa\u06ab\3\2\2\2\u06ab\u06ae\3\2\2\2\u06ac\u06ad\7")
        buf.write("\u01f4\2\2\u06ad\u06af\5\u009cO\2\u06ae\u06ac\3\2\2\2")
        buf.write("\u06ae\u06af\3\2\2\2\u06af\u008f\3\2\2\2\u06b0\u06b4\5")
        buf.write("\u0092J\2\u06b1\u06b4\5\u0098M\2\u06b2\u06b4\5\u009aN")
        buf.write("\2\u06b3\u06b0\3\2\2\2\u06b3\u06b1\3\2\2\2\u06b3\u06b2")
        buf.write("\3\2\2\2\u06b4\u0091\3\2\2\2\u06b5\u06b8\t\22\2\2\u06b6")
        buf.write("\u06b9\5\u0094K\2\u06b7\u06b9\5\u0096L\2\u06b8\u06b6\3")
        buf.write("\2\2\2\u06b8\u06b7\3\2\2\2\u06b9\u0093\3\2\2\2\u06ba\u06bb")
        buf.write("\7\u012b\2\2\u06bb\u06bc\5\u029e\u0150\2\u06bc\u06bd\7")
        buf.write("\u01ee\2\2\u06bd\u06c2\5\u00a0Q\2\u06be\u06bf\7\u01f4")
        buf.write("\2\2\u06bf\u06c1\5\u00a0Q\2\u06c0\u06be\3\2\2\2\u06c1")
        buf.write("\u06c4\3\2\2\2\u06c2\u06c0\3\2\2\2\u06c2\u06c3\3\2\2\2")
        buf.write("\u06c3\u06c5\3\2\2\2\u06c4\u06c2\3\2\2\2\u06c5\u06c8\7")
        buf.write("\u01ef\2\2\u06c6\u06c7\t\3\2\2\u06c7\u06c9\5\u00b0Y\2")
        buf.write("\u06c8\u06c6\3\2\2\2\u06c8\u06c9\3\2\2\2\u06c9\u0095\3")
        buf.write("\2\2\2\u06ca\u06cb\7\u009d\2\2\u06cb\u06d7\5\u029c\u014f")
        buf.write("\2\u06cc\u06cd\7\u01ee\2\2\u06cd\u06d2\5\u00a0Q\2\u06ce")
        buf.write("\u06cf\7\u01f4\2\2\u06cf\u06d1\5\u00a0Q\2\u06d0\u06ce")
        buf.write("\3\2\2\2\u06d1\u06d4\3\2\2\2\u06d2\u06d0\3\2\2\2\u06d2")
        buf.write("\u06d3\3\2\2\2\u06d3\u06d5\3\2\2\2\u06d4\u06d2\3\2\2\2")
        buf.write("\u06d5\u06d6\7\u01ef\2\2\u06d6\u06d8\3\2\2\2\u06d7\u06cc")
        buf.write("\3\2\2\2\u06d7\u06d8\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9")
        buf.write("\u06de\7\u013d\2\2\u06da\u06df\5\u02c2\u0162\2\u06db\u06dc")
        buf.write("\7\u0154\2\2\u06dc\u06dd\7\17\2\2\u06dd\u06df\7\u013b")
        buf.write("\2\2\u06de\u06da\3\2\2\2\u06de\u06db\3\2\2\2\u06df\u06e8")
        buf.write("\3\2\2\2\u06e0\u06e1\t\3\2\2\u06e1\u06e9\5\u00b0Y\2\u06e2")
        buf.write("\u06e4\7\u008d\2\2\u06e3\u06e5\7\u01a3\2\2\u06e4\u06e3")
        buf.write("\3\2\2\2\u06e4\u06e5\3\2\2\2\u06e5\u06e6\3\2\2\2\u06e6")
        buf.write("\u06e7\7\u00e9\2\2\u06e7\u06e9\5\u01f0\u00f9\2\u06e8\u06e0")
        buf.write("\3\2\2\2\u06e8\u06e2\3\2\2\2\u06e8\u06e9\3\2\2\2\u06e9")
        buf.write("\u0097\3\2\2\2\u06ea\u06ec\7\u0092\2\2\u06eb\u06ea\3\2")
        buf.write("\2\2\u06eb\u06ec\3\2\2\2\u06ec\u06ee\3\2\2\2\u06ed\u06ef")
        buf.write("\7\u00b7\2\2\u06ee\u06ed\3\2\2\2\u06ee\u06ef\3\2\2\2\u06ef")
        buf.write("\u06f0\3\2\2\2\u06f0\u06f1\7H\2\2\u06f1\u06f2\7\u009d")
        buf.write("\2\2\u06f2\u0704\5\u02c2\u0162\2\u06f3\u06f4\7\u01ee\2")
        buf.write("\2\u06f4\u06f5\7\u0154\2\2\u06f5\u06f6\7\u00a9\2\2\u06f6")
        buf.write("\u06f7\7\u0113\2\2\u06f7\u06f8\5\u02c2\u0162\2\u06f8\u06f9")
        buf.write("\7\u01f4\2\2\u06f9\u06fa\3\2\2\2\u06fa\u06ff\5\u00a0Q")
        buf.write("\2\u06fb\u06fc\7\u01f4\2\2\u06fc\u06fe\5\u00a0Q\2\u06fd")
        buf.write("\u06fb\3\2\2\2\u06fe\u0701\3\2\2\2\u06ff\u06fd\3\2\2\2")
        buf.write("\u06ff\u0700\3\2\2\2\u0700\u0702\3\2\2\2\u0701\u06ff\3")
        buf.write("\2\2\2\u0702\u0703\7\u01ef\2\2\u0703\u0705\3\2\2\2\u0704")
        buf.write("\u06f3\3\2\2\2\u0704\u0705\3\2\2\2\u0705\u0706\3\2\2\2")
        buf.write("\u0706\u0707\7\u013d\2\2\u0707\u0708\7\u0154\2\2\u0708")
        buf.write("\u0709\7\17\2\2\u0709\u070c\7\u013b\2\2\u070a\u070b\t")
        buf.write("\3\2\2\u070b\u070d\5\u00b0Y\2\u070c\u070a\3\2\2\2\u070c")
        buf.write("\u070d\3\2\2\2\u070d\u0099\3\2\2\2\u070e\u070f\t\21\2")
        buf.write("\2\u070f\u0710\7\u00de\2\2\u0710\u0711\5\u0096L\2\u0711")
        buf.write("\u009b\3\2\2\2\u0712\u0713\7\u0126\2\2\u0713\u0714\7\u013a")
        buf.write("\2\2\u0714\u0715\7\u01ee\2\2\u0715\u071a\5\u009eP\2\u0716")
        buf.write("\u0717\7\u01f4\2\2\u0717\u0719\5\u009eP\2\u0718\u0716")
        buf.write("\3\2\2\2\u0719\u071c\3\2\2\2\u071a\u0718\3\2\2\2\u071a")
        buf.write("\u071b\3\2\2\2\u071b\u071d\3\2\2\2\u071c\u071a\3\2\2\2")
        buf.write("\u071d\u071e\7\u01ef\2\2\u071e\u009d\3\2\2\2\u071f\u0722")
        buf.write("\5\u02d8\u016d\2\u0720\u0722\7f\2\2\u0721\u071f\3\2\2")
        buf.write("\2\u0721\u0720\3\2\2\2\u0722\u009f\3\2\2\2\u0723\u0724")
        buf.write("\5\u0288\u0145\2\u0724\u0725\5\u02c2\u0162\2\u0725\u00a1")
        buf.write("\3\2\2\2\u0726\u0727\7t\2\2\u0727\u0728\7\u0155\2\2\u0728")
        buf.write("\u0729\5\u0298\u014d\2\u0729\u00a3\3\2\2\2\u072a\u072b")
        buf.write("\7\n\2\2\u072b\u072c\7\u0155\2\2\u072c\u072e\5\u0298\u014d")
        buf.write("\2\u072d\u072f\5\u00a8U\2\u072e\u072d\3\2\2\2\u072f\u0730")
        buf.write("\3\2\2\2\u0730\u072e\3\2\2\2\u0730\u0731\3\2\2\2\u0731")
        buf.write("\u00a5\3\2\2\2\u0732\u0733\7Q\2\2\u0733\u0734\7\u0155")
        buf.write("\2\2\u0734\u0739\5\u0298\u014d\2\u0735\u0738\5\u00aaV")
        buf.write("\2\u0736\u0738\5\u00a8U\2\u0737\u0735\3\2\2\2\u0737\u0736")
        buf.write("\3\2\2\2\u0738\u073b\3\2\2\2\u0739\u0737\3\2\2\2\u0739")
        buf.write("\u073a\3\2\2\2\u073a\u00a7\3\2\2\2\u073b\u0739\3\2\2\2")
        buf.write("\u073c\u073d\7\u00ac\2\2\u073d\u073e\7*\2\2\u073e\u074d")
        buf.write("\7\u01e8\2\2\u073f\u0740\7\u00dc\2\2\u0740\u074d\7\u01e8")
        buf.write("\2\2\u0741\u074d\7\u00f9\2\2\u0742\u0743\7\u00e2\2\2\u0743")
        buf.write("\u074d\7\u01e8\2\2\u0744\u074d\7\u00fa\2\2\u0745\u074d")
        buf.write("\7X\2\2\u0746\u074d\7\u00f7\2\2\u0747\u0748\7-\2\2\u0748")
        buf.write("\u074d\7\u01e8\2\2\u0749\u074d\7\u00f5\2\2\u074a\u074d")
        buf.write("\7\u0110\2\2\u074b\u074d\7\u00fc\2\2\u074c\u073c\3\2\2")
        buf.write("\2\u074c\u073f\3\2\2\2\u074c\u0741\3\2\2\2\u074c\u0742")
        buf.write("\3\2\2\2\u074c\u0744\3\2\2\2\u074c\u0745\3\2\2\2\u074c")
        buf.write("\u0746\3\2\2\2\u074c\u0747\3\2\2\2\u074c\u0749\3\2\2\2")
        buf.write("\u074c\u074a\3\2\2\2\u074c\u074b\3\2\2\2\u074d\u00a9\3")
        buf.write("\2\2\2\u074e\u074f\7\u016e\2\2\u074f\u0750\7\u01af\2\2")
        buf.write("\u0750\u0751\7\u01e8\2\2\u0751\u00ab\3\2\2\2\u0752\u0753")
        buf.write("\7\27\2\2\u0753\u0754\t\24\2\2\u0754\u00ad\3\2\2\2\u0755")
        buf.write("\u0756\5\u02d8\u016d\2\u0756\u0757\7\u0205\2\2\u0757\u0758")
        buf.write("\5\u01f0\u00f9\2\u0758\u00af\3\2\2\2\u0759\u075c\7\u00c5")
        buf.write("\2\2\u075a\u075d\5\u00b2Z\2\u075b\u075d\5\u00b4[\2\u075c")
        buf.write("\u075a\3\2\2\2\u075c\u075b\3\2\2\2\u075d\u00b1\3\2\2\2")
        buf.write("\u075e\u075f\7\u00c2\2\2\u075f\u0760\7\u00e9\2\2\u0760")
        buf.write("\u0761\7\u01ea\2\2\u0761\u00b3\3\2\2\2\u0762\u0765\7,")
        buf.write("\2\2\u0763\u0764\7\u00e9\2\2\u0764\u0766\7\u01ea\2\2\u0765")
        buf.write("\u0763\3\2\2\2\u0765\u0766\3\2\2\2\u0766\u0767\3\2\2\2")
        buf.write("\u0767\u0768\7\u00cb\2\2\u0768\u076a\5\u02d8\u016d\2\u0769")
        buf.write("\u076b\5\u00b6\\\2\u076a\u0769\3\2\2\2\u076a\u076b\3\2")
        buf.write("\2\2\u076b\u076e\3\2\2\2\u076c\u076d\7\u01af\2\2\u076d")
        buf.write("\u076f\7J\2\2\u076e\u076c\3\2\2\2\u076e\u076f\3\2\2\2")
        buf.write("\u076f\u0771\3\2\2\2\u0770\u0772\5\u00b8]\2\u0771\u0770")
        buf.write("\3\2\2\2\u0771\u0772\3\2\2\2\u0772\u00b5\3\2\2\2\u0773")
        buf.write("\u0774\7\7\2\2\u0774\u0775\7\u00a9\2\2\u0775\u0776\7\u01ee")
        buf.write("\2\2\u0776\u077b\5\u01f0\u00f9\2\u0777\u0778\7\u01f4\2")
        buf.write("\2\u0778\u077a\5\u01f0\u00f9\2\u0779\u0777\3\2\2\2\u077a")
        buf.write("\u077d\3\2\2\2\u077b\u0779\3\2\2\2\u077b\u077c\3\2\2\2")
        buf.write("\u077c\u077e\3\2\2\2\u077d\u077b\3\2\2\2\u077e\u077f\7")
        buf.write("\u01ef\2\2\u077f\u00b7\3\2\2\2\u0780\u0781\7\u0119\2\2")
        buf.write("\u0781\u078d\7\u01ee\2\2\u0782\u0787\5\u01f0\u00f9\2\u0783")
        buf.write("\u0784\7\u01f4\2\2\u0784\u0786\5\u01f0\u00f9\2\u0785\u0783")
        buf.write("\3\2\2\2\u0786\u0789\3\2\2\2\u0787\u0785\3\2\2\2\u0787")
        buf.write("\u0788\3\2\2\2\u0788\u078e\3\2\2\2\u0789\u0787\3\2\2\2")
        buf.write("\u078a\u078b\7\u01e7\2\2\u078b\u078c\7\u01e7\2\2\u078c")
        buf.write("\u078e\7\u01e7\2\2\u078d\u0782\3\2\2\2\u078d\u078a\3\2")
        buf.write("\2\2\u078e\u078f\3\2\2\2\u078f\u0790\7\u01ef\2\2\u0790")
        buf.write("\u00b9\3\2\2\2\u0791\u0795\5\u0288\u0145\2\u0792\u0794")
        buf.write("\t\25\2\2\u0793\u0792\3\2\2\2\u0794\u0797\3\2\2\2\u0795")
        buf.write("\u0793\3\2\2\2\u0795\u0796\3\2\2\2\u0796\u0799\3\2\2\2")
        buf.write("\u0797\u0795\3\2\2\2\u0798\u079a\5\u02c2\u0162\2\u0799")
        buf.write("\u0798\3\2\2\2\u0799\u079a\3\2\2\2\u079a\u079c\3\2\2\2")
        buf.write("\u079b\u079d\5\u00bc_\2\u079c\u079b\3\2\2\2\u079c\u079d")
        buf.write("\3\2\2\2\u079d\u00bb\3\2\2\2\u079e\u079f\t\26\2\2\u079f")
        buf.write("\u07a0\5\u01f0\u00f9\2\u07a0\u00bd\3\2\2\2\u07a1\u07ab")
        buf.write("\5\u00c0a\2\u07a2\u07ab\5\u00c2b\2\u07a3\u07ab\5\u00c4")
        buf.write("c\2\u07a4\u07ab\5\u00c8e\2\u07a5\u07ab\5\u00caf\2\u07a6")
        buf.write("\u07ab\5\u00ccg\2\u07a7\u07ab\5\u00d4k\2\u07a8\u07ab\5")
        buf.write(".\30\2\u07a9\u07ab\5\f\7\2\u07aa\u07a1\3\2\2\2\u07aa\u07a2")
        buf.write("\3\2\2\2\u07aa\u07a3\3\2\2\2\u07aa\u07a4\3\2\2\2\u07aa")
        buf.write("\u07a5\3\2\2\2\u07aa\u07a6\3\2\2\2\u07aa\u07a7\3\2\2\2")
        buf.write("\u07aa\u07a8\3\2\2\2\u07aa\u07a9\3\2\2\2\u07ab\u00bf\3")
        buf.write("\2\2\2\u07ac\u07ae\5\u02a2\u0152\2\u07ad\u07af\7E\2\2")
        buf.write("\u07ae\u07ad\3\2\2\2\u07ae\u07af\3\2\2\2\u07af\u07b0\3")
        buf.write("\2\2\2\u07b0\u07b3\5\u02c2\u0162\2\u07b1\u07b2\7\u00fe")
        buf.write("\2\2\u07b2\u07b4\7\u0100\2\2\u07b3\u07b1\3\2\2\2\u07b3")
        buf.write("\u07b4\3\2\2\2\u07b4\u07b6\3\2\2\2\u07b5\u07b7\5\u00bc")
        buf.write("_\2\u07b6\u07b5\3\2\2\2\u07b6\u07b7\3\2\2\2\u07b7\u07b8")
        buf.write("\3\2\2\2\u07b8\u07b9\7\u01fa\2\2\u07b9\u00c1\3\2\2\2\u07ba")
        buf.write("\u07bb\7\u0178\2\2\u07bb\u07bc\5\u0296\u014c\2\u07bc\u07bd")
        buf.write("\7\u00bf\2\2\u07bd\u07c3\5\u02c2\u0162\2\u07be\u07bf\7")
        buf.write("\u012d\2\2\u07bf\u07c0\5\u01f0\u00f9\2\u07c0\u07c1\7\3")
        buf.write("\2\2\u07c1\u07c2\5\u01f0\u00f9\2\u07c2\u07c4\3\2\2\2\u07c3")
        buf.write("\u07be\3\2\2\2\u07c3\u07c4\3\2\2\2\u07c4\u07c7\3\2\2\2")
        buf.write("\u07c5\u07c6\7\u00fe\2\2\u07c6\u07c8\7\u0100\2\2\u07c7")
        buf.write("\u07c5\3\2\2\2\u07c7\u07c8\3\2\2\2\u07c8\u07c9\3\2\2\2")
        buf.write("\u07c9\u07ca\7\u01fa\2\2\u07ca\u00c3\3\2\2\2\u07cb\u07cc")
        buf.write("\7V\2\2\u07cc\u07d8\5\u02a6\u0154\2\u07cd\u07ce\7\u01ee")
        buf.write("\2\2\u07ce\u07d3\5\u00c6d\2\u07cf\u07d0\7\u01f4\2\2\u07d0")
        buf.write("\u07d2\5\u00c6d\2\u07d1\u07cf\3\2\2\2\u07d2\u07d5\3\2")
        buf.write("\2\2\u07d3\u07d1\3\2\2\2\u07d3\u07d4\3\2\2\2\u07d4\u07d6")
        buf.write("\3\2\2\2\u07d5\u07d3\3\2\2\2\u07d6\u07d7\7\u01ef\2\2\u07d7")
        buf.write("\u07d9\3\2\2\2\u07d8\u07cd\3\2\2\2\u07d8\u07d9\3\2\2\2")
        buf.write("\u07d9\u07dc\3\2\2\2\u07da\u07db\7\u013d\2\2\u07db\u07dd")
        buf.write("\5\u02c2\u0162\2\u07dc\u07da\3\2\2\2\u07dc\u07dd\3\2\2")
        buf.write("\2\u07dd\u07e0\3\2\2\2\u07de\u07df\7\u00bf\2\2\u07df\u07e1")
        buf.write("\5\u0136\u009c\2\u07e0\u07de\3\2\2\2\u07e0\u07e1\3\2\2")
        buf.write("\2\u07e1\u07e2\3\2\2\2\u07e2\u07e3\7\u01fa\2\2\u07e3\u00c5")
        buf.write("\3\2\2\2\u07e4\u07e9\5\u0288\u0145\2\u07e5\u07e7\7\u00a9")
        buf.write("\2\2\u07e6\u07e5\3\2\2\2\u07e6\u07e7\3\2\2\2\u07e7\u07e8")
        buf.write("\3\2\2\2\u07e8\u07ea\5\u02c2\u0162\2\u07e9\u07e6\3\2\2")
        buf.write("\2\u07e9\u07ea\3\2\2\2\u07ea\u07ec\3\2\2\2\u07eb\u07ed")
        buf.write("\5\u00bc_\2\u07ec\u07eb\3\2\2\2\u07ec\u07ed\3\2\2\2\u07ed")
        buf.write("\u00c7\3\2\2\2\u07ee\u07ef\5\u029a\u014e\2\u07ef\u07f0")
        buf.write("\7\u0084\2\2\u07f0\u07f1\7\u01fa\2\2\u07f1\u00c9\3\2\2")
        buf.write("\2\u07f2\u0811\7\u0126\2\2\u07f3\u0812\7\u0158\2\2\u07f4")
        buf.write("\u0812\7\32\2\2\u07f5\u07f6\7\u0085\2\2\u07f6\u07f7\7")
        buf.write("\u01ee\2\2\u07f7\u07f8\5\u029a\u014e\2\u07f8\u07f9\7\u01f4")
        buf.write("\2\2\u07f9\u07fa\5\u02d4\u016b\2\u07fa\u07fb\7\u01ef\2")
        buf.write("\2\u07fb\u0812\3\2\2\2\u07fc\u07fd\7\u00b3\2\2\u07fd\u07fe")
        buf.write("\7\u01ee\2\2\u07fe\u07ff\5\u02d8\u016d\2\u07ff\u0800\7")
        buf.write("\u01f4\2\2\u0800\u0801\5\u01f0\u00f9\2\u0801\u0802\7\u01ef")
        buf.write("\2\2\u0802\u0812\3\2\2\2\u0803\u0804\7\u013a\2\2\u0804")
        buf.write("\u0807\7\u01ee\2\2\u0805\u0808\5\u02d8\u016d\2\u0806\u0808")
        buf.write("\7f\2\2\u0807\u0805\3\2\2\2\u0807\u0806\3\2\2\2\u0808")
        buf.write("\u080b\3\2\2\2\u0809\u080a\7\u01f4\2\2\u080a\u080c\5\u02d8")
        buf.write("\u016d\2\u080b\u0809\3\2\2\2\u080c\u080d\3\2\2\2\u080d")
        buf.write("\u080b\3\2\2\2\u080d\u080e\3\2\2\2\u080e\u080f\3\2\2\2")
        buf.write("\u080f\u0810\7\u01ef\2\2\u0810\u0812\3\2\2\2\u0811\u07f3")
        buf.write("\3\2\2\2\u0811\u07f4\3\2\2\2\u0811\u07f5\3\2\2\2\u0811")
        buf.write("\u07fc\3\2\2\2\u0811\u0803\3\2\2\2\u0812\u0813\3\2\2\2")
        buf.write("\u0813\u0814\7\u01fa\2\2\u0814\u00cb\3\2\2\2\u0815\u0818")
        buf.write("\5\u00ceh\2\u0816\u0818\5\u00d2j\2\u0817\u0815\3\2\2\2")
        buf.write("\u0817\u0816\3\2\2\2\u0818\u00cd\3\2\2\2\u0819\u081a\7")
        buf.write("\u0190\2\2\u081a\u081b\5\u0296\u014c\2\u081b\u082e\7\u00bf")
        buf.write("\2\2\u081c\u081d\7\u0131\2\2\u081d\u081e\7\u01ee\2\2\u081e")
        buf.write("\u0823\5\u00d0i\2\u081f\u0820\7\u01f4\2\2\u0820\u0822")
        buf.write("\5\u00d0i\2\u0821\u081f\3\2\2\2\u0822\u0825\3\2\2\2\u0823")
        buf.write("\u0821\3\2\2\2\u0823\u0824\3\2\2\2\u0824\u0826\3\2\2\2")
        buf.write("\u0825\u0823\3\2\2\2\u0826\u0827\7\u01ef\2\2\u0827\u082f")
        buf.write("\3\2\2\2\u0828\u0829\7\u0132\2\2\u0829\u082c\7V\2\2\u082a")
        buf.write("\u082b\7\u013d\2\2\u082b\u082d\5\u02c2\u0162\2\u082c\u082a")
        buf.write("\3\2\2\2\u082c\u082d\3\2\2\2\u082d\u082f\3\2\2\2\u082e")
        buf.write("\u081c\3\2\2\2\u082e\u0828\3\2\2\2\u082f\u0830\3\2\2\2")
        buf.write("\u0830\u0831\7\u01fa\2\2\u0831\u00cf\3\2\2\2\u0832\u0834")
        buf.write("\5\u02ae\u0158\2\u0833\u0835\5\u02c2\u0162\2\u0834\u0833")
        buf.write("\3\2\2\2\u0834\u0835\3\2\2\2\u0835\u0838\3\2\2\2\u0836")
        buf.write("\u0837\7\u00fe\2\2\u0837\u0839\7\u0100\2\2\u0838\u0836")
        buf.write("\3\2\2\2\u0838\u0839\3\2\2\2\u0839\u083b\3\2\2\2\u083a")
        buf.write("\u083c\5\u00bc_\2\u083b\u083a\3\2\2\2\u083b\u083c\3\2")
        buf.write("\2\2\u083c\u00d1\3\2\2\2\u083d\u083e\5\u02a8\u0155\2\u083e")
        buf.write("\u083f\5\u0296\u014c\2\u083f\u0840\t\27\2\2\u0840\u0841")
        buf.write("\7\u01fa\2\2\u0841\u00d3\3\2\2\2\u0842\u0845\5\u00d6l")
        buf.write("\2\u0843\u0845\5\u00dco\2\u0844\u0842\3\2\2\2\u0844\u0843")
        buf.write("\3\2\2\2\u0845\u0846\3\2\2\2\u0846\u0847\7\u01fa\2\2\u0847")
        buf.write("\u00d5\3\2\2\2\u0848\u0849\7\u0190\2\2\u0849\u084a\5\u0296")
        buf.write("\u014c\2\u084a\u0856\7\u00bf\2\2\u084b\u084c\7\u017b\2")
        buf.write("\2\u084c\u084d\7\u0106\2\2\u084d\u084f\5\u02c2\u0162\2")
        buf.write("\u084e\u0850\5\u00d8m\2\u084f\u084e\3\2\2\2\u084f\u0850")
        buf.write("\3\2\2\2\u0850\u0853\3\2\2\2\u0851\u0852\7\u00fe\2\2\u0852")
        buf.write("\u0854\7\u0100\2\2\u0853\u0851\3\2\2\2\u0853\u0854\3\2")
        buf.write("\2\2\u0854\u0857\3\2\2\2\u0855\u0857\5\u00dan\2\u0856")
        buf.write("\u084b\3\2\2\2\u0856\u0855\3\2\2\2\u0857\u00d7\3\2\2\2")
        buf.write("\u0858\u085b\7\u00af\2\2\u0859\u085b\7\u00ae\2\2\u085a")
        buf.write("\u0858\3\2\2\2\u085a\u0859\3\2\2\2\u085b\u085c\3\2\2\2")
        buf.write("\u085c\u085d\7*\2\2\u085d\u085e\5\u02c2\u0162\2\u085e")
        buf.write("\u00d9\3\2\2\2\u085f\u0863\7\u01a4\2\2\u0860\u0861\7\u01a5")
        buf.write("\2\2\u0861\u0863\7\16\2\2\u0862\u085f\3\2\2\2\u0862\u0860")
        buf.write("\3\2\2\2\u0863\u0864\3\2\2\2\u0864\u0865\7\u01ee\2\2\u0865")
        buf.write("\u0866\5\u01f0\u00f9\2\u0866\u0867\7\u01ef\2\2\u0867\u0868")
        buf.write("\7\u0106\2\2\u0868\u086b\5\u02c2\u0162\2\u0869\u086a\7")
        buf.write("\u00fe\2\2\u086a\u086c\7\u0100\2\2\u086b\u0869\3\2\2\2")
        buf.write("\u086b\u086c\3\2\2\2\u086c\u00db\3\2\2\2\u086d\u086e\5")
        buf.write("\u027e\u0140\2\u086e\u086f\5\u02c2\u0162\2\u086f\u00dd")
        buf.write("\3\2\2\2\u0870\u0871\5\u00e2r\2\u0871\u0872\t\30\2\2\u0872")
        buf.write("\u0875\3\2\2\2\u0873\u0875\5\u00e0q\2\u0874\u0870\3\2")
        buf.write("\2\2\u0874\u0873\3\2\2\2\u0875\u0876\3\2\2\2\u0876\u0874")
        buf.write("\3\2\2\2\u0876\u0877\3\2\2\2\u0877\u00df\3\2\2\2\u0878")
        buf.write("\u0879\7\u01fc\2\2\u0879\u087a\7\u01fc\2\2\u087a\u087b")
        buf.write("\5\u0294\u014b\2\u087b\u087c\7\u0202\2\2\u087c\u087d\7")
        buf.write("\u0202\2\2\u087d\u00e1\3\2\2\2\u087e\u087f\7Q\2\2\u087f")
        buf.write("\u089b\5\2\2\2\u0880\u0881\7\n\2\2\u0881\u089b\5\2\2\2")
        buf.write("\u0882\u0884\7\u009f\2\2\u0883\u0885\7\t\2\2\u0884\u0883")
        buf.write("\3\2\2\2\u0884\u0885\3\2\2\2\u0885\u0886\3\2\2\2\u0886")
        buf.write("\u089b\5\2\2\2\u0887\u0888\7\u018f\2\2\u0888\u089b\5\2")
        buf.write("\2\2\u0889\u089b\5\u010c\u0087\2\u088a\u089b\5\u0112\u008a")
        buf.write("\2\u088b\u089b\5\u00e8u\2\u088c\u089b\5\u00eav\2\u088d")
        buf.write("\u089b\5\u00ecw\2\u088e\u089b\5\u00eex\2\u088f\u089b\5")
        buf.write("\u00f0y\2\u0890\u089b\5\u00f6|\2\u0891\u089b\5\u00fa~")
        buf.write("\2\u0892\u089b\5\u0104\u0083\2\u0893\u089b\5\u0106\u0084")
        buf.write("\2\u0894\u089b\5\u0108\u0085\2\u0895\u089b\5\u0214\u010b")
        buf.write("\2\u0896\u089b\5\u0114\u008b\2\u0897\u089b\5\u010a\u0086")
        buf.write("\2\u0898\u089b\5\u00e4s\2\u0899\u089b\5\u00e6t\2\u089a")
        buf.write("\u087e\3\2\2\2\u089a\u0880\3\2\2\2\u089a\u0882\3\2\2\2")
        buf.write("\u089a\u0887\3\2\2\2\u089a\u0889\3\2\2\2\u089a\u088a\3")
        buf.write("\2\2\2\u089a\u088b\3\2\2\2\u089a\u088c\3\2\2\2\u089a\u088d")
        buf.write("\3\2\2\2\u089a\u088e\3\2\2\2\u089a\u088f\3\2\2\2\u089a")
        buf.write("\u0890\3\2\2\2\u089a\u0891\3\2\2\2\u089a\u0892\3\2\2\2")
        buf.write("\u089a\u0893\3\2\2\2\u089a\u0894\3\2\2\2\u089a\u0895\3")
        buf.write("\2\2\2\u089a\u0896\3\2\2\2\u089a\u0897\3\2\2\2\u089a\u0898")
        buf.write("\3\2\2\2\u089a\u0899\3\2\2\2\u089b\u00e3\3\2\2\2\u089c")
        buf.write("\u089d\7\20\2\2\u089d\u089e\5\u01f0\u00f9\2\u089e\u00e5")
        buf.write("\3\2\2\2\u089f\u08a0\7\21\2\2\u08a0\u08a1\5\u01f0\u00f9")
        buf.write("\2\u08a1\u00e7\3\2\2\2\u08a2\u08a5\5\u02cc\u0167\2\u08a3")
        buf.write("\u08a5\5\u02ca\u0166\2\u08a4\u08a2\3\2\2\2\u08a4\u08a3")
        buf.write("\3\2\2\2\u08a5\u08a6\3\2\2\2\u08a6\u08a7\7\u01f7\2\2\u08a7")
        buf.write("\u08a8\5\u01f0\u00f9\2\u08a8\u00e9\3\2\2\2\u08a9\u08ab")
        buf.write("\7K\2\2\u08aa\u08ac\5\u0294\u014b\2\u08ab\u08aa\3\2\2")
        buf.write("\2\u08ab\u08ac\3\2\2\2\u08ac\u08af\3\2\2\2\u08ad\u08ae")
        buf.write("\7\u01ab\2\2\u08ae\u08b0\5\u01ee\u00f8\2\u08af\u08ad\3")
        buf.write("\2\2\2\u08af\u08b0\3\2\2\2\u08b0\u00eb\3\2\2\2\u08b1\u08b3")
        buf.write("\7\u008b\2\2\u08b2\u08b4\5\u0294\u014b\2\u08b3\u08b2\3")
        buf.write("\2\2\2\u08b3\u08b4\3\2\2\2\u08b4\u08b7\3\2\2\2\u08b5\u08b6")
        buf.write("\7\u01ab\2\2\u08b6\u08b8\5\u01ee\u00f8\2\u08b7\u08b5\3")
        buf.write("\2\2\2\u08b7\u08b8\3\2\2\2\u08b8\u00ed\3\2\2\2\u08b9\u08ba")
        buf.write("\7\u009e\2\2\u08ba\u08bb\5\u0294\u014b\2\u08bb\u00ef\3")
        buf.write("\2\2\2\u08bc\u08bd\7\u00a6\2\2\u08bd\u08be\5\u01ee\u00f8")
        buf.write("\2\u08be\u08bf\7\u017d\2\2\u08bf\u08c3\5\u00dep\2\u08c0")
        buf.write("\u08c2\5\u00f2z\2\u08c1\u08c0\3\2\2\2\u08c2\u08c5\3\2")
        buf.write("\2\2\u08c3\u08c1\3\2\2\2\u08c3\u08c4\3\2\2\2\u08c4\u08c7")
        buf.write("\3\2\2\2\u08c5\u08c3\3\2\2\2\u08c6\u08c8\5\u00f4{\2\u08c7")
        buf.write("\u08c6\3\2\2\2\u08c7\u08c8\3\2\2\2\u08c8\u08c9\3\2\2\2")
        buf.write("\u08c9\u08ca\7}\2\2\u08ca\u08cb\7\u00a6\2\2\u08cb\u00f1")
        buf.write("\3\2\2\2\u08cc\u08cd\7y\2\2\u08cd\u08ce\5\u01ee\u00f8")
        buf.write("\2\u08ce\u08cf\7\u017d\2\2\u08cf\u08d0\5\u00dep\2\u08d0")
        buf.write("\u00f3\3\2\2\2\u08d1\u08d2\7x\2\2\u08d2\u08d3\5\u00de")
        buf.write("p\2\u08d3\u00f5\3\2\2\2\u08d4\u08d6\5\u0294\u014b\2\u08d5")
        buf.write("\u08d4\3\2\2\2\u08d5\u08d6\3\2\2\2\u08d6\u08db\3\2\2\2")
        buf.write("\u08d7\u08d8\7\u01ae\2\2\u08d8\u08dc\5\u01ee\u00f8\2\u08d9")
        buf.write("\u08da\7\u0098\2\2\u08da\u08dc\5\u00f8}\2\u08db\u08d7")
        buf.write("\3\2\2\2\u08db\u08d9\3\2\2\2\u08db\u08dc\3\2\2\2\u08dc")
        buf.write("\u08dd\3\2\2\2\u08dd\u08de\7\u00d8\2\2\u08de\u08df\5\u00de")
        buf.write("p\2\u08df\u08e0\7}\2\2\u08e0\u08e2\7\u00d8\2\2\u08e1\u08e3")
        buf.write("\5\u0294\u014b\2\u08e2\u08e1\3\2\2\2\u08e2\u08e3\3\2\2")
        buf.write("\2\u08e3\u00f7\3\2\2\2\u08e4\u08e5\5\u02a4\u0153\2\u08e5")
        buf.write("\u08e7\7\u00a9\2\2\u08e6\u08e8\7\u0140\2\2\u08e7\u08e6")
        buf.write("\3\2\2\2\u08e7\u08e8\3\2\2\2\u08e8\u08e9\3\2\2\2\u08e9")
        buf.write("\u08ea\5\u0100\u0081\2\u08ea\u08eb\7\3\2\2\u08eb\u08ec")
        buf.write("\5\u0102\u0082\2\u08ec\u08fa\3\2\2\2\u08ed\u08ee\5\u02a8")
        buf.write("\u0155\2\u08ee\u08f7\7\u00a9\2\2\u08ef\u08f1\5\u02a6\u0154")
        buf.write("\2\u08f0\u08f2\5\u01ec\u00f7\2\u08f1\u08f0\3\2\2\2\u08f1")
        buf.write("\u08f2\3\2\2\2\u08f2\u08f8\3\2\2\2\u08f3\u08f4\7\u01ee")
        buf.write("\2\2\u08f4\u08f5\5\u0136\u009c\2\u08f5\u08f6\7\u01ef\2")
        buf.write("\2\u08f6\u08f8\3\2\2\2\u08f7\u08ef\3\2\2\2\u08f7\u08f3")
        buf.write("\3\2\2\2\u08f8\u08fa\3\2\2\2\u08f9\u08e4\3\2\2\2\u08f9")
        buf.write("\u08ed\3\2\2\2\u08fa\u00f9\3\2\2\2\u08fb\u08fc\7\u0099")
        buf.write("\2\2\u08fc\u08fd\5\u02a4\u0153\2\u08fd\u08fe\7\u00a9\2")
        buf.write("\2\u08fe\u08ff\5\u00fc\177\2\u08ff\u0902\5\u0114\u008b")
        buf.write("\2\u0900\u0901\7\u014a\2\2\u0901\u0903\7\u0086\2\2\u0902")
        buf.write("\u0900\3\2\2\2\u0902\u0903\3\2\2\2\u0903\u00fb\3\2\2\2")
        buf.write("\u0904\u0905\5\u0100\u0081\2\u0905\u0906\7\3\2\2\u0906")
        buf.write("\u0907\5\u0102\u0082\2\u0907\u0912\3\2\2\2\u0908\u0909")
        buf.write("\7\u00b1\2\2\u0909\u090a\7\u0106\2\2\u090a\u090c\5\u02aa")
        buf.write("\u0156\2\u090b\u090d\5\u00fe\u0080\2\u090c\u090b\3\2\2")
        buf.write("\2\u090c\u090d\3\2\2\2\u090d\u0912\3\2\2\2\u090e\u090f")
        buf.write("\7\u01a0\2\2\u090f\u0910\7\u0106\2\2\u0910\u0912\5\u02a4")
        buf.write("\u0153\2\u0911\u0904\3\2\2\2\u0911\u0908\3\2\2\2\u0911")
        buf.write("\u090e\3\2\2\2\u0912\u00fd\3\2\2\2\u0913\u0914\7\36\2")
        buf.write("\2\u0914\u0915\5\u0100\u0081\2\u0915\u0916\7\f\2\2\u0916")
        buf.write("\u0917\5\u0102\u0082\2\u0917\u00ff\3\2\2\2\u0918\u0919")
        buf.write("\5\u0200\u0101\2\u0919\u0101\3\2\2\2\u091a\u091b\5\u0200")
        buf.write("\u0101\2\u091b\u0103\3\2\2\2\u091c\u091d\7\u0100\2\2\u091d")
        buf.write("\u0105\3\2\2\2\u091e\u0920\7\u012c\2\2\u091f\u0921\5\u029a")
        buf.write("\u014e\2\u0920\u091f\3\2\2\2\u0920\u0921\3\2\2\2\u0921")
        buf.write("\u0107\3\2\2\2\u0922\u0924\7\u013d\2\2\u0923\u0925\5\u01ee")
        buf.write("\u00f8\2\u0924\u0923\3\2\2\2\u0924\u0925\3\2\2\2\u0925")
        buf.write("\u0109\3\2\2\2\u0926\u0928\7.\2\2\u0927\u0926\3\2\2\2")
        buf.write("\u0927\u0928\3\2\2\2\u0928\u0929\3\2\2\2\u0929\u092b\5")
        buf.write("\u0282\u0142\2\u092a\u092c\5\u02b8\u015d\2\u092b\u092a")
        buf.write("\3\2\2\2\u092b\u092c\3\2\2\2\u092c\u010b\3\2\2\2\u092d")
        buf.write("\u092e\7\35\2\2\u092e\u0935\5\u00dep\2\u092f\u0931\7\u0084")
        buf.write("\2\2\u0930\u0932\5\u010e\u0088\2\u0931\u0930\3\2\2\2\u0932")
        buf.write("\u0933\3\2\2\2\u0933\u0931\3\2\2\2\u0933\u0934\3\2\2\2")
        buf.write("\u0934\u0936\3\2\2\2\u0935\u092f\3\2\2\2\u0935\u0936\3")
        buf.write("\2\2\2\u0936\u0937\3\2\2\2\u0937\u0939\7}\2\2\u0938\u093a")
        buf.write("\5\u0294\u014b\2\u0939\u0938\3\2\2\2\u0939\u093a\3\2\2")
        buf.write("\2\u093a\u010d\3\2\2\2\u093b\u093c\7\u01ab\2\2\u093c\u0941")
        buf.write("\5\u029a\u014e\2\u093d\u093e\7\u010e\2\2\u093e\u0940\5")
        buf.write("\u029a\u014e\2\u093f\u093d\3\2\2\2\u0940\u0943\3\2\2\2")
        buf.write("\u0941\u093f\3\2\2\2\u0941\u0942\3\2\2\2\u0942\u0944\3")
        buf.write("\2\2\2\u0943\u0941\3\2\2\2\u0944\u0945\7\u017d\2\2\u0945")
        buf.write("\u0946\5\u00dep\2\u0946\u010f\3\2\2\2\u0947\u0949\7c\2")
        buf.write("\2\u0948\u0947\3\2\2\2\u0948\u0949\3\2\2\2\u0949\u094b")
        buf.write("\3\2\2\2\u094a\u094c\5\u00be`\2\u094b\u094a\3\2\2\2\u094c")
        buf.write("\u094d\3\2\2\2\u094d\u094b\3\2\2\2\u094d\u094e\3\2\2\2")
        buf.write("\u094e\u0950\3\2\2\2\u094f\u0948\3\2\2\2\u094f\u0950\3")
        buf.write("\2\2\2\u0950\u0951\3\2\2\2\u0951\u0952\5\u010c\u0087\2")
        buf.write("\u0952\u0111\3\2\2\2\u0953\u0955\7c\2\2\u0954\u0953\3")
        buf.write("\2\2\2\u0954\u0955\3\2\2\2\u0955\u0957\3\2\2\2\u0956\u0958")
        buf.write("\5\u00be`\2\u0957\u0956\3\2\2\2\u0958\u0959\3\2\2\2\u0959")
        buf.write("\u0957\3\2\2\2\u0959\u095a\3\2\2\2\u095a\u095b\3\2\2\2")
        buf.write("\u095b\u095c\5\u010c\u0087\2\u095c\u0113\3\2\2\2\u095d")
        buf.write("\u0962\5\u0116\u008c\2\u095e\u0962\5\u011a\u008e\2\u095f")
        buf.write("\u0962\5\u011c\u008f\2\u0960\u0962\5\u0126\u0094\2\u0961")
        buf.write("\u095d\3\2\2\2\u0961\u095e\3\2\2\2\u0961\u095f\3\2\2\2")
        buf.write("\u0961\u0960\3\2\2\2\u0962\u0115\3\2\2\2\u0963\u0964\7")
        buf.write("\u0089\2\2\u0964\u0965\7\u00a8\2\2\u0965\u096f\5\u01f0")
        buf.write("\u00f9\2\u0966\u0968\5\u0272\u013a\2\u0967\u0969\5\u023a")
        buf.write("\u011e\2\u0968\u0967\3\2\2\2\u0968\u0969\3\2\2\2\u0969")
        buf.write("\u0970\3\2\2\2\u096a\u096c\5\u023a\u011e\2\u096b\u096d")
        buf.write("\5\u0118\u008d\2\u096c\u096b\3\2\2\2\u096c\u096d\3\2\2")
        buf.write("\2\u096d\u0970\3\2\2\2\u096e\u0970\5\u0118\u008d\2\u096f")
        buf.write("\u0966\3\2\2\2\u096f\u096a\3\2\2\2\u096f\u096e\3\2\2\2")
        buf.write("\u096f\u0970\3\2\2\2\u0970\u0117\3\2\2\2\u0971\u0972\t")
        buf.write("\31\2\2\u0972\u0973\5\u0272\u013a\2\u0973\u0119\3\2\2")
        buf.write("\2\u0974\u097c\5\u01c2\u00e2\2\u0975\u097c\5\u01ce\u00e8")
        buf.write("\2\u0976\u097c\5\u0136\u009c\2\u0977\u097c\5\u01a8\u00d5")
        buf.write("\2\u0978\u097c\5\u01ae\u00d8\2\u0979\u097c\5\u01b0\u00d9")
        buf.write("\2\u097a\u097c\5\u0134\u009b\2\u097b\u0974\3\2\2\2\u097b")
        buf.write("\u0975\3\2\2\2\u097b\u0976\3\2\2\2\u097b\u0977\3\2\2\2")
        buf.write("\u097b\u0978\3\2\2\2\u097b\u0979\3\2\2\2\u097b\u097a\3")
        buf.write("\2\2\2\u097c\u011b\3\2\2\2\u097d\u0982\5\u011e\u0090\2")
        buf.write("\u097e\u0982\5\u0120\u0091\2\u097f\u0982\5\u0122\u0092")
        buf.write("\2\u0980\u0982\5\u0124\u0093\2\u0981\u097d\3\2\2\2\u0981")
        buf.write("\u097e\3\2\2\2\u0981\u097f\3\2\2\2\u0981\u0980\3\2\2\2")
        buf.write("\u0982\u011d\3\2\2\2\u0983\u0984\79\2\2\u0984\u0985\5")
        buf.write("\u02a6\u0154\2\u0985\u011f\3\2\2\2\u0986\u0987\7\u010c")
        buf.write("\2\2\u0987\u0989\5\u02a6\u0154\2\u0988\u098a\5\u01ec\u00f7")
        buf.write("\2\u0989\u0988\3\2\2\2\u0989\u098a\3\2\2\2\u098a\u0121")
        buf.write("\3\2\2\2\u098b\u098c\7\u0091\2\2\u098c\u09a1\5\u02a6\u0154")
        buf.write("\2\u098d\u098e\7\u00bd\2\2\u098e\u0993\5\u02a2\u0152\2")
        buf.write("\u098f\u0990\7\u01f4\2\2\u0990\u0992\5\u02a2\u0152\2\u0991")
        buf.write("\u098f\3\2\2\2\u0992\u0995\3\2\2\2\u0993\u0991\3\2\2\2")
        buf.write("\u0993\u0994\3\2\2\2\u0994\u09a2\3\2\2\2\u0995\u0993\3")
        buf.write("\2\2\2\u0996\u0997\7)\2\2\u0997\u0998\7;\2\2\u0998\u0999")
        buf.write("\7\u00bd\2\2\u0999\u099e\5\u02a2\u0152\2\u099a\u099b\7")
        buf.write("\u01f4\2\2\u099b\u099d\5\u02a2\u0152\2\u099c\u099a\3\2")
        buf.write("\2\2\u099d\u09a0\3\2\2\2\u099e\u099c\3\2\2\2\u099e\u099f")
        buf.write("\3\2\2\2\u099f\u09a2\3\2\2\2\u09a0\u099e\3\2\2\2\u09a1")
        buf.write("\u098d\3\2\2\2\u09a1\u0996\3\2\2\2\u09a2\u0123\3\2\2\2")
        buf.write("\u09a3\u09a4\7\u010c\2\2\u09a4\u09a5\5\u02a2\u0152\2\u09a5")
        buf.write("\u09a8\7\u0098\2\2\u09a6\u09a9\5\u0136\u009c\2\u09a7\u09a9")
        buf.write("\5\u01f0\u00f9\2\u09a8\u09a6\3\2\2\2\u09a8\u09a7\3\2\2")
        buf.write("\2\u09a9\u09ab\3\2\2\2\u09aa\u09ac\5\u023a\u011e\2\u09ab")
        buf.write("\u09aa\3\2\2\2\u09ab\u09ac\3\2\2\2\u09ac\u0125\3\2\2\2")
        buf.write("\u09ad\u09b3\5\u0128\u0095\2\u09ae\u09b3\5\u012a\u0096")
        buf.write("\2\u09af\u09b3\5\u012c\u0097\2\u09b0\u09b3\5\u0130\u0099")
        buf.write("\2\u09b1\u09b3\5\u0132\u009a\2\u09b2\u09ad\3\2\2\2\u09b2")
        buf.write("\u09ae\3\2\2\2\u09b2\u09af\3\2\2\2\u09b2\u09b0\3\2\2\2")
        buf.write("\u09b2\u09b1\3\2\2\2\u09b3\u0127\3\2\2\2\u09b4\u09b5\7")
        buf.write("\u015b\2\2\u09b5\u09c3\7\u0189\2\2\u09b6\u09b7\7\u012f")
        buf.write("\2\2\u09b7\u09c4\t\32\2\2\u09b8\u09b9\7\u00c0\2\2\u09b9")
        buf.write("\u09bd\7\u00ca\2\2\u09ba\u09be\7\u0157\2\2\u09bb\u09bc")
        buf.write("\7\u012f\2\2\u09bc\u09be\7?\2\2\u09bd\u09ba\3\2\2\2\u09bd")
        buf.write("\u09bb\3\2\2\2\u09be\u09c4\3\2\2\2\u09bf\u09c0\7\u019c")
        buf.write("\2\2\u09c0\u09c1\7\u0143\2\2\u09c1\u09c2\7\u0152\2\2\u09c2")
        buf.write("\u09c4\5\u027c\u013f\2\u09c3\u09b6\3\2\2\2\u09c3\u09b8")
        buf.write("\3\2\2\2\u09c3\u09bf\3\2\2\2\u09c3\u09c4\3\2\2\2\u09c4")
        buf.write("\u09c7\3\2\2\2\u09c5\u09c6\7\u00e9\2\2\u09c6\u09c8\5\u02d6")
        buf.write("\u016c\2\u09c7\u09c5\3\2\2\2\u09c7\u09c8\3\2\2\2\u09c8")
        buf.write("\u0129\3\2\2\2\u09c9\u09ca\7\u015b\2\2\u09ca\u09d4\t\33")
        buf.write("\2\2\u09cb\u09d5\7\t\2\2\u09cc\u09d1\5\u0292\u014a\2\u09cd")
        buf.write("\u09ce\7\u01f4\2\2\u09ce\u09d0\5\u0292\u014a\2\u09cf\u09cd")
        buf.write("\3\2\2\2\u09d0\u09d3\3\2\2\2\u09d1\u09cf\3\2\2\2\u09d1")
        buf.write("\u09d2\3\2\2\2\u09d2\u09d5\3\2\2\2\u09d3\u09d1\3\2\2\2")
        buf.write("\u09d4\u09cb\3\2\2\2\u09d4\u09cc\3\2\2\2\u09d5\u09d6\3")
        buf.write("\2\2\2\u09d6\u09d7\t\34\2\2\u09d7\u012b\3\2\2\2\u09d8")
        buf.write("\u09da\7>\2\2\u09d9\u09db\7\u01b1\2\2\u09da\u09d9\3\2")
        buf.write("\2\2\u09da\u09db\3\2\2\2\u09db\u09e9\3\2\2\2\u09dc\u09dd")
        buf.write("\7=\2\2\u09dd\u09ea\5\u01f0\u00f9\2\u09de\u09e7\7\u009a")
        buf.write("\2\2\u09df\u09e0\7M\2\2\u09e0\u09e8\5\u01f0\u00f9\2\u09e1")
        buf.write("\u09e8\7N\2\2\u09e2\u09e5\5\u01f0\u00f9\2\u09e3\u09e4")
        buf.write("\7\u01f4\2\2\u09e4\u09e6\5\u01f0\u00f9\2\u09e5\u09e3\3")
        buf.write("\2\2\2\u09e5\u09e6\3\2\2\2\u09e6\u09e8\3\2\2\2\u09e7\u09df")
        buf.write("\3\2\2\2\u09e7\u09e1\3\2\2\2\u09e7\u09e2\3\2\2\2\u09e8")
        buf.write("\u09ea\3\2\2\2\u09e9\u09dc\3\2\2\2\u09e9\u09de\3\2\2\2")
        buf.write("\u09e9\u09ea\3\2\2\2\u09ea\u09ec\3\2\2\2\u09eb\u09ed\5")
        buf.write("\u012e\u0098\2\u09ec\u09eb\3\2\2\2\u09ec\u09ed\3\2\2\2")
        buf.write("\u09ed\u012d\3\2\2\2\u09ee\u09f0\7\u01b2\2\2\u09ef\u09f1")
        buf.write("\t\35\2\2\u09f0\u09ef\3\2\2\2\u09f0\u09f1\3\2\2\2\u09f1")
        buf.write("\u09f3\3\2\2\2\u09f2\u09f4\t\36\2\2\u09f3\u09f2\3\2\2")
        buf.write("\2\u09f3\u09f4\3\2\2\2\u09f4\u012f\3\2\2\2\u09f5\u09f7")
        buf.write("\7\u0143\2\2\u09f6\u09f8\7\u01b1\2\2\u09f7\u09f6\3\2\2")
        buf.write("\2\u09f7\u09f8\3\2\2\2\u09f8\u0a00\3\2\2\2\u09f9\u09fb")
        buf.write("\7\u0187\2\2\u09fa\u09fc\7\u014b\2\2\u09fb\u09fa\3\2\2")
        buf.write("\2\u09fb\u09fc\3\2\2\2\u09fc\u09fd\3\2\2\2\u09fd\u0a01")
        buf.write("\5\u027a\u013e\2\u09fe\u09ff\7\u009a\2\2\u09ff\u0a01\5")
        buf.write("\u02d6\u016c\2\u0a00\u09f9\3\2\2\2\u0a00\u09fe\3\2\2\2")
        buf.write("\u0a00\u0a01\3\2\2\2\u0a01\u0131\3\2\2\2\u0a02\u0a03\7")
        buf.write("\u014b\2\2\u0a03\u0a04\5\u027a\u013e\2\u0a04\u0133\3\2")
        buf.write("\2\2\u0a05\u0a06\7\u008c\2\2\u0a06\u0a0b\7\u0122\2\2\u0a07")
        buf.write("\u0a08\7\u015b\2\2\u0a08\u0a09\7\u0171\2\2\u0a09\u0a0a")
        buf.write("\7\u0205\2\2\u0a0a\u0a0c\5\u02d6\u016c\2\u0a0b\u0a07\3")
        buf.write("\2\2\2\u0a0b\u0a0c\3\2\2\2\u0a0c\u0a0f\3\2\2\2\u0a0d\u0a0e")
        buf.write("\7\u00bd\2\2\u0a0e\u0a10\5\u02b0\u0159\2\u0a0f\u0a0d\3")
        buf.write("\2\2\2\u0a0f\u0a10\3\2\2\2\u0a10\u0a11\3\2\2\2\u0a11\u0a17")
        buf.write("\7\u0098\2\2\u0a12\u0a18\5\u0136\u009c\2\u0a13\u0a18\5")
        buf.write("\u01a8\u00d5\2\u0a14\u0a18\5\u01ae\u00d8\2\u0a15\u0a18")
        buf.write("\5\u01b0\u00d9\2\u0a16\u0a18\5\u01c2\u00e2\2\u0a17\u0a12")
        buf.write("\3\2\2\2\u0a17\u0a13\3\2\2\2\u0a17\u0a14\3\2\2\2\u0a17")
        buf.write("\u0a15\3\2\2\2\u0a17\u0a16\3\2\2\2\u0a18\u0135\3\2\2\2")
        buf.write("\u0a19\u0a1b\5\u0138\u009d\2\u0a1a\u0a19\3\2\2\2\u0a1a")
        buf.write("\u0a1b\3\2\2\2\u0a1b\u0a1c\3\2\2\2\u0a1c\u0a1d\5\u0140")
        buf.write("\u00a1\2\u0a1d\u0137\3\2\2\2\u0a1e\u0a1f\7\u01af\2\2\u0a1f")
        buf.write("\u0a24\5\u013a\u009e\2\u0a20\u0a21\7\u01f4\2\2\u0a21\u0a23")
        buf.write("\5\u013a\u009e\2\u0a22\u0a20\3\2\2\2\u0a23\u0a26\3\2\2")
        buf.write("\2\u0a24\u0a22\3\2\2\2\u0a24\u0a25\3\2\2\2\u0a25\u0139")
        buf.write("\3\2\2\2\u0a26\u0a24\3\2\2\2\u0a27\u0a33\5\u0290\u0149")
        buf.write("\2\u0a28\u0a29\7\u01ee\2\2\u0a29\u0a2e\5\u02ae\u0158\2")
        buf.write("\u0a2a\u0a2b\7\u01f4\2\2\u0a2b\u0a2d\5\u02ae\u0158\2\u0a2c")
        buf.write("\u0a2a\3\2\2\2\u0a2d\u0a30\3\2\2\2\u0a2e\u0a2c\3\2\2\2")
        buf.write("\u0a2e\u0a2f\3\2\2\2\u0a2f\u0a31\3\2\2\2\u0a30\u0a2e\3")
        buf.write("\2\2\2\u0a31\u0a32\7\u01ef\2\2\u0a32\u0a34\3\2\2\2\u0a33")
        buf.write("\u0a28\3\2\2\2\u0a33\u0a34\3\2\2\2\u0a34\u0a35\3\2\2\2")
        buf.write("\u0a35\u0a36\7\17\2\2\u0a36\u0a37\7\u01ee\2\2\u0a37\u0a39")
        buf.write("\5\u0140\u00a1\2\u0a38\u0a3a\5\u019c\u00cf\2\u0a39\u0a38")
        buf.write("\3\2\2\2\u0a39\u0a3a\3\2\2\2\u0a3a\u0a3b\3\2\2\2\u0a3b")
        buf.write("\u0a3d\7\u01ef\2\2\u0a3c\u0a3e\5\u013c\u009f\2\u0a3d\u0a3c")
        buf.write("\3\2\2\2\u0a3d\u0a3e\3\2\2\2\u0a3e\u0a40\3\2\2\2\u0a3f")
        buf.write("\u0a41\5\u013e\u00a0\2\u0a40\u0a3f\3\2\2\2\u0a40\u0a41")
        buf.write("\3\2\2\2\u0a41\u013b\3\2\2\2\u0a42\u0a43\7\u014f\2\2\u0a43")
        buf.write("\u0a44\t\37\2\2\u0a44\u0a45\7\u0093\2\2\u0a45\u0a46\7")
        buf.write("*\2\2\u0a46\u0a48\5\u02ae\u0158\2\u0a47\u0a49\7\22\2\2")
        buf.write("\u0a48\u0a47\3\2\2\2\u0a48\u0a49\3\2\2\2\u0a49\u0a4b\3")
        buf.write("\2\2\2\u0a4a\u0a4c\7l\2\2\u0a4b\u0a4a\3\2\2\2\u0a4b\u0a4c")
        buf.write("\3\2\2\2\u0a4c\u0a4f\3\2\2\2\u0a4d\u0a4e\7\u0101\2\2\u0a4e")
        buf.write("\u0a50\7\u0093\2\2\u0a4f\u0a4d\3\2\2\2\u0a4f\u0a50\3\2")
        buf.write("\2\2\u0a50\u0a53\3\2\2\2\u0a51\u0a52\7\u0101\2\2\u0a52")
        buf.write("\u0a54\7\u00c6\2\2\u0a53\u0a51\3\2\2\2\u0a53\u0a54\3\2")
        buf.write("\2\2\u0a54\u0a67\3\2\2\2\u0a55\u0a56\7\u01f4\2\2\u0a56")
        buf.write("\u0a58\5\u02ae\u0158\2\u0a57\u0a59\7\22\2\2\u0a58\u0a57")
        buf.write("\3\2\2\2\u0a58\u0a59\3\2\2\2\u0a59\u0a5b\3\2\2\2\u0a5a")
        buf.write("\u0a5c\7l\2\2\u0a5b\u0a5a\3\2\2\2\u0a5b\u0a5c\3\2\2\2")
        buf.write("\u0a5c\u0a5f\3\2\2\2\u0a5d\u0a5e\7\u0101\2\2\u0a5e\u0a60")
        buf.write("\7\u0093\2\2\u0a5f\u0a5d\3\2\2\2\u0a5f\u0a60\3\2\2\2\u0a60")
        buf.write("\u0a63\3\2\2\2\u0a61\u0a62\7\u0101\2\2\u0a62\u0a64\7\u00c6")
        buf.write("\2\2\u0a63\u0a61\3\2\2\2\u0a63\u0a64\3\2\2\2\u0a64\u0a66")
        buf.write("\3\2\2\2\u0a65\u0a55\3\2\2\2\u0a66\u0a69\3\2\2\2\u0a67")
        buf.write("\u0a65\3\2\2\2\u0a67\u0a68\3\2\2\2\u0a68\u0a6a\3\2\2\2")
        buf.write("\u0a69\u0a67\3\2\2\2\u0a6a\u0a6b\7\u015b\2\2\u0a6b\u0a6c")
        buf.write("\5\u02ae\u0158\2\u0a6c\u013d\3\2\2\2\u0a6d\u0a6e\7X\2")
        buf.write("\2\u0a6e\u0a73\5\u02ae\u0158\2\u0a6f\u0a70\7\u01f4\2\2")
        buf.write("\u0a70\u0a72\5\u02ae\u0158\2\u0a71\u0a6f\3\2\2\2\u0a72")
        buf.write("\u0a75\3\2\2\2\u0a73\u0a71\3\2\2\2\u0a73\u0a74\3\2\2\2")
        buf.write("\u0a74\u0a76\3\2\2\2\u0a75\u0a73\3\2\2\2\u0a76\u0a77\7")
        buf.write("\u015b\2\2\u0a77\u0a78\5\u02ae\u0158\2\u0a78\u0a79\7\u0187")
        buf.write("\2\2\u0a79\u0a7a\5\u01f0\u00f9\2\u0a7a\u0a7b\7f\2\2\u0a7b")
        buf.write("\u0a7c\5\u01f0\u00f9\2\u0a7c\u013f\3\2\2\2\u0a7d\u0a7e")
        buf.write("\b\u00a1\1\2\u0a7e\u0a7f\7\u01ee\2\2\u0a7f\u0a80\5\u0140")
        buf.write("\u00a1\2\u0a80\u0a81\7\u01ef\2\2\u0a81\u0a84\3\2\2\2\u0a82")
        buf.write("\u0a84\5\u0144\u00a3\2\u0a83\u0a7d\3\2\2\2\u0a83\u0a82")
        buf.write("\3\2\2\2\u0a84\u0a8d\3\2\2\2\u0a85\u0a86\f\4\2\2\u0a86")
        buf.write("\u0a87\5\u0142\u00a2\2\u0a87\u0a89\5\u0140\u00a1\2\u0a88")
        buf.write("\u0a8a\5\u019c\u00cf\2\u0a89\u0a88\3\2\2\2\u0a89\u0a8a")
        buf.write("\3\2\2\2\u0a8a\u0a8c\3\2\2\2\u0a8b\u0a85\3\2\2\2\u0a8c")
        buf.write("\u0a8f\3\2\2\2\u0a8d\u0a8b\3\2\2\2\u0a8d\u0a8e\3\2\2\2")
        buf.write("\u0a8e\u0141\3\2\2\2\u0a8f\u0a8d\3\2\2\2\u0a90\u0a92\t")
        buf.write(" \2\2\u0a91\u0a93\7\t\2\2\u0a92\u0a91\3\2\2\2\u0a92\u0a93")
        buf.write("\3\2\2\2\u0a93\u0143\3\2\2\2\u0a94\u0a96\7\u0153\2\2\u0a95")
        buf.write("\u0a97\t!\2\2\u0a96\u0a95\3\2\2\2\u0a96\u0a97\3\2\2\2")
        buf.write("\u0a97\u0a98\3\2\2\2\u0a98\u0a9d\5\u0146\u00a4\2\u0a99")
        buf.write("\u0a9a\7\u01f4\2\2\u0a9a\u0a9c\5\u0146\u00a4\2\u0a9b\u0a99")
        buf.write("\3\2\2\2\u0a9c\u0a9f\3\2\2\2\u0a9d\u0a9b\3\2\2\2\u0a9d")
        buf.write("\u0a9e\3\2\2\2\u0a9e\u0aa1\3\2\2\2\u0a9f\u0a9d\3\2\2\2")
        buf.write("\u0aa0\u0aa2\5\u0272\u013a\2\u0aa1\u0aa0\3\2\2\2\u0aa1")
        buf.write("\u0aa2\3\2\2\2\u0aa2\u0aa3\3\2\2\2\u0aa3\u0aa5\5\u0148")
        buf.write("\u00a5\2\u0aa4\u0aa6\5\u026e\u0138\2\u0aa5\u0aa4\3\2\2")
        buf.write("\2\u0aa5\u0aa6\3\2\2\2\u0aa6\u0aa8\3\2\2\2\u0aa7\u0aa9")
        buf.write("\5\u016e\u00b8\2\u0aa8\u0aa7\3\2\2\2\u0aa8\u0aa9\3\2\2")
        buf.write("\2\u0aa9\u0aae\3\2\2\2\u0aaa\u0aad\5\u0172\u00ba\2\u0aab")
        buf.write("\u0aad\5\u017c\u00bf\2\u0aac\u0aaa\3\2\2\2\u0aac\u0aab")
        buf.write("\3\2\2\2\u0aad\u0ab0\3\2\2\2\u0aae\u0aac\3\2\2\2\u0aae")
        buf.write("\u0aaf\3\2\2\2\u0aaf\u0ab2\3\2\2\2\u0ab0\u0aae\3\2\2\2")
        buf.write("\u0ab1\u0ab3\5\u017e\u00c0\2\u0ab2\u0ab1\3\2\2\2\u0ab2")
        buf.write("\u0ab3\3\2\2\2\u0ab3\u0ab9\3\2\2\2\u0ab4\u0ab8\5\u01a0")
        buf.write("\u00d1\2\u0ab5\u0ab8\5\u019c\u00cf\2\u0ab6\u0ab8\5\u01a6")
        buf.write("\u00d4\2\u0ab7\u0ab4\3\2\2\2\u0ab7\u0ab5\3\2\2\2\u0ab7")
        buf.write("\u0ab6\3\2\2\2\u0ab8\u0abb\3\2\2\2\u0ab9\u0ab7\3\2\2\2")
        buf.write("\u0ab9\u0aba\3\2\2\2\u0aba\u0145\3\2\2\2\u0abb\u0ab9\3")
        buf.write("\2\2\2\u0abc\u0ac7\5\u02b4\u015b\2\u0abd\u0abe\5\u02b2")
        buf.write("\u015a\2\u0abe\u0abf\7\u01e7\2\2\u0abf\u0ac0\5\u02b4\u015b")
        buf.write("\2\u0ac0\u0ac7\3\2\2\2\u0ac1\u0ac7\5\u02b0\u0159\2\u0ac2")
        buf.write("\u0ac4\5\u01f0\u00f9\2\u0ac3\u0ac5\5\u0268\u0135\2\u0ac4")
        buf.write("\u0ac3\3\2\2\2\u0ac4\u0ac5\3\2\2\2\u0ac5\u0ac7\3\2\2\2")
        buf.write("\u0ac6\u0abc\3\2\2\2\u0ac6\u0abd\3\2\2\2\u0ac6\u0ac1\3")
        buf.write("\2\2\2\u0ac6\u0ac2\3\2\2\2\u0ac7\u0147\3\2\2\2\u0ac8\u0ac9")
        buf.write("\7\u009b\2\2\u0ac9\u0ace\5\u014c\u00a7\2\u0aca\u0acb\7")
        buf.write("\u01f4\2\2\u0acb\u0acd\5\u014c\u00a7\2\u0acc\u0aca\3\2")
        buf.write("\2\2\u0acd\u0ad0\3\2\2\2\u0ace\u0acc\3\2\2\2\u0ace\u0acf")
        buf.write("\3\2\2\2\u0acf\u0149\3\2\2\2\u0ad0\u0ace\3\2\2\2\u0ad1")
        buf.write("\u0ad4\5\u014c\u00a7\2\u0ad2\u0ad5\5\u015c\u00af\2\u0ad3")
        buf.write("\u0ad5\5\u0168\u00b5\2\u0ad4\u0ad2\3\2\2\2\u0ad4\u0ad3")
        buf.write("\3\2\2\2\u0ad4\u0ad5\3\2\2\2\u0ad5\u014b\3\2\2\2\u0ad6")
        buf.write("\u0ad7\b\u00a7\1\2\u0ad7\u0adb\5\u014e\u00a8\2\u0ad8\u0ada")
        buf.write("\5\u015a\u00ae\2\u0ad9\u0ad8\3\2\2\2\u0ada\u0add\3\2\2")
        buf.write("\2\u0adb\u0ad9\3\2\2\2\u0adb\u0adc\3\2\2\2\u0adc\u0ae9")
        buf.write("\3\2\2\2\u0add\u0adb\3\2\2\2\u0ade\u0ae2\5\u014e\u00a8")
        buf.write("\2\u0adf\u0ae1\5\u015a\u00ae\2\u0ae0\u0adf\3\2\2\2\u0ae1")
        buf.write("\u0ae4\3\2\2\2\u0ae2\u0ae0\3\2\2\2\u0ae2\u0ae3\3\2\2\2")
        buf.write("\u0ae3\u0ae6\3\2\2\2\u0ae4\u0ae2\3\2\2\2\u0ae5\u0ae7\5")
        buf.write("\u026a\u0136\2\u0ae6\u0ae5\3\2\2\2\u0ae6\u0ae7\3\2\2\2")
        buf.write("\u0ae7\u0ae9\3\2\2\2\u0ae8\u0ad6\3\2\2\2\u0ae8\u0ade\3")
        buf.write("\2\2\2\u0ae9\u0aee\3\2\2\2\u0aea\u0aeb\f\5\2\2\u0aeb\u0aed")
        buf.write("\5\u0150\u00a9\2\u0aec\u0aea\3\2\2\2\u0aed\u0af0\3\2\2")
        buf.write("\2\u0aee\u0aec\3\2\2\2\u0aee\u0aef\3\2\2\2\u0aef\u014d")
        buf.write("\3\2\2\2\u0af0\u0aee\3\2\2\2\u0af1\u0af4\5\u01e0\u00f1")
        buf.write("\2\u0af2\u0af5\5\u015c\u00af\2\u0af3\u0af5\5\u0168\u00b5")
        buf.write("\2\u0af4\u0af2\3\2\2\2\u0af4\u0af3\3\2\2\2\u0af4\u0af5")
        buf.write("\3\2\2\2\u0af5\u0afc\3\2\2\2\u0af6\u0af7\7\u010b\2\2\u0af7")
        buf.write("\u0af8\7\u01ee\2\2\u0af8\u0af9\5\u01e0\u00f1\2\u0af9\u0afa")
        buf.write("\7\u01ef\2\2\u0afa\u0afc\3\2\2\2\u0afb\u0af1\3\2\2\2\u0afb")
        buf.write("\u0af6\3\2\2\2\u0afc\u014f\3\2\2\2\u0afd\u0aff\5\u0158")
        buf.write("\u00ad\2\u0afe\u0afd\3\2\2\2\u0afe\u0aff\3\2\2\2\u0aff")
        buf.write("\u0b01\3\2\2\2\u0b00\u0b02\5\u0156\u00ac\2\u0b01\u0b00")
        buf.write("\3\2\2\2\u0b01\u0b02\3\2\2\2\u0b02\u0b03\3\2\2\2\u0b03")
        buf.write("\u0b04\7\u00c3\2\2\u0b04\u0b06\5\u014c\u00a7\2\u0b05\u0b07")
        buf.write("\5\u0158\u00ad\2\u0b06\u0b05\3\2\2\2\u0b06\u0b07\3\2\2")
        buf.write("\2\u0b07\u0b0a\3\2\2\2\u0b08\u0b0b\5\u0152\u00aa\2\u0b09")
        buf.write("\u0b0b\5\u0154\u00ab\2\u0b0a\u0b08\3\2\2\2\u0b0a\u0b09")
        buf.write("\3\2\2\2\u0b0a\u0b0b\3\2\2\2\u0b0b\u0151\3\2\2\2\u0b0c")
        buf.write("\u0b0d\7\u010a\2\2\u0b0d\u0b0e\5\u01ee\u00f8\2\u0b0e\u0153")
        buf.write("\3\2\2\2\u0b0f\u0b10\7\u019d\2\2\u0b10\u0b11\7\u01ee\2")
        buf.write("\2\u0b11\u0b16\5\u02ae\u0158\2\u0b12\u0b13\7\u01f4\2\2")
        buf.write("\u0b13\u0b15\5\u02ae\u0158\2\u0b14\u0b12\3\2\2\2\u0b15")
        buf.write("\u0b18\3\2\2\2\u0b16\u0b14\3\2\2\2\u0b16\u0b17\3\2\2\2")
        buf.write("\u0b17\u0b19\3\2\2\2\u0b18\u0b16\3\2\2\2\u0b19\u0b1a\7")
        buf.write("\u01ef\2\2\u0b1a\u0155\3\2\2\2\u0b1b\u0b27\7R\2\2\u0b1c")
        buf.write("\u0b1e\7\u00eb\2\2\u0b1d\u0b1c\3\2\2\2\u0b1d\u0b1e\3\2")
        buf.write("\2\2\u0b1e\u0b24\3\2\2\2\u0b1f\u0b25\7\u00b4\2\2\u0b20")
        buf.write("\u0b22\t\"\2\2\u0b21\u0b23\7\u0114\2\2\u0b22\u0b21\3\2")
        buf.write("\2\2\u0b22\u0b23\3\2\2\2\u0b23\u0b25\3\2\2\2\u0b24\u0b1f")
        buf.write("\3\2\2\2\u0b24\u0b20\3\2\2\2\u0b25\u0b27\3\2\2\2\u0b26")
        buf.write("\u0b1b\3\2\2\2\u0b26\u0b1d\3\2\2\2\u0b27\u0157\3\2\2\2")
        buf.write("\u0b28\u0b29\7\u011b\2\2\u0b29\u0b37\7*\2\2\u0b2a\u0b2b")
        buf.write("\7\u01ee\2\2\u0b2b\u0b2c\5\u0140\u00a1\2\u0b2c\u0b2d\7")
        buf.write("\u01ef\2\2\u0b2d\u0b38\3\2\2\2\u0b2e\u0b38\5\u01ec\u00f7")
        buf.write("\2\u0b2f\u0b34\5\u01f0\u00f9\2\u0b30\u0b31\7\u01f4\2\2")
        buf.write("\u0b31\u0b33\5\u01f0\u00f9\2\u0b32\u0b30\3\2\2\2\u0b33")
        buf.write("\u0b36\3\2\2\2\u0b34\u0b32\3\2\2\2\u0b34\u0b35\3\2\2\2")
        buf.write("\u0b35\u0b38\3\2\2\2\u0b36\u0b34\3\2\2\2\u0b37\u0b2a\3")
        buf.write("\2\2\2\u0b37\u0b2e\3\2\2\2\u0b37\u0b2f\3\2\2\2\u0b38\u0159")
        buf.write("\3\2\2\2\u0b39\u0b3a\7\u01a7\2\2\u0b3a\u0b3b\7\36\2\2")
        buf.write("\u0b3b\u0b3c\t#\2\2\u0b3c\u0b42\5\u01f0\u00f9\2\u0b3d")
        buf.write("\u0b3e\7\17\2\2\u0b3e\u0b3f\7\u0106\2\2\u0b3f\u0b40\t")
        buf.write("$\2\2\u0b40\u0b42\5\u01f0\u00f9\2\u0b41\u0b39\3\2\2\2")
        buf.write("\u0b41\u0b3d\3\2\2\2\u0b42\u015b\3\2\2\2\u0b43\u0b45\7")
        buf.write("\u0121\2\2\u0b44\u0b46\7\u01b3\2\2\u0b45\u0b44\3\2\2\2")
        buf.write("\u0b45\u0b46\3\2\2\2\u0b46\u0b47\3\2\2\2\u0b47\u0b48\7")
        buf.write("\u01ee\2\2\u0b48\u0b4d\5\u015e\u00b0\2\u0b49\u0b4a\7\u01f4")
        buf.write("\2\2\u0b4a\u0b4c\5\u015e\u00b0\2\u0b4b\u0b49\3\2\2\2\u0b4c")
        buf.write("\u0b4f\3\2\2\2\u0b4d\u0b4b\3\2\2\2\u0b4d\u0b4e\3\2\2\2")
        buf.write("\u0b4e\u0b50\3\2\2\2\u0b4f\u0b4d\3\2\2\2\u0b50\u0b51\5")
        buf.write("\u0160\u00b1\2\u0b51\u0b52\5\u0162\u00b2\2\u0b52\u0b53")
        buf.write("\7\u01ef\2\2\u0b53\u015d\3\2\2\2\u0b54\u0b55\5\u028e\u0148")
        buf.write("\2\u0b55\u0b56\7\u01ee\2\2\u0b56\u0b57\5\u01f0\u00f9\2")
        buf.write("\u0b57\u0b59\7\u01ef\2\2\u0b58\u0b5a\5\u0268\u0135\2\u0b59")
        buf.write("\u0b58\3\2\2\2\u0b59\u0b5a\3\2\2\2\u0b5a\u015f\3\2\2\2")
        buf.write("\u0b5b\u0b68\7\u0098\2\2\u0b5c\u0b69\5\u02ae\u0158\2\u0b5d")
        buf.write("\u0b5e\7\u01ee\2\2\u0b5e\u0b63\5\u02ae\u0158\2\u0b5f\u0b60")
        buf.write("\7\u01f4\2\2\u0b60\u0b62\5\u02ae\u0158\2\u0b61\u0b5f\3")
        buf.write("\2\2\2\u0b62\u0b65\3\2\2\2\u0b63\u0b61\3\2\2\2\u0b63\u0b64")
        buf.write("\3\2\2\2\u0b64\u0b66\3\2\2\2\u0b65\u0b63\3\2\2\2\u0b66")
        buf.write("\u0b67\7\u01ef\2\2\u0b67\u0b69\3\2\2\2\u0b68\u0b5c\3\2")
        buf.write("\2\2\u0b68\u0b5d\3\2\2\2\u0b69\u0161\3\2\2\2\u0b6a\u0b6b")
        buf.write("\7\u00a9\2\2\u0b6b\u0b7d\7\u01ee\2\2\u0b6c\u0b7e\5\u0140")
        buf.write("\u00a1\2\u0b6d\u0b72\7\r\2\2\u0b6e\u0b6f\7\u01f4\2\2\u0b6f")
        buf.write("\u0b71\7\r\2\2\u0b70\u0b6e\3\2\2\2\u0b71\u0b74\3\2\2\2")
        buf.write("\u0b72\u0b70\3\2\2\2\u0b72\u0b73\3\2\2\2\u0b73\u0b7e\3")
        buf.write("\2\2\2\u0b74\u0b72\3\2\2\2\u0b75\u0b7a\5\u0164\u00b3\2")
        buf.write("\u0b76\u0b77\7\u01f4\2\2\u0b77\u0b79\5\u0164\u00b3\2\u0b78")
        buf.write("\u0b76\3\2\2\2\u0b79\u0b7c\3\2\2\2\u0b7a\u0b78\3\2\2\2")
        buf.write("\u0b7a\u0b7b\3\2\2\2\u0b7b\u0b7e\3\2\2\2\u0b7c\u0b7a\3")
        buf.write("\2\2\2\u0b7d\u0b6c\3\2\2\2\u0b7d\u0b6d\3\2\2\2\u0b7d\u0b75")
        buf.write("\3\2\2\2\u0b7e\u0b7f\3\2\2\2\u0b7f\u0b80\7\u01ef\2\2\u0b80")
        buf.write("\u0163\3\2\2\2\u0b81\u0b83\5\u0166\u00b4\2\u0b82\u0b84")
        buf.write("\5\u0268\u0135\2\u0b83\u0b82\3\2\2\2\u0b83\u0b84\3\2\2")
        buf.write("\2\u0b84\u0165\3\2\2\2\u0b85\u0b88\5\u01f0\u00f9\2\u0b86")
        buf.write("\u0b88\5\u01ec\u00f7\2\u0b87\u0b85\3\2\2\2\u0b87\u0b86")
        buf.write("\3\2\2\2\u0b88\u0167\3\2\2\2\u0b89\u0b8c\7\u0196\2\2\u0b8a")
        buf.write("\u0b8b\t%\2\2\u0b8b\u0b8d\7\u0101\2\2\u0b8c\u0b8a\3\2")
        buf.write("\2\2\u0b8c\u0b8d\3\2\2\2\u0b8d\u0b8e\3\2\2\2\u0b8e\u0b9b")
        buf.write("\7\u01ee\2\2\u0b8f\u0b9c\5\u02ae\u0158\2\u0b90\u0b91\7")
        buf.write("\u01ee\2\2\u0b91\u0b96\5\u02ae\u0158\2\u0b92\u0b93\7\u01f4")
        buf.write("\2\2\u0b93\u0b95\5\u02ae\u0158\2\u0b94\u0b92\3\2\2\2\u0b95")
        buf.write("\u0b98\3\2\2\2\u0b96\u0b94\3\2\2\2\u0b96\u0b97\3\2\2\2")
        buf.write("\u0b97\u0b99\3\2\2\2\u0b98\u0b96\3\2\2\2\u0b99\u0b9a\7")
        buf.write("\u01ef\2\2\u0b9a\u0b9c\3\2\2\2\u0b9b\u0b8f\3\2\2\2\u0b9b")
        buf.write("\u0b90\3\2\2\2\u0b9c\u0b9d\3\2\2\2\u0b9d\u0b9e\5\u0160")
        buf.write("\u00b1\2\u0b9e\u0b9f\5\u016a\u00b6\2\u0b9f\u0ba0\7\u01ef")
        buf.write("\2\2\u0ba0\u0169\3\2\2\2\u0ba1\u0ba2\7\u00a9\2\2\u0ba2")
        buf.write("\u0ba3\7\u01ee\2\2\u0ba3\u0ba8\5\u016c\u00b7\2\u0ba4\u0ba5")
        buf.write("\7\u01f4\2\2\u0ba5\u0ba7\5\u016c\u00b7\2\u0ba6\u0ba4\3")
        buf.write("\2\2\2\u0ba7\u0baa\3\2\2\2\u0ba8\u0ba6\3\2\2\2\u0ba8\u0ba9")
        buf.write("\3\2\2\2\u0ba9\u0bab\3\2\2\2\u0baa\u0ba8\3\2\2\2\u0bab")
        buf.write("\u0bac\7\u01ef\2\2\u0bac\u016b\3\2\2\2\u0bad\u0bba\5\u02ae")
        buf.write("\u0158\2\u0bae\u0baf\7\u01ee\2\2\u0baf\u0bb4\5\u02ae\u0158")
        buf.write("\2\u0bb0\u0bb1\7\u01f4\2\2\u0bb1\u0bb3\5\u02ae\u0158\2")
        buf.write("\u0bb2\u0bb0\3\2\2\2\u0bb3\u0bb6\3\2\2\2\u0bb4\u0bb2\3")
        buf.write("\2\2\2\u0bb4\u0bb5\3\2\2\2\u0bb5\u0bb7\3\2\2\2\u0bb6\u0bb4")
        buf.write("\3\2\2\2\u0bb7\u0bb8\7\u01ef\2\2\u0bb8\u0bba\3\2\2\2\u0bb9")
        buf.write("\u0bad\3\2\2\2\u0bb9\u0bae\3\2\2\2\u0bba\u0bca\3\2\2\2")
        buf.write("\u0bbb\u0bc8\7\17\2\2\u0bbc\u0bc9\5\u02d0\u0169\2\u0bbd")
        buf.write("\u0bbe\7\u01ee\2\2\u0bbe\u0bc3\5\u02d0\u0169\2\u0bbf\u0bc0")
        buf.write("\7\u01f4\2\2\u0bc0\u0bc2\5\u02d0\u0169\2\u0bc1\u0bbf\3")
        buf.write("\2\2\2\u0bc2\u0bc5\3\2\2\2\u0bc3\u0bc1\3\2\2\2\u0bc3\u0bc4")
        buf.write("\3\2\2\2\u0bc4\u0bc6\3\2\2\2\u0bc5\u0bc3\3\2\2\2\u0bc6")
        buf.write("\u0bc7\7\u01ef\2\2\u0bc7\u0bc9\3\2\2\2\u0bc8\u0bbc\3\2")
        buf.write("\2\2\u0bc8\u0bbd\3\2\2\2\u0bc9\u0bcb\3\2\2\2\u0bca\u0bbb")
        buf.write("\3\2\2\2\u0bca\u0bcb\3\2\2\2\u0bcb\u016d\3\2\2\2\u0bcc")
        buf.write("\u0bcd\7C\2\2\u0bcd\u0bcf\7*\2\2\u0bce\u0bd0\7\u00f7\2")
        buf.write("\2\u0bcf\u0bce\3\2\2\2\u0bcf\u0bd0\3\2\2\2\u0bd0\u0bd1")
        buf.write("\3\2\2\2\u0bd1\u0bd3\5\u01ee\u00f8\2\u0bd2\u0bd4\5\u0170")
        buf.write("\u00b9\2\u0bd3\u0bd2\3\2\2\2\u0bd3\u0bd4\3\2\2\2\u0bd4")
        buf.write("\u0bde\3\2\2\2\u0bd5\u0bd6\5\u0170\u00b9\2\u0bd6\u0bd7")
        buf.write("\7C\2\2\u0bd7\u0bd9\7*\2\2\u0bd8\u0bda\7\u00f7\2\2\u0bd9")
        buf.write("\u0bd8\3\2\2\2\u0bd9\u0bda\3\2\2\2\u0bda\u0bdb\3\2\2\2")
        buf.write("\u0bdb\u0bdc\5\u01ee\u00f8\2\u0bdc\u0bde\3\2\2\2\u0bdd")
        buf.write("\u0bcc\3\2\2\2\u0bdd\u0bd5\3\2\2\2\u0bde\u016f\3\2\2\2")
        buf.write("\u0bdf\u0be0\7\u016e\2\2\u0be0\u0be1\7\u01af\2\2\u0be1")
        buf.write("\u0be2\5\u01ee\u00f8\2\u0be2\u0171\3\2\2\2\u0be3\u0be4")
        buf.write("\7\u00a0\2\2\u0be4\u0be5\7*\2\2\u0be5\u0bea\5\u0174\u00bb")
        buf.write("\2\u0be6\u0be7\7\u01f4\2\2\u0be7\u0be9\5\u0174\u00bb\2")
        buf.write("\u0be8\u0be6\3\2\2\2\u0be9\u0bec\3\2\2\2\u0bea\u0be8\3")
        buf.write("\2\2\2\u0bea\u0beb\3\2\2\2\u0beb\u0173\3\2\2\2\u0bec\u0bea")
        buf.write("\3\2\2\2\u0bed\u0bf1\5\u0178\u00bd\2\u0bee\u0bf1\5\u0176")
        buf.write("\u00bc\2\u0bef\u0bf1\5\u01f0\u00f9\2\u0bf0\u0bed\3\2\2")
        buf.write("\2\u0bf0\u0bee\3\2\2\2\u0bf0\u0bef\3\2\2\2\u0bf1\u0175")
        buf.write("\3\2\2\2\u0bf2\u0bf3\t&\2\2\u0bf3\u0bf4\7\u01ee\2\2\u0bf4")
        buf.write("\u0bf9\5\u017a\u00be\2\u0bf5\u0bf6\7\u01f4\2\2\u0bf6\u0bf8")
        buf.write("\5\u017a\u00be\2\u0bf7\u0bf5\3\2\2\2\u0bf8\u0bfb\3\2\2")
        buf.write("\2\u0bf9\u0bf7\3\2\2\2\u0bf9\u0bfa\3\2\2\2\u0bfa\u0bfc")
        buf.write("\3\2\2\2\u0bfb\u0bf9\3\2\2\2\u0bfc\u0bfd\7\u01ef\2\2\u0bfd")
        buf.write("\u0177\3\2\2\2\u0bfe\u0bff\7\u00a1\2\2\u0bff\u0c00\7\u015c")
        buf.write("\2\2\u0c00\u0c01\7\u01ee\2\2\u0c01\u0c06\5\u017a\u00be")
        buf.write("\2\u0c02\u0c03\7\u01f4\2\2\u0c03\u0c05\5\u017a\u00be\2")
        buf.write("\u0c04\u0c02\3\2\2\2\u0c05\u0c08\3\2\2\2\u0c06\u0c04\3")
        buf.write("\2\2\2\u0c06\u0c07\3\2\2\2\u0c07\u0c09\3\2\2\2\u0c08\u0c06")
        buf.write("\3\2\2\2\u0c09\u0c0a\7\u01ef\2\2\u0c0a\u0179\3\2\2\2\u0c0b")
        buf.write("\u0c0f\5\u0176\u00bc\2\u0c0c\u0c0f\5\u01ec\u00f7\2\u0c0d")
        buf.write("\u0c0f\5\u01f0\u00f9\2\u0c0e\u0c0b\3\2\2\2\u0c0e\u0c0c")
        buf.write("\3\2\2\2\u0c0e\u0c0d\3\2\2\2\u0c0f\u017b\3\2\2\2\u0c10")
        buf.write("\u0c11\7\u00a3\2\2\u0c11\u0c12\5\u01ee\u00f8\2\u0c12\u017d")
        buf.write("\3\2\2\2\u0c13\u0c17\7\u00e5\2\2\u0c14\u0c16\5\u0180\u00c1")
        buf.write("\2\u0c15\u0c14\3\2\2\2\u0c16\u0c19\3\2\2\2\u0c17\u0c15")
        buf.write("\3\2\2\2\u0c17\u0c18\3\2\2\2\u0c18\u0c1b\3\2\2\2\u0c19")
        buf.write("\u0c17\3\2\2\2\u0c1a\u0c1c\5\u0182\u00c2\2\u0c1b\u0c1a")
        buf.write("\3\2\2\2\u0c1b\u0c1c\3\2\2\2\u0c1c\u0c20\3\2\2\2\u0c1d")
        buf.write("\u0c1f\5\u0184\u00c3\2\u0c1e\u0c1d\3\2\2\2\u0c1f\u0c22")
        buf.write("\3\2\2\2\u0c20\u0c1e\3\2\2\2\u0c20\u0c21\3\2\2\2\u0c21")
        buf.write("\u0c23\3\2\2\2\u0c22\u0c20\3\2\2\2\u0c23\u0c24\5\u0186")
        buf.write("\u00c4\2\u0c24\u017f\3\2\2\2\u0c25\u0c26\t\'\2\2\u0c26")
        buf.write("\u0c2e\7\u00ed\2\2\u0c27\u0c2b\7\u0194\2\2\u0c28\u0c2c")
        buf.write("\7n\2\2\u0c29\u0c2a\7\u0164\2\2\u0c2a\u0c2c\7\u0133\2")
        buf.write("\2\u0c2b\u0c28\3\2\2\2\u0c2b\u0c29\3\2\2\2\u0c2c\u0c2e")
        buf.write("\3\2\2\2\u0c2d\u0c25\3\2\2\2\u0c2d\u0c27\3\2\2\2\u0c2e")
        buf.write("\u0181\3\2\2\2\u0c2f\u0c30\7\u013d\2\2\u0c30\u0c31\t(")
        buf.write("\2\2\u0c31\u0c32\7\u0147\2\2\u0c32\u0183\3\2\2\2\u0c33")
        buf.write("\u0c34\7\u0133\2\2\u0c34\u0c35\5\u028a\u0146\2\u0c35\u0c36")
        buf.write("\7\u010a\2\2\u0c36\u0c37\7\u01ee\2\2\u0c37\u0c38\5\u0140")
        buf.write("\u00a1\2\u0c38\u0c39\7\u01ef\2\2\u0c39\u0c3d\5\u0188\u00c5")
        buf.write("\2\u0c3a\u0c3c\5\u0180\u00c1\2\u0c3b\u0c3a\3\2\2\2\u0c3c")
        buf.write("\u0c3f\3\2\2\2\u0c3d\u0c3b\3\2\2\2\u0c3d\u0c3e\3\2\2\2")
        buf.write("\u0c3e\u0185\3\2\2\2\u0c3f\u0c3d\3\2\2\2\u0c40\u0c41\7")
        buf.write("\u00d9\2\2\u0c41\u0c43\5\u028c\u0147\2\u0c42\u0c40\3\2")
        buf.write("\2\2\u0c42\u0c43\3\2\2\2\u0c43\u0c44\3\2\2\2\u0c44\u0c48")
        buf.write("\5\u0188\u00c5\2\u0c45\u0c47\5\u0180\u00c1\2\u0c46\u0c45")
        buf.write("\3\2\2\2\u0c47\u0c4a\3\2\2\2\u0c48\u0c46\3\2\2\2\u0c48")
        buf.write("\u0c49\3\2\2\2\u0c49\u0c4b\3\2\2\2\u0c4a\u0c48\3\2\2\2")
        buf.write("\u0c4b\u0c4c\5\u0190\u00c9\2\u0c4c\u0187\3\2\2\2\u0c4d")
        buf.write("\u0c4f\5\u018a\u00c6\2\u0c4e\u0c4d\3\2\2\2\u0c4e\u0c4f")
        buf.write("\3\2\2\2\u0c4f\u0c50\3\2\2\2\u0c50\u0c51\7n\2\2\u0c51")
        buf.write("\u0c52\7*\2\2\u0c52\u0c53\5\u018c\u00c7\2\u0c53\u0c54")
        buf.write("\7\u00dd\2\2\u0c54\u0c55\5\u018c\u00c7\2\u0c55\u0189\3")
        buf.write("\2\2\2\u0c56\u0c57\7\u011b\2\2\u0c57\u0c58\7*\2\2\u0c58")
        buf.write("\u0c59\5\u018c\u00c7\2\u0c59\u018b\3\2\2\2\u0c5a\u0c5b")
        buf.write("\7\u01ee\2\2\u0c5b\u0c60\5\u018e\u00c8\2\u0c5c\u0c5d\7")
        buf.write("\u01f4\2\2\u0c5d\u0c5f\5\u018e\u00c8\2\u0c5e\u0c5c\3\2")
        buf.write("\2\2\u0c5f\u0c62\3\2\2\2\u0c60\u0c5e\3\2\2\2\u0c60\u0c61")
        buf.write("\3\2\2\2\u0c61\u0c63\3\2\2\2\u0c62\u0c60\3\2\2\2\u0c63")
        buf.write("\u0c64\7\u01ef\2\2\u0c64\u018d\3\2\2\2\u0c65\u0c67\5\u01f0")
        buf.write("\u00f9\2\u0c66\u0c68\5\u026a\u0136\2\u0c67\u0c66\3\2\2")
        buf.write("\2\u0c67\u0c68\3\2\2\2\u0c68\u018f\3\2\2\2\u0c69\u0c6b")
        buf.write("\5\u0192\u00ca\2\u0c6a\u0c69\3\2\2\2\u0c6a\u0c6b\3\2\2")
        buf.write("\2\u0c6b\u0c6c\3\2\2\2\u0c6c\u0c6d\7\u01ee\2\2\u0c6d\u0c72")
        buf.write("\5\u0194\u00cb\2\u0c6e\u0c6f\7\u01f4\2\2\u0c6f\u0c71\5")
        buf.write("\u0194\u00cb\2\u0c70\u0c6e\3\2\2\2\u0c71\u0c74\3\2\2\2")
        buf.write("\u0c72\u0c70\3\2\2\2\u0c72\u0c73\3\2\2\2\u0c73\u0c75\3")
        buf.write("\2\2\2\u0c74\u0c72\3\2\2\2\u0c75\u0c76\7\u01ef\2\2\u0c76")
        buf.write("\u0191\3\2\2\2\u0c77\u0c7d\7\u0148\2\2\u0c78\u0c7e\7\u0198")
        buf.write("\2\2\u0c79\u0c7b\7\u019a\2\2\u0c7a\u0c7c\7\t\2\2\u0c7b")
        buf.write("\u0c7a\3\2\2\2\u0c7b\u0c7c\3\2\2\2\u0c7c\u0c7e\3\2\2\2")
        buf.write("\u0c7d\u0c78\3\2\2\2\u0c7d\u0c79\3\2\2\2\u0c7d\u0c7e\3")
        buf.write("\2\2\2\u0c7e\u0c81\3\2\2\2\u0c7f\u0c80\t)\2\2\u0c80\u0c82")
        buf.write("\7\u0110\2\2\u0c81\u0c7f\3\2\2\2\u0c81\u0c82\3\2\2\2\u0c82")
        buf.write("\u0c84\3\2\2\2\u0c83\u0c85\5\u0198\u00cd\2\u0c84\u0c83")
        buf.write("\3\2\2\2\u0c84\u0c85\3\2\2\2\u0c85\u0193\3\2\2\2\u0c86")
        buf.write("\u0c8c\7\u0198\2\2\u0c87\u0c89\7\u019a\2\2\u0c88\u0c8a")
        buf.write("\7\t\2\2\u0c89\u0c88\3\2\2\2\u0c89\u0c8a\3\2\2\2\u0c8a")
        buf.write("\u0c8c\3\2\2\2\u0c8b\u0c86\3\2\2\2\u0c8b\u0c87\3\2\2\2")
        buf.write("\u0c8b\u0c8c\3\2\2\2\u0c8c\u0c8d\3\2\2\2\u0c8d\u0c8f\5")
        buf.write("\u0196\u00cc\2\u0c8e\u0c90\5\u019c\u00cf\2\u0c8f\u0c8e")
        buf.write("\3\2\2\2\u0c8f\u0c90\3\2\2\2\u0c90\u0c91\3\2\2\2\u0c91")
        buf.write("\u0c92\7\u0205\2\2\u0c92\u0c93\5\u01f0\u00f9\2\u0c93\u0195")
        buf.write("\3\2\2\2\u0c94\u0c95\5\u0206\u0104\2\u0c95\u0197\3\2\2")
        buf.write("\2\u0c96\u0c97\7\u00c1\2\2\u0c97\u0c98\7\u01ee\2\2\u0c98")
        buf.write("\u0c99\5\u01f0\u00f9\2\u0c99\u0c9b\7\u01ef\2\2\u0c9a\u0c9c")
        buf.write("\5\u019a\u00ce\2\u0c9b\u0c9a\3\2\2\2\u0c9b\u0c9c\3\2\2")
        buf.write("\2\u0c9c\u0199\3\2\2\2\u0c9d\u0c9e\7\u0197\2\2\u0c9e\u0c9f")
        buf.write("\7\u01ee\2\2\u0c9f\u0ca0\5\u01ee\u00f8\2\u0ca0\u0ca1\7")
        buf.write("\u01ef\2\2\u0ca1\u019b\3\2\2\2\u0ca2\u0ca4\7\u0110\2\2")
        buf.write("\u0ca3\u0ca5\7\u0161\2\2\u0ca4\u0ca3\3\2\2\2\u0ca4\u0ca5")
        buf.write("\3\2\2\2\u0ca5\u0ca6\3\2\2\2\u0ca6\u0ca7\7*\2\2\u0ca7")
        buf.write("\u0cac\5\u019e\u00d0\2\u0ca8\u0ca9\7\u01f4\2\2\u0ca9\u0cab")
        buf.write("\5\u019e\u00d0\2\u0caa\u0ca8\3\2\2\2\u0cab\u0cae\3\2\2")
        buf.write("\2\u0cac\u0caa\3\2\2\2\u0cac\u0cad\3\2\2\2\u0cad\u019d")
        buf.write("\3\2\2\2\u0cae\u0cac\3\2\2\2\u0caf\u0cb1\5\u01f0\u00f9")
        buf.write("\2\u0cb0\u0cb2\t*\2\2\u0cb1\u0cb0\3\2\2\2\u0cb1\u0cb2")
        buf.write("\3\2\2\2\u0cb2\u0cb5\3\2\2\2\u0cb3\u0cb4\7\u0101\2\2\u0cb4")
        buf.write("\u0cb6\t+\2\2\u0cb5\u0cb3\3\2\2\2\u0cb5\u0cb6\3\2\2\2")
        buf.write("\u0cb6\u019f\3\2\2\2\u0cb7\u0cb8\7\u0098\2\2\u0cb8\u0cba")
        buf.write("\7\u0198\2\2\u0cb9\u0cbb\5\u01a2\u00d2\2\u0cba\u0cb9\3")
        buf.write("\2\2\2\u0cba\u0cbb\3\2\2\2\u0cbb\u0cbd\3\2\2\2\u0cbc\u0cbe")
        buf.write("\5\u01a4\u00d3\2\u0cbd\u0cbc\3\2\2\2\u0cbd\u0cbe\3\2\2")
        buf.write("\2\u0cbe\u01a1\3\2\2\2\u0cbf\u0cc0\7\u0106\2\2\u0cc0\u0cc5")
        buf.write("\5\u02ae\u0158\2\u0cc1\u0cc2\7\u01f4\2\2\u0cc2\u0cc4\5")
        buf.write("\u02ae\u0158\2\u0cc3\u0cc1\3\2\2\2\u0cc4\u0cc7\3\2\2\2")
        buf.write("\u0cc5\u0cc3\3\2\2\2\u0cc5\u0cc6\3\2\2\2\u0cc6\u01a3\3")
        buf.write("\2\2\2\u0cc7\u0cc5\3\2\2\2\u0cc8\u0cc9\7\u0166\2\2\u0cc9")
        buf.write("\u0cce\7\u00d3\2\2\u0cca\u0cce\7\u00ff\2\2\u0ccb\u0ccc")
        buf.write("\7\u01a8\2\2\u0ccc\u0cce\5\u01f0\u00f9\2\u0ccd\u0cc8\3")
        buf.write("\2\2\2\u0ccd\u0cca\3\2\2\2\u0ccd\u0ccb\3\2\2\2\u0cce\u01a5")
        buf.write("\3\2\2\2\u0ccf\u0cd0\7\u00d0\2\2\u0cd0\u0cd1\5\u01f0\u00f9")
        buf.write("\2\u0cd1\u01a7\3\2\2\2\u0cd2\u0cd3\7\u0198\2\2\u0cd3\u0cd4")
        buf.write("\5\u01d6\u00ec\2\u0cd4\u0cd6\5\u01aa\u00d6\2\u0cd5\u0cd7")
        buf.write("\5\u026e\u0138\2\u0cd6\u0cd5\3\2\2\2\u0cd6\u0cd7\3\2\2")
        buf.write("\2\u0cd7\u0cd9\3\2\2\2\u0cd8\u0cda\5\u01d8\u00ed\2\u0cd9")
        buf.write("\u0cd8\3\2\2\2\u0cd9\u0cda\3\2\2\2\u0cda\u0cdc\3\2\2\2")
        buf.write("\u0cdb\u0cdd\5\u01da\u00ee\2\u0cdc\u0cdb\3\2\2\2\u0cdc")
        buf.write("\u0cdd\3\2\2\2\u0cdd\u01a9\3\2\2\2\u0cde\u0cee\7\u015b")
        buf.write("\2\2\u0cdf\u0ce4\5\u01ac\u00d7\2\u0ce0\u0ce1\7\u01f4\2")
        buf.write("\2\u0ce1\u0ce3\5\u01ac\u00d7\2\u0ce2\u0ce0\3\2\2\2\u0ce3")
        buf.write("\u0ce6\3\2\2\2\u0ce4\u0ce2\3\2\2\2\u0ce4\u0ce5\3\2\2\2")
        buf.write("\u0ce5\u0cef\3\2\2\2\u0ce6\u0ce4\3\2\2\2\u0ce7\u0ce8\7")
        buf.write("\u019f\2\2\u0ce8\u0ce9\7\u01ee\2\2\u0ce9\u0cea\5\u02d8")
        buf.write("\u016d\2\u0cea\u0ceb\7\u01ef\2\2\u0ceb\u0cec\7\u0205\2")
        buf.write("\2\u0cec\u0ced\5\u01f0\u00f9\2\u0ced\u0cef\3\2\2\2\u0cee")
        buf.write("\u0cdf\3\2\2\2\u0cee\u0ce7\3\2\2\2\u0cef\u01ab\3\2\2\2")
        buf.write("\u0cf0\u0cf1\5\u02ae\u0158\2\u0cf1\u0cf2\7\u0205\2\2\u0cf2")
        buf.write("\u0cf3\5\u01f0\u00f9\2\u0cf3\u0d02\3\2\2\2\u0cf4\u0cf5")
        buf.write("\7\u01ee\2\2\u0cf5\u0cfa\5\u02ae\u0158\2\u0cf6\u0cf7\7")
        buf.write("\u01f4\2\2\u0cf7\u0cf9\5\u02ae\u0158\2\u0cf8\u0cf6\3\2")
        buf.write("\2\2\u0cf9\u0cfc\3\2\2\2\u0cfa\u0cf8\3\2\2\2\u0cfa\u0cfb")
        buf.write("\3\2\2\2\u0cfb\u0cfd\3\2\2\2\u0cfc\u0cfa\3\2\2\2\u0cfd")
        buf.write("\u0cfe\7\u01ef\2\2\u0cfe\u0cff\7\u0205\2\2\u0cff\u0d00")
        buf.write("\5\u0140\u00a1\2\u0d00\u0d02\3\2\2\2\u0d01\u0cf0\3\2\2")
        buf.write("\2\u0d01\u0cf4\3\2\2\2\u0d02\u01ad\3\2\2\2\u0d03\u0d05")
        buf.write("\7j\2\2\u0d04\u0d06\7\u009b\2\2\u0d05\u0d04\3\2\2\2\u0d05")
        buf.write("\u0d06\3\2\2\2\u0d06\u0d07\3\2\2\2\u0d07\u0d09\5\u01d6")
        buf.write("\u00ec\2\u0d08\u0d0a\5\u026e\u0138\2\u0d09\u0d08\3\2\2")
        buf.write("\2\u0d09\u0d0a\3\2\2\2\u0d0a\u0d0c\3\2\2\2\u0d0b\u0d0d")
        buf.write("\5\u01d8\u00ed\2\u0d0c\u0d0b\3\2\2\2\u0d0c\u0d0d\3\2\2")
        buf.write("\2\u0d0d\u0d0f\3\2\2\2\u0d0e\u0d10\5\u01da\u00ee\2\u0d0f")
        buf.write("\u0d0e\3\2\2\2\u0d0f\u0d10\3\2\2\2\u0d10\u01af\3\2\2\2")
        buf.write("\u0d11\u0d14\7\u00b6\2\2\u0d12\u0d15\5\u01b2\u00da\2\u0d13")
        buf.write("\u0d15\5\u01b4\u00db\2\u0d14\u0d12\3\2\2\2\u0d14\u0d13")
        buf.write("\3\2\2\2\u0d15\u01b1\3\2\2\2\u0d16\u0d1c\5\u01be\u00e0")
        buf.write("\2\u0d17\u0d19\5\u01c0\u00e1\2\u0d18\u0d1a\5\u01d8\u00ed")
        buf.write("\2\u0d19\u0d18\3\2\2\2\u0d19\u0d1a\3\2\2\2\u0d1a\u0d1d")
        buf.write("\3\2\2\2\u0d1b\u0d1d\5\u0136\u009c\2\u0d1c\u0d17\3\2\2")
        buf.write("\2\u0d1c\u0d1b\3\2\2\2\u0d1d\u0d1f\3\2\2\2\u0d1e\u0d20")
        buf.write("\5\u01da\u00ee\2\u0d1f\u0d1e\3\2\2\2\u0d1f\u0d20\3\2\2")
        buf.write("\2\u0d20\u01b3\3\2\2\2\u0d21\u0d23\7\t\2\2\u0d22\u0d24")
        buf.write("\5\u01b6\u00dc\2\u0d23\u0d22\3\2\2\2\u0d24\u0d25\3\2\2")
        buf.write("\2\u0d25\u0d23\3\2\2\2\u0d25\u0d26\3\2\2\2\u0d26\u0d29")
        buf.write("\3\2\2\2\u0d27\u0d29\5\u01b8\u00dd\2\u0d28\u0d21\3\2\2")
        buf.write("\2\u0d28\u0d27\3\2\2\2\u0d29\u0d2a\3\2\2\2\u0d2a\u0d2b")
        buf.write("\5\u0136\u009c\2\u0d2b\u01b5\3\2\2\2\u0d2c\u0d2e\5\u01be")
        buf.write("\u00e0\2\u0d2d\u0d2f\5\u01c0\u00e1\2\u0d2e\u0d2d\3\2\2")
        buf.write("\2\u0d2e\u0d2f\3\2\2\2\u0d2f\u0d31\3\2\2\2\u0d30\u0d32")
        buf.write("\5\u01da\u00ee\2\u0d31\u0d30\3\2\2\2\u0d31\u0d32\3\2\2")
        buf.write("\2\u0d32\u01b7\3\2\2\2\u0d33\u0d35\t,\2\2\u0d34\u0d33")
        buf.write("\3\2\2\2\u0d34\u0d35\3\2\2\2\u0d35\u0d37\3\2\2\2\u0d36")
        buf.write("\u0d38\5\u01ba\u00de\2\u0d37\u0d36\3\2\2\2\u0d38\u0d39")
        buf.write("\3\2\2\2\u0d39\u0d37\3\2\2\2\u0d39\u0d3a\3\2\2\2\u0d3a")
        buf.write("\u0d3c\3\2\2\2\u0d3b\u0d3d\5\u01bc\u00df\2\u0d3c\u0d3b")
        buf.write("\3\2\2\2\u0d3c\u0d3d\3\2\2\2\u0d3d\u01b9\3\2\2\2\u0d3e")
        buf.write("\u0d3f\7\u01ab\2\2\u0d3f\u0d40\5\u01ee\u00f8\2\u0d40\u0d42")
        buf.write("\7\u017d\2\2\u0d41\u0d43\5\u01b6\u00dc\2\u0d42\u0d41\3")
        buf.write("\2\2\2\u0d43\u0d44\3\2\2\2\u0d44\u0d42\3\2\2\2\u0d44\u0d45")
        buf.write("\3\2\2\2\u0d45\u01bb\3\2\2\2\u0d46\u0d48\7x\2\2\u0d47")
        buf.write("\u0d49\5\u01b6\u00dc\2\u0d48\u0d47\3\2\2\2\u0d49\u0d4a")
        buf.write("\3\2\2\2\u0d4a\u0d48\3\2\2\2\u0d4a\u0d4b\3\2\2\2\u0d4b")
        buf.write("\u01bd\3\2\2\2\u0d4c\u0d4d\7\u00bd\2\2\u0d4d\u0d59\5\u01d6")
        buf.write("\u00ec\2\u0d4e\u0d4f\7\u01ee\2\2\u0d4f\u0d54\5\u02ae\u0158")
        buf.write("\2\u0d50\u0d51\7\u01f4\2\2\u0d51\u0d53\5\u02ae\u0158\2")
        buf.write("\u0d52\u0d50\3\2\2\2\u0d53\u0d56\3\2\2\2\u0d54\u0d52\3")
        buf.write("\2\2\2\u0d54\u0d55\3\2\2\2\u0d55\u0d57\3\2\2\2\u0d56\u0d54")
        buf.write("\3\2\2\2\u0d57\u0d58\7\u01ef\2\2\u0d58\u0d5a\3\2\2\2\u0d59")
        buf.write("\u0d4e\3\2\2\2\u0d59\u0d5a\3\2\2\2\u0d5a\u01bf\3\2\2\2")
        buf.write("\u0d5b\u0d5c\7\u01a0\2\2\u0d5c\u0d5d\5\u01ec\u00f7\2\u0d5d")
        buf.write("\u01c1\3\2\2\2\u0d5e\u0d5f\7\u00df\2\2\u0d5f\u0d60\7\u00bd")
        buf.write("\2\2\u0d60\u0d62\5\u02b0\u0159\2\u0d61\u0d63\5\u026a\u0136")
        buf.write("\2\u0d62\u0d61\3\2\2\2\u0d62\u0d63\3\2\2\2\u0d63\u0d64")
        buf.write("\3\2\2\2\u0d64\u0d65\7\u019d\2\2\u0d65\u0d66\5\u01cc\u00e7")
        buf.write("\2\u0d66\u0d67\7\u010a\2\2\u0d67\u0d68\7\u01ee\2\2\u0d68")
        buf.write("\u0d69\5\u01ee\u00f8\2\u0d69\u0d72\7\u01ef\2\2\u0d6a\u0d6c")
        buf.write("\5\u01c4\u00e3\2\u0d6b\u0d6d\5\u01ca\u00e6\2\u0d6c\u0d6b")
        buf.write("\3\2\2\2\u0d6c\u0d6d\3\2\2\2\u0d6d\u0d73\3\2\2\2\u0d6e")
        buf.write("\u0d70\5\u01ca\u00e6\2\u0d6f\u0d71\5\u01c4\u00e3\2\u0d70")
        buf.write("\u0d6f\3\2\2\2\u0d70\u0d71\3\2\2\2\u0d71\u0d73\3\2\2\2")
        buf.write("\u0d72\u0d6a\3\2\2\2\u0d72\u0d6e\3\2\2\2\u0d72\u0d73\3")
        buf.write("\2\2\2\u0d73\u0d75\3\2\2\2\u0d74\u0d76\5\u01da\u00ee\2")
        buf.write("\u0d75\u0d74\3\2\2\2\u0d75\u0d76\3\2\2\2\u0d76\u01c3\3")
        buf.write("\2\2\2\u0d77\u0d78\7\u01ab\2\2\u0d78\u0d79\7\u00db\2\2")
        buf.write("\u0d79\u0d7a\7\u017d\2\2\u0d7a\u0d7b\7\u0198\2\2\u0d7b")
        buf.write("\u0d7c\7\u015b\2\2\u0d7c\u0d81\5\u01c6\u00e4\2\u0d7d\u0d7e")
        buf.write("\7\u01f4\2\2\u0d7e\u0d80\5\u01c6\u00e4\2\u0d7f\u0d7d\3")
        buf.write("\2\2\2\u0d80\u0d83\3\2\2\2\u0d81\u0d7f\3\2\2\2\u0d81\u0d82")
        buf.write("\3\2\2\2\u0d82\u0d85\3\2\2\2\u0d83\u0d81\3\2\2\2\u0d84")
        buf.write("\u0d86\5\u026e\u0138\2\u0d85\u0d84\3\2\2\2\u0d85\u0d86")
        buf.write("\3\2\2\2\u0d86\u0d88\3\2\2\2\u0d87\u0d89\5\u01c8\u00e5")
        buf.write("\2\u0d88\u0d87\3\2\2\2\u0d88\u0d89\3\2\2\2\u0d89\u01c5")
        buf.write("\3\2\2\2\u0d8a\u0d8b\5\u02ae\u0158\2\u0d8b\u0d8c\7\u0205")
        buf.write("\2\2\u0d8c\u0d8d\5\u01f0\u00f9\2\u0d8d\u01c7\3\2\2\2\u0d8e")
        buf.write("\u0d8f\7j\2\2\u0d8f\u0d90\5\u026e\u0138\2\u0d90\u01c9")
        buf.write("\3\2\2\2\u0d91\u0d92\7\u01ab\2\2\u0d92\u0d93\7\u00fe\2")
        buf.write("\2\u0d93\u0d94\7\u00db\2\2\u0d94\u0d95\7\u017d\2\2\u0d95")
        buf.write("\u0da1\7\u00b6\2\2\u0d96\u0d97\7\u01ee\2\2\u0d97\u0d9c")
        buf.write("\5\u02ae\u0158\2\u0d98\u0d99\7\u01f4\2\2\u0d99\u0d9b\5")
        buf.write("\u02ae\u0158\2\u0d9a\u0d98\3\2\2\2\u0d9b\u0d9e\3\2\2\2")
        buf.write("\u0d9c\u0d9a\3\2\2\2\u0d9c\u0d9d\3\2\2\2\u0d9d\u0d9f\3")
        buf.write("\2\2\2\u0d9e\u0d9c\3\2\2\2\u0d9f\u0da0\7\u01ef\2\2\u0da0")
        buf.write("\u0da2\3\2\2\2\u0da1\u0d96\3\2\2\2\u0da1\u0da2\3\2\2\2")
        buf.write("\u0da2\u0da3\3\2\2\2\u0da3\u0da4\7\u01a0\2\2\u0da4\u0da6")
        buf.write("\5\u01ec\u00f7\2\u0da5\u0da7\5\u026e\u0138\2\u0da6\u0da5")
        buf.write("\3\2\2\2\u0da6\u0da7\3\2\2\2\u0da7\u01cb\3\2\2\2\u0da8")
        buf.write("\u0dae\5\u02b0\u0159\2\u0da9\u0daa\7\u01ee\2\2\u0daa\u0dab")
        buf.write("\5\u0136\u009c\2\u0dab\u0dac\7\u01ef\2\2\u0dac\u0dae\3")
        buf.write("\2\2\2\u0dad\u0da8\3\2\2\2\u0dad\u0da9\3\2\2\2\u0dae\u0db0")
        buf.write("\3\2\2\2\u0daf\u0db1\5\u026a\u0136\2\u0db0\u0daf\3\2\2")
        buf.write("\2\u0db0\u0db1\3\2\2\2\u0db1\u01cd\3\2\2\2\u0db2\u0db3")
        buf.write("\7\u00d2\2\2\u0db3\u0db4\7\u017b\2\2\u0db4\u0db9\5\u01d2")
        buf.write("\u00ea\2\u0db5\u0db6\7\u01f4\2\2\u0db6\u0db8\5\u01d2\u00ea")
        buf.write("\2\u0db7\u0db5\3\2\2\2\u0db8\u0dbb\3\2\2\2\u0db9\u0db7")
        buf.write("\3\2\2\2\u0db9\u0dba\3\2\2\2\u0dba\u0dbc\3\2\2\2\u0dbb")
        buf.write("\u0db9\3\2\2\2\u0dbc\u0dbd\7\u00a9\2\2\u0dbd\u0dbe\5\u01d4")
        buf.write("\u00eb\2\u0dbe\u0dc0\7\u00e4\2\2\u0dbf\u0dc1\5\u01d0\u00e9")
        buf.write("\2\u0dc0\u0dbf\3\2\2\2\u0dc0\u0dc1\3\2\2\2\u0dc1\u01cf")
        buf.write("\3\2\2\2\u0dc2\u0dc3\7\u01a8\2\2\u0dc3\u0dc6\5\u01f0\u00f9")
        buf.write("\2\u0dc4\u0dc6\7\u00ff\2\2\u0dc5\u0dc2\3\2\2\2\u0dc5\u0dc4")
        buf.write("\3\2\2\2\u0dc6\u01d1\3\2\2\2\u0dc7\u0dc9\5\u02b0\u0159")
        buf.write("\2\u0dc8\u0dca\5\u0266\u0134\2\u0dc9\u0dc8\3\2\2\2\u0dc9")
        buf.write("\u0dca\3\2\2\2\u0dca\u01d3\3\2\2\2\u0dcb\u0dcc\7\u0145")
        buf.write("\2\2\u0dcc\u0dd8\7\u015e\2\2\u0dcd\u0dce\7\u0145\2\2\u0dce")
        buf.write("\u0dd8\7\u0088\2\2\u0dcf\u0dd1\7\u015e\2\2\u0dd0\u0dd2")
        buf.write("\7\u0198\2\2\u0dd1\u0dd0\3\2\2\2\u0dd1\u0dd2\3\2\2\2\u0dd2")
        buf.write("\u0dd8\3\2\2\2\u0dd3\u0dd4\7\u015e\2\2\u0dd4\u0dd5\7\u0145")
        buf.write("\2\2\u0dd5\u0dd8\7\u0088\2\2\u0dd6\u0dd8\7\u0088\2\2\u0dd7")
        buf.write("\u0dcb\3\2\2\2\u0dd7\u0dcd\3\2\2\2\u0dd7\u0dcf\3\2\2\2")
        buf.write("\u0dd7\u0dd3\3\2\2\2\u0dd7\u0dd6\3\2\2\2\u0dd8\u01d5\3")
        buf.write("\2\2\2\u0dd9\u0de0\5\u01e0\u00f1\2\u0dda\u0ddb\7\u010b")
        buf.write("\2\2\u0ddb\u0ddc\7\u01ee\2\2\u0ddc\u0ddd\5\u01e0\u00f1")
        buf.write("\2\u0ddd\u0dde\7\u01ef\2\2\u0dde\u0de0\3\2\2\2\u0ddf\u0dd9")
        buf.write("\3\2\2\2\u0ddf\u0dda\3\2\2\2\u0de0\u0de2\3\2\2\2\u0de1")
        buf.write("\u0de3\5\u026a\u0136\2\u0de2\u0de1\3\2\2\2\u0de2\u0de3")
        buf.write("\3\2\2\2\u0de3\u01d7\3\2\2\2\u0de4\u0de5\t\31\2\2\u0de5")
        buf.write("\u0dea\5\u01f0\u00f9\2\u0de6\u0de7\7\u01f4\2\2\u0de7\u0de9")
        buf.write("\5\u01f0\u00f9\2\u0de8\u0de6\3\2\2\2\u0de9\u0dec\3\2\2")
        buf.write("\2\u0dea\u0de8\3\2\2\2\u0dea\u0deb\3\2\2\2\u0deb\u0ded")
        buf.write("\3\2\2\2\u0dec\u0dea\3\2\2\2\u0ded\u0dee\5\u0272\u013a")
        buf.write("\2\u0dee\u01d9\3\2\2\2\u0def\u0df0\7\u00d4\2\2\u0df0\u0df2")
        buf.write("\7\u0080\2\2\u0df1\u0df3\5\u01dc\u00ef\2\u0df2\u0df1\3")
        buf.write("\2\2\2\u0df2\u0df3\3\2\2\2\u0df3\u0df5\3\2\2\2\u0df4\u0df6")
        buf.write("\5\u01f0\u00f9\2\u0df5\u0df4\3\2\2\2\u0df5\u0df6\3\2\2")
        buf.write("\2\u0df6\u0df8\3\2\2\2\u0df7\u0df9\5\u01de\u00f0\2\u0df8")
        buf.write("\u0df7\3\2\2\2\u0df8\u0df9\3\2\2\2\u0df9\u01db\3\2\2\2")
        buf.write("\u0dfa\u0dfb\7\u00bd\2\2\u0dfb\u0dfc\5\u02b0\u0159\2\u0dfc")
        buf.write("\u01dd\3\2\2\2\u0dfd\u0dfe\7\u0135\2\2\u0dfe\u0e01\7\u00d0")
        buf.write("\2\2\u0dff\u0e02\7\u0195\2\2\u0e00\u0e02\5\u01f0\u00f9")
        buf.write("\2\u0e01\u0dff\3\2\2\2\u0e01\u0e00\3\2\2\2\u0e02\u01df")
        buf.write("\3\2\2\2\u0e03\u0e10\5\u01e2\u00f2\2\u0e04\u0e05\7\u01ee")
        buf.write("\2\2\u0e05\u0e07\5\u0136\u009c\2\u0e06\u0e08\5\u01e4\u00f3")
        buf.write("\2\u0e07\u0e06\3\2\2\2\u0e07\u0e08\3\2\2\2\u0e08\u0e09")
        buf.write("\3\2\2\2\u0e09\u0e0a\7\u01ef\2\2\u0e0a\u0e10\3\2\2\2\u0e0b")
        buf.write("\u0e0d\5\u02b0\u0159\2\u0e0c\u0e0e\5\u01e6\u00f4\2\u0e0d")
        buf.write("\u0e0c\3\2\2\2\u0e0d\u0e0e\3\2\2\2\u0e0e\u0e10\3\2\2\2")
        buf.write("\u0e0f\u0e03\3\2\2\2\u0e0f\u0e04\3\2\2\2\u0e0f\u0e0b\3")
        buf.write("\2\2\2\u0e10\u01e1\3\2\2\2\u0e11\u0e1e\t-\2\2\u0e12\u0e13")
        buf.write("\7\u01ee\2\2\u0e13\u0e14\5\u0140\u00a1\2\u0e14\u0e15\7")
        buf.write("\u01ef\2\2\u0e15\u0e1f\3\2\2\2\u0e16\u0e17\7\u01ee\2\2")
        buf.write("\u0e17\u0e18\5\u01f0\u00f9\2\u0e18\u0e1c\7\u01ef\2\2\u0e19")
        buf.write("\u0e1a\7\u01ee\2\2\u0e1a\u0e1b\7\u01f2\2\2\u0e1b\u0e1d")
        buf.write("\7\u01ef\2\2\u0e1c\u0e19\3\2\2\2\u0e1c\u0e1d\3\2\2\2\u0e1d")
        buf.write("\u0e1f\3\2\2\2\u0e1e\u0e12\3\2\2\2\u0e1e\u0e16\3\2\2\2")
        buf.write("\u0e1f\u01e3\3\2\2\2\u0e20\u0e29\7\u01af\2\2\u0e21\u0e22")
        buf.write("\7\u012f\2\2\u0e22\u0e2a\7\u010b\2\2\u0e23\u0e24\7\66")
        buf.write("\2\2\u0e24\u0e27\7\u010d\2\2\u0e25\u0e26\7F\2\2\u0e26")
        buf.write("\u0e28\5\u0292\u014a\2\u0e27\u0e25\3\2\2\2\u0e27\u0e28")
        buf.write("\3\2\2\2\u0e28\u0e2a\3\2\2\2\u0e29\u0e21\3\2\2\2\u0e29")
        buf.write("\u0e23\3\2\2\2\u0e2a\u01e5\3\2\2\2\u0e2b\u0e2d\7\u0149")
        buf.write("\2\2\u0e2c\u0e2e\7$\2\2\u0e2d\u0e2c\3\2\2\2\u0e2d\u0e2e")
        buf.write("\3\2\2\2\u0e2e\u0e2f\3\2\2\2\u0e2f\u0e30\7\u01ee\2\2\u0e30")
        buf.write("\u0e33\5\u01f0\u00f9\2\u0e31\u0e32\7\u01f4\2\2\u0e32\u0e34")
        buf.write("\5\u01f0\u00f9\2\u0e33\u0e31\3\2\2\2\u0e33\u0e34\3\2\2")
        buf.write("\2\u0e34\u0e35\3\2\2\2\u0e35\u0e37\7\u01ef\2\2\u0e36\u0e38")
        buf.write("\5\u01e8\u00f5\2\u0e37\u0e36\3\2\2\2\u0e37\u0e38\3\2\2")
        buf.write("\2\u0e38\u01e7\3\2\2\2\u0e39\u0e3a\7\u0151\2\2\u0e3a\u0e3b")
        buf.write("\7\u01ee\2\2\u0e3b\u0e3c\5\u01f0\u00f9\2\u0e3c\u0e3d\7")
        buf.write("\u01ef\2\2\u0e3d\u01e9\3\2\2\2\u0e3e\u0e3f\7V\2\2\u0e3f")
        buf.write("\u0e40\7\u01ee\2\2\u0e40\u0e41\5\u0140\u00a1\2\u0e41\u0e42")
        buf.write("\7\u01ef\2\2\u0e42\u01eb\3\2\2\2\u0e43\u0e45\7\u01ee\2")
        buf.write("\2\u0e44\u0e46\5\u01f0\u00f9\2\u0e45\u0e44\3\2\2\2\u0e45")
        buf.write("\u0e46\3\2\2\2\u0e46\u0e4b\3\2\2\2\u0e47\u0e48\7\u01f4")
        buf.write("\2\2\u0e48\u0e4a\5\u01f0\u00f9\2\u0e49\u0e47\3\2\2\2\u0e4a")
        buf.write("\u0e4d\3\2\2\2\u0e4b\u0e49\3\2\2\2\u0e4b\u0e4c\3\2\2\2")
        buf.write("\u0e4c\u0e4e\3\2\2\2\u0e4d\u0e4b\3\2\2\2\u0e4e\u0e4f\7")
        buf.write("\u01ef\2\2\u0e4f\u01ed\3\2\2\2\u0e50\u0e51\5\u01f0\u00f9")
        buf.write("\2\u0e51\u01ef\3\2\2\2\u0e52\u0e53\b\u00f9\1\2\u0e53\u0e54")
        buf.write("\7V\2\2\u0e54\u0e5d\5\u01f4\u00fb\2\u0e55\u0e56\7\u00fe")
        buf.write("\2\2\u0e56\u0e5d\5\u01f0\u00f9\7\u0e57\u0e5d\5\u0202\u0102")
        buf.write("\2\u0e58\u0e59\7\u01ee\2\2\u0e59\u0e5a\5\u01f0\u00f9\2")
        buf.write("\u0e5a\u0e5b\7\u01ef\2\2\u0e5b\u0e5d\3\2\2\2\u0e5c\u0e52")
        buf.write("\3\2\2\2\u0e5c\u0e55\3\2\2\2\u0e5c\u0e57\3\2\2\2\u0e5c")
        buf.write("\u0e58\3\2\2\2\u0e5d\u0e92\3\2\2\2\u0e5e\u0e60\f\f\2\2")
        buf.write("\u0e5f\u0e61\7\u00fe\2\2\u0e60\u0e5f\3\2\2\2\u0e60\u0e61")
        buf.write("\3\2\2\2\u0e61\u0e62\3\2\2\2\u0e62\u0e63\7\36\2\2\u0e63")
        buf.write("\u0e64\5\u01f0\u00f9\2\u0e64\u0e65\7\f\2\2\u0e65\u0e66")
        buf.write("\5\u01f0\u00f9\r\u0e66\u0e91\3\2\2\2\u0e67\u0e68\f\n\2")
        buf.write("\2\u0e68\u0e69\5\u01f8\u00fd\2\u0e69\u0e6a\5\u01f0\u00f9")
        buf.write("\13\u0e6a\u0e91\3\2\2\2\u0e6b\u0e6c\f\6\2\2\u0e6c\u0e6d")
        buf.write("\7\f\2\2\u0e6d\u0e91\5\u01f0\u00f9\7\u0e6e\u0e6f\f\5\2")
        buf.write("\2\u0e6f\u0e70\7\u010e\2\2\u0e70\u0e91\5\u01f0\u00f9\6")
        buf.write("\u0e71\u0e72\f\16\2\2\u0e72\u0e73\7\u00bf\2\2\u0e73\u0e91")
        buf.write("\5\u01f2\u00fa\2\u0e74\u0e76\f\r\2\2\u0e75\u0e77\7\u00fe")
        buf.write("\2\2\u0e76\u0e75\3\2\2\2\u0e76\u0e77\3\2\2\2\u0e77\u0e78")
        buf.write("\3\2\2\2\u0e78\u0e7e\7\u00a9\2\2\u0e79\u0e7a\7\u01ee\2")
        buf.write("\2\u0e7a\u0e7b\5\u0140\u00a1\2\u0e7b\u0e7c\7\u01ef\2\2")
        buf.write("\u0e7c\u0e7f\3\2\2\2\u0e7d\u0e7f\5\u01ec\u00f7\2\u0e7e")
        buf.write("\u0e79\3\2\2\2\u0e7e\u0e7d\3\2\2\2\u0e7f\u0e91\3\2\2\2")
        buf.write("\u0e80\u0e82\f\13\2\2\u0e81\u0e83\7\u00fe\2\2\u0e82\u0e81")
        buf.write("\3\2\2\2\u0e82\u0e83\3\2\2\2\u0e83\u0e84\3\2\2\2\u0e84")
        buf.write("\u0e85\5\u01fa\u00fe\2\u0e85\u0e88\5\u01f0\u00f9\2\u0e86")
        buf.write("\u0e87\7\u0081\2\2\u0e87\u0e89\5\u01f0\u00f9\2\u0e88\u0e86")
        buf.write("\3\2\2\2\u0e88\u0e89\3\2\2\2\u0e89\u0e91\3\2\2\2\u0e8a")
        buf.write("\u0e8b\f\t\2\2\u0e8b\u0e8d\t.\2\2\u0e8c\u0e8e\7\u0106")
        buf.write("\2\2\u0e8d\u0e8c\3\2\2\2\u0e8d\u0e8e\3\2\2\2\u0e8e\u0e8f")
        buf.write("\3\2\2\2\u0e8f\u0e91\5\u0202\u0102\2\u0e90\u0e5e\3\2\2")
        buf.write("\2\u0e90\u0e67\3\2\2\2\u0e90\u0e6b\3\2\2\2\u0e90\u0e6e")
        buf.write("\3\2\2\2\u0e90\u0e71\3\2\2\2\u0e90\u0e74\3\2\2\2\u0e90")
        buf.write("\u0e80\3\2\2\2\u0e90\u0e8a\3\2\2\2\u0e91\u0e94\3\2\2\2")
        buf.write("\u0e92\u0e90\3\2\2\2\u0e92\u0e93\3\2\2\2\u0e93\u01f1\3")
        buf.write("\2\2\2\u0e94\u0e92\3\2\2\2\u0e95\u0e97\7\u00fe\2\2\u0e96")
        buf.write("\u0e95\3\2\2\2\u0e96\u0e97\3\2\2\2\u0e97\u0eb1\3\2\2\2")
        buf.write("\u0e98\u0eb2\7\u0100\2\2\u0e99\u0eb2\7\u00ea\2\2\u0e9a")
        buf.write("\u0eb2\7\u0129\2\2\u0e9b\u0eb2\7\u00b2\2\2\u0e9c\u0e9d")
        buf.write("\7\4\2\2\u0e9d\u0eb2\7\u015b\2\2\u0e9e\u0eb2\7z\2\2\u0e9f")
        buf.write("\u0ea1\7\u0106\2\2\u0ea0\u0ea2\7\u0190\2\2\u0ea1\u0ea0")
        buf.write("\3\2\2\2\u0ea1\u0ea2\3\2\2\2\u0ea2\u0ea3\3\2\2\2\u0ea3")
        buf.write("\u0ea5\7\u01ee\2\2\u0ea4\u0ea6\7\u010b\2\2\u0ea5\u0ea4")
        buf.write("\3\2\2\2\u0ea5\u0ea6\3\2\2\2\u0ea6\u0ea7\3\2\2\2\u0ea7")
        buf.write("\u0eac\5\u02c2\u0162\2\u0ea8\u0ea9\7\u01f4\2\2\u0ea9\u0eab")
        buf.write("\5\u02c2\u0162\2\u0eaa\u0ea8\3\2\2\2\u0eab\u0eae\3\2\2")
        buf.write("\2\u0eac\u0eaa\3\2\2\2\u0eac\u0ead\3\2\2\2\u0ead\u0eaf")
        buf.write("\3\2\2\2\u0eae\u0eac\3\2\2\2\u0eaf\u0eb0\7\u01ef\2\2\u0eb0")
        buf.write("\u0eb2\3\2\2\2\u0eb1\u0e98\3\2\2\2\u0eb1\u0e99\3\2\2\2")
        buf.write("\u0eb1\u0e9a\3\2\2\2\u0eb1\u0e9b\3\2\2\2\u0eb1\u0e9c\3")
        buf.write("\2\2\2\u0eb1\u0e9e\3\2\2\2\u0eb1\u0e9f\3\2\2\2\u0eb2\u01f3")
        buf.write("\3\2\2\2\u0eb3\u0eb4\7\u01ee\2\2\u0eb4\u0eb5\5\u0140\u00a1")
        buf.write("\2\u0eb5\u0eb6\7\u01ef\2\2\u0eb6\u01f5\3\2\2\2\u0eb7\u0eb8")
        buf.write("\t.\2\2\u0eb8\u01f7\3\2\2\2\u0eb9\u0ec0\7\u0205\2\2\u0eba")
        buf.write("\u0ec0\5\u02dc\u016f\2\u0ebb\u0ec0\7\u01fc\2\2\u0ebc\u0ec0")
        buf.write("\7\u0202\2\2\u0ebd\u0ec0\5\u02e0\u0171\2\u0ebe\u0ec0\5")
        buf.write("\u02de\u0170\2\u0ebf\u0eb9\3\2\2\2\u0ebf\u0eba\3\2\2\2")
        buf.write("\u0ebf\u0ebb\3\2\2\2\u0ebf\u0ebc\3\2\2\2\u0ebf\u0ebd\3")
        buf.write("\2\2\2\u0ebf\u0ebe\3\2\2\2\u0ec0\u01f9\3\2\2\2\u0ec1\u0ec2")
        buf.write("\t/\2\2\u0ec2\u01fb\3\2\2\2\u0ec3\u0ec4\7\u0081\2\2\u0ec4")
        buf.write("\u0ec5\5\u0200\u0101\2\u0ec5\u01fd\3\2\2\2\u0ec6\u0ec7")
        buf.write("\5\u0200\u0101\2\u0ec7\u0ec8\7\f\2\2\u0ec8\u0ec9\5\u0200")
        buf.write("\u0101\2\u0ec9\u01ff\3\2\2\2\u0eca\u0ecb\5\u0202\u0102")
        buf.write("\2\u0ecb\u0201\3\2\2\2\u0ecc\u0ecd\b\u0102\1\2\u0ecd\u0ece")
        buf.write("\7\u01ee\2\2\u0ece\u0ecf\5\u0202\u0102\2\u0ecf\u0ed0\7")
        buf.write("\u01ef\2\2\u0ed0\u0ed3\3\2\2\2\u0ed1\u0ed3\5\u0212\u010a")
        buf.write("\2\u0ed2\u0ecc\3\2\2\2\u0ed2\u0ed1\3\2\2\2\u0ed3\u0eea")
        buf.write("\3\2\2\2\u0ed4\u0ed5\f\7\2\2\u0ed5\u0ed6\t\60\2\2\u0ed6")
        buf.write("\u0ee9\5\u0202\u0102\b\u0ed7\u0ed8\f\6\2\2\u0ed8\u0ed9")
        buf.write("\t\61\2\2\u0ed9\u0ee9\5\u0202\u0102\7\u0eda\u0edb\f\5")
        buf.write("\2\2\u0edb\u0edc\7\u0203\2\2\u0edc\u0ee9\5\u0202\u0102")
        buf.write("\6\u0edd\u0ee6\f\b\2\2\u0ede\u0ee3\7\24\2\2\u0edf\u0ee4")
        buf.write("\7\u00d1\2\2\u0ee0\u0ee1\7\u017e\2\2\u0ee1\u0ee2\7\u01c5")
        buf.write("\2\2\u0ee2\u0ee4\5\u0202\u0102\2\u0ee3\u0edf\3\2\2\2\u0ee3")
        buf.write("\u0ee0\3\2\2\2\u0ee4\u0ee7\3\2\2\2\u0ee5\u0ee7\5\u0204")
        buf.write("\u0103\2\u0ee6\u0ede\3\2\2\2\u0ee6\u0ee5\3\2\2\2\u0ee7")
        buf.write("\u0ee9\3\2\2\2\u0ee8\u0ed4\3\2\2\2\u0ee8\u0ed7\3\2\2\2")
        buf.write("\u0ee8\u0eda\3\2\2\2\u0ee8\u0edd\3\2\2\2\u0ee9\u0eec\3")
        buf.write("\2\2\2\u0eea\u0ee8\3\2\2\2\u0eea\u0eeb\3\2\2\2\u0eeb\u0203")
        buf.write("\3\2\2\2\u0eec\u0eea\3\2\2\2\u0eed\u0ef2\7\\\2\2\u0eee")
        buf.write("\u0eef\7\u01ee\2\2\u0eef\u0ef0\5\u0200\u0101\2\u0ef0\u0ef1")
        buf.write("\7\u01ef\2\2\u0ef1\u0ef3\3\2\2\2\u0ef2\u0eee\3\2\2\2\u0ef2")
        buf.write("\u0ef3\3\2\2\2\u0ef3\u0ef4\3\2\2\2\u0ef4\u0ef5\7\u0187")
        buf.write("\2\2\u0ef5\u0efa\7\u0150\2\2\u0ef6\u0ef7\7\u01ee\2\2\u0ef7")
        buf.write("\u0ef8\5\u0200\u0101\2\u0ef8\u0ef9\7\u01ef\2\2\u0ef9\u0efb")
        buf.write("\3\2\2\2\u0efa\u0ef6\3\2\2\2\u0efa\u0efb\3\2\2\2\u0efb")
        buf.write("\u0f06\3\2\2\2\u0efc\u0f01\7\u01c2\2\2\u0efd\u0efe\7\u01ee")
        buf.write("\2\2\u0efe\u0eff\5\u0200\u0101\2\u0eff\u0f00\7\u01ef\2")
        buf.write("\2\u0f00\u0f02\3\2\2\2\u0f01\u0efd\3\2\2\2\u0f01\u0f02")
        buf.write("\3\2\2\2\u0f02\u0f03\3\2\2\2\u0f03\u0f04\7\u0187\2\2\u0f04")
        buf.write("\u0f06\7\u00e7\2\2\u0f05\u0eed\3\2\2\2\u0f05\u0efc\3\2")
        buf.write("\2\2\u0f06\u0205\3\2\2\2\u0f07\u0f08\5\u0212\u010a\2\u0f08")
        buf.write("\u0f09\7\u0206\2\2\u0f09\u0f0a\5\u0208\u0105\2\u0f0a\u0f0b")
        buf.write("\7\u0207\2\2\u0f0b\u0207\3\2\2\2\u0f0c\u0f0f\7\r\2\2\u0f0d")
        buf.write("\u0f0f\5\u01f0\u00f9\2\u0f0e\u0f0c\3\2\2\2\u0f0e\u0f0d")
        buf.write("\3\2\2\2\u0f0f\u0f17\3\2\2\2\u0f10\u0f13\7\u01f4\2\2\u0f11")
        buf.write("\u0f14\7\r\2\2\u0f12\u0f14\5\u01f0\u00f9\2\u0f13\u0f11")
        buf.write("\3\2\2\2\u0f13\u0f12\3\2\2\2\u0f14\u0f16\3\2\2\2\u0f15")
        buf.write("\u0f10\3\2\2\2\u0f16\u0f19\3\2\2\2\u0f17\u0f15\3\2\2\2")
        buf.write("\u0f17\u0f18\3\2\2\2\u0f18\u0f24\3\2\2\2\u0f19\u0f17\3")
        buf.write("\2\2\2\u0f1a\u0f1f\5\u020a\u0106\2\u0f1b\u0f1c\7\u01f4")
        buf.write("\2\2\u0f1c\u0f1e\5\u020a\u0106\2\u0f1d\u0f1b\3\2\2\2\u0f1e")
        buf.write("\u0f21\3\2\2\2\u0f1f\u0f1d\3\2\2\2\u0f1f\u0f20\3\2\2\2")
        buf.write("\u0f20\u0f24\3\2\2\2\u0f21\u0f1f\3\2\2\2\u0f22\u0f24\5")
        buf.write("\u0210\u0109\2\u0f23\u0f0e\3\2\2\2\u0f23\u0f1a\3\2\2\2")
        buf.write("\u0f23\u0f22\3\2\2\2\u0f24\u0209\3\2\2\2\u0f25\u0f26\7")
        buf.write("\u0098\2\2\u0f26\u0f33\5\u02ae\u0158\2\u0f27\u0f28\7\u00a9")
        buf.write("\2\2\u0f28\u0f34\5\u01ec\u00f7\2\u0f29\u0f2b\5\u020c\u0107")
        buf.write("\2\u0f2a\u0f29\3\2\2\2\u0f2a\u0f2b\3\2\2\2\u0f2b\u0f2c")
        buf.write("\3\2\2\2\u0f2c\u0f2d\7\u009b\2\2\u0f2d\u0f2e\5\u01f0\u00f9")
        buf.write("\2\u0f2e\u0f2f\7\u0187\2\2\u0f2f\u0f30\5\u01f0\u00f9\2")
        buf.write("\u0f30\u0f31\5\u020e\u0108\2\u0f31\u0f32\5\u01f0\u00f9")
        buf.write("\2\u0f32\u0f34\3\2\2\2\u0f33\u0f27\3\2\2\2\u0f33\u0f2a")
        buf.write("\3\2\2\2\u0f34\u020b\3\2\2\2\u0f35\u0f36\7\u00cc\2\2\u0f36")
        buf.write("\u0f37\5\u01f0\u00f9\2\u0f37\u020d\3\2\2\2\u0f38\u0f39")
        buf.write("\t\62\2\2\u0f39\u020f\3\2\2\2\u0f3a\u0f3b\7\u0098\2\2")
        buf.write("\u0f3b\u0f3c\7\u01ee\2\2\u0f3c\u0f41\5\u02ae\u0158\2\u0f3d")
        buf.write("\u0f3e\7\u01f4\2\2\u0f3e\u0f40\5\u02ae\u0158\2\u0f3f\u0f3d")
        buf.write("\3\2\2\2\u0f40\u0f43\3\2\2\2\u0f41\u0f3f\3\2\2\2\u0f41")
        buf.write("\u0f42\3\2\2\2\u0f42\u0f44\3\2\2\2\u0f43\u0f41\3\2\2\2")
        buf.write("\u0f44\u0f45\7\u01ef\2\2\u0f45\u0f46\7\u00a9\2\2\u0f46")
        buf.write("\u0f53\7\u01ee\2\2\u0f47\u0f54\5\u0140\u00a1\2\u0f48\u0f49")
        buf.write("\7\u01ee\2\2\u0f49\u0f4e\5\u01ec\u00f7\2\u0f4a\u0f4b\7")
        buf.write("\u01f4\2\2\u0f4b\u0f4d\5\u01ec\u00f7\2\u0f4c\u0f4a\3\2")
        buf.write("\2\2\u0f4d\u0f50\3\2\2\2\u0f4e\u0f4c\3\2\2\2\u0f4e\u0f4f")
        buf.write("\3\2\2\2\u0f4f\u0f51\3\2\2\2\u0f50\u0f4e\3\2\2\2\u0f51")
        buf.write("\u0f52\7\u01ef\2\2\u0f52\u0f54\3\2\2\2\u0f53\u0f47\3\2")
        buf.write("\2\2\u0f53\u0f48\3\2\2\2\u0f54\u0f55\3\2\2\2\u0f55\u0f56")
        buf.write("\7\u01ef\2\2\u0f56\u0211\3\2\2\2\u0f57\u0f58\b\u010a\1")
        buf.write("\2\u0f58\u0f59\t\61\2\2\u0f59\u0f69\5\u0212\u010a\f\u0f5a")
        buf.write("\u0f5b\7\u012a\2\2\u0f5b\u0f69\5\u0212\u010a\13\u0f5c")
        buf.write("\u0f5d\7D\2\2\u0f5d\u0f69\5\u0212\u010a\n\u0f5e\u0f5f")
        buf.write("\7\u00f2\2\2\u0f5f\u0f69\5\u0212\u010a\t\u0f60\u0f61\7")
        buf.write("q\2\2\u0f61\u0f69\5\u0212\u010a\b\u0f62\u0f63\7\t\2\2")
        buf.write("\u0f63\u0f69\5\u0212\u010a\7\u0f64\u0f69\5\u0214\u010b")
        buf.write("\2\u0f65\u0f69\5\u0226\u0114\2\u0f66\u0f69\5\u0228\u0115")
        buf.write("\2\u0f67\u0f69\5\u0220\u0111\2\u0f68\u0f57\3\2\2\2\u0f68")
        buf.write("\u0f5a\3\2\2\2\u0f68\u0f5c\3\2\2\2\u0f68\u0f5e\3\2\2\2")
        buf.write("\u0f68\u0f60\3\2\2\2\u0f68\u0f62\3\2\2\2\u0f68\u0f64\3")
        buf.write("\2\2\2\u0f68\u0f65\3\2\2\2\u0f68\u0f66\3\2\2\2\u0f68\u0f67")
        buf.write("\3\2\2\2\u0f69\u0f71\3\2\2\2\u0f6a\u0f6b\f\r\2\2\u0f6b")
        buf.write("\u0f6c\7\u0206\2\2\u0f6c\u0f6d\5\u0208\u0105\2\u0f6d\u0f6e")
        buf.write("\7\u0207\2\2\u0f6e\u0f70\3\2\2\2\u0f6f\u0f6a\3\2\2\2\u0f70")
        buf.write("\u0f73\3\2\2\2\u0f71\u0f6f\3\2\2\2\u0f71\u0f72\3\2\2\2")
        buf.write("\u0f72\u0213\3\2\2\2\u0f73\u0f71\3\2\2\2\u0f74\u0f77\5")
        buf.write("\u021a\u010e\2\u0f75\u0f77\5\u0216\u010c\2\u0f76\u0f74")
        buf.write("\3\2\2\2\u0f76\u0f75\3\2\2\2\u0f77\u0215\3\2\2\2\u0f78")
        buf.write("\u0f7a\5\u0294\u014b\2\u0f79\u0f78\3\2\2\2\u0f79\u0f7a")
        buf.write("\3\2\2\2\u0f7a\u0f7b\3\2\2\2\u0f7b\u0f7c\7\61\2\2\u0f7c")
        buf.write("\u0f7e\5\u0220\u0111\2\u0f7d\u0f7f\5\u0218\u010d\2\u0f7e")
        buf.write("\u0f7d\3\2\2\2\u0f7f\u0f80\3\2\2\2\u0f80\u0f7e\3\2\2\2")
        buf.write("\u0f80\u0f81\3\2\2\2\u0f81\u0f83\3\2\2\2\u0f82\u0f84\5")
        buf.write("\u021e\u0110\2\u0f83\u0f82\3\2\2\2\u0f83\u0f84\3\2\2\2")
        buf.write("\u0f84\u0f85\3\2\2\2\u0f85\u0f87\7}\2\2\u0f86\u0f88\7")
        buf.write("\61\2\2\u0f87\u0f86\3\2\2\2\u0f87\u0f88\3\2\2\2\u0f88")
        buf.write("\u0f8a\3\2\2\2\u0f89\u0f8b\5\u0294\u014b\2\u0f8a\u0f89")
        buf.write("\3\2\2\2\u0f8a\u0f8b\3\2\2\2\u0f8b\u0217\3\2\2\2\u0f8c")
        buf.write("\u0f8d\7\u01ab\2\2\u0f8d\u0f8e\5\u01f0\u00f9\2\u0f8e\u0f91")
        buf.write("\7\u017d\2\2\u0f8f\u0f92\5\u00dep\2\u0f90\u0f92\5\u01f0")
        buf.write("\u00f9\2\u0f91\u0f8f\3\2\2\2\u0f91\u0f90\3\2\2\2\u0f92")
        buf.write("\u0219\3\2\2\2\u0f93\u0f95\5\u0294\u014b\2\u0f94\u0f93")
        buf.write("\3\2\2\2\u0f94\u0f95\3\2\2\2\u0f95\u0f96\3\2\2\2\u0f96")
        buf.write("\u0f98\7\61\2\2\u0f97\u0f99\5\u021c\u010f\2\u0f98\u0f97")
        buf.write("\3\2\2\2\u0f99\u0f9a\3\2\2\2\u0f9a\u0f98\3\2\2\2\u0f9a")
        buf.write("\u0f9b\3\2\2\2\u0f9b\u0f9d\3\2\2\2\u0f9c\u0f9e\5\u021e")
        buf.write("\u0110\2\u0f9d\u0f9c\3\2\2\2\u0f9d\u0f9e\3\2\2\2\u0f9e")
        buf.write("\u0f9f\3\2\2\2\u0f9f\u0fa1\7}\2\2\u0fa0\u0fa2\7\61\2\2")
        buf.write("\u0fa1\u0fa0\3\2\2\2\u0fa1\u0fa2\3\2\2\2\u0fa2\u0fa4\3")
        buf.write("\2\2\2\u0fa3\u0fa5\5\u0294\u014b\2\u0fa4\u0fa3\3\2\2\2")
        buf.write("\u0fa4\u0fa5\3\2\2\2\u0fa5\u021b\3\2\2\2\u0fa6\u0fa7\7")
        buf.write("\u01ab\2\2\u0fa7\u0fa8\5\u01f0\u00f9\2\u0fa8\u0fab\7\u017d")
        buf.write("\2\2\u0fa9\u0fac\5\u00dep\2\u0faa\u0fac\5\u01f0\u00f9")
        buf.write("\2\u0fab\u0fa9\3\2\2\2\u0fab\u0faa\3\2\2\2\u0fac\u021d")
        buf.write("\3\2\2\2\u0fad\u0fb0\7x\2\2\u0fae\u0fb1\5\u00dep\2\u0faf")
        buf.write("\u0fb1\5\u01f0\u00f9\2\u0fb0\u0fae\3\2\2\2\u0fb0\u0faf")
        buf.write("\3\2\2\2\u0fb1\u021f\3\2\2\2\u0fb2\u0fb3\5\u02ce\u0168")
        buf.write("\2\u0fb3\u0fb4\5\u02e4\u0173\2\u0fb4\u0fc4\3\2\2\2\u0fb5")
        buf.write("\u0fc4\5\u02ca\u0166\2\u0fb6\u0fc4\5\u02d0\u0169\2\u0fb7")
        buf.write("\u0fc4\5\u02cc\u0167\2\u0fb8\u0fb9\7\u01ee\2\2\u0fb9\u0fba")
        buf.write("\5\u0220\u0111\2\u0fba\u0fbb\7\u01ef\2\2\u0fbb\u0fc4\3")
        buf.write("\2\2\2\u0fbc\u0fbd\7\u01ee\2\2\u0fbd\u0fbe\5\u0140\u00a1")
        buf.write("\2\u0fbe\u0fbf\7\u01ef\2\2\u0fbf\u0fc2\3\2\2\2\u0fc0\u0fc2")
        buf.write("\5\u01ec\u00f7\2\u0fc1\u0fbc\3\2\2\2\u0fc1\u0fc0\3\2\2")
        buf.write("\2\u0fc2\u0fc4\3\2\2\2\u0fc3\u0fb2\3\2\2\2\u0fc3\u0fb5")
        buf.write("\3\2\2\2\u0fc3\u0fb6\3\2\2\2\u0fc3\u0fb7\3\2\2\2\u0fc3")
        buf.write("\u0fb8\3\2\2\2\u0fc3\u0fc1\3\2\2\2\u0fc4\u0221\3\2\2\2")
        buf.write("\u0fc5\u0fc7\5\u01f0\u00f9\2\u0fc6\u0fc8\5\u0224\u0113")
        buf.write("\2\u0fc7\u0fc6\3\2\2\2\u0fc7\u0fc8\3\2\2\2\u0fc8\u0223")
        buf.write("\3\2\2\2\u0fc9\u0fca\7\u01f4\2\2\u0fca\u0fcf\5\u01f0\u00f9")
        buf.write("\2\u0fcb\u0fcc\7\u01f4\2\2\u0fcc\u0fce\5\u01f0\u00f9\2")
        buf.write("\u0fcd\u0fcb\3\2\2\2\u0fce\u0fd1\3\2\2\2\u0fcf\u0fcd\3")
        buf.write("\2\2\2\u0fcf\u0fd0\3\2\2\2\u0fd0\u0225\3\2\2\2\u0fd1\u0fcf")
        buf.write("\3\2\2\2\u0fd2\u0fdb\t\63\2\2\u0fd3\u0fd4\7\u01ee\2\2")
        buf.write("\u0fd4\u0fd5\5\u0140\u00a1\2\u0fd5\u0fd6\7\u01ef\2\2\u0fd6")
        buf.write("\u0fdc\3\2\2\2\u0fd7\u0fd8\7\u01ee\2\2\u0fd8\u0fd9\5\u01f0")
        buf.write("\u00f9\2\u0fd9\u0fda\7\u01ef\2\2\u0fda\u0fdc\3\2\2\2\u0fdb")
        buf.write("\u0fd3\3\2\2\2\u0fdb\u0fd7\3\2\2\2\u0fdc\u0227\3\2\2\2")
        buf.write("\u0fdd\u1107\5\u022a\u0116\2\u0fde\u0fdf\5\u02e6\u0174")
        buf.write("\2\u0fdf\u0fe1\5\u02bc\u015f\2\u0fe0\u0fe2\5\u023a\u011e")
        buf.write("\2\u0fe1\u0fe0\3\2\2\2\u0fe1\u0fe2\3\2\2\2\u0fe2\u1107")
        buf.write("\3\2\2\2\u0fe3\u0fe4\t\64\2\2\u0fe4\u0feb\7\u01ee\2\2")
        buf.write("\u0fe5\u0fe6\7\u00e8\2\2\u0fe6\u0fe7\7\u01ee\2\2\u0fe7")
        buf.write("\u0fe8\5\u0140\u00a1\2\u0fe8\u0fe9\7\u01ef\2\2\u0fe9\u0fec")
        buf.write("\3\2\2\2\u0fea\u0fec\5\u0200\u0101\2\u0feb\u0fe5\3\2\2")
        buf.write("\2\u0feb\u0fea\3\2\2\2\u0fec\u0fed\3\2\2\2\u0fed\u0fee")
        buf.write("\7\17\2\2\u0fee\u0fef\5\u02c2\u0162\2\u0fef\u0ff0\7\u01ef")
        buf.write("\2\2\u0ff0\u1107\3\2\2\2\u0ff1\u0ff2\7\67\2\2\u0ff2\u0ff3")
        buf.write("\7\u01ee\2\2\u0ff3\u0ff4\5\u0200\u0101\2\u0ff4\u0ff5\7")
        buf.write("\u019d\2\2\u0ff5\u0ff6\7\u00ef\2\2\u0ff6\u0ff7\7\u01ef")
        buf.write("\2\2\u0ff7\u1107\3\2\2\2\u0ff8\u0ff9\7;\2\2\u0ff9\u0ffb")
        buf.write("\7\u01ee\2\2\u0ffa\u0ffc\t\65\2\2\u0ffb\u0ffa\3\2\2\2")
        buf.write("\u0ffb\u0ffc\3\2\2\2\u0ffc\u0ffd\3\2\2\2\u0ffd\u0fff\5")
        buf.write("\u0200\u0101\2\u0ffe\u1000\5\u023e\u0120\2\u0fff\u0ffe")
        buf.write("\3\2\2\2\u0fff\u1000\3\2\2\2\u1000\u1001\3\2\2\2\u1001")
        buf.write("\u1002\7\u01ef\2\2\u1002\u1107\3\2\2\2\u1003\u1004\5\u022e")
        buf.write("\u0118\2\u1004\u1006\5\u02b8\u015d\2\u1005\u1007\5\u0240")
        buf.write("\u0121\2\u1006\u1005\3\2\2\2\u1007\u1008\3\2\2\2\u1008")
        buf.write("\u1006\3\2\2\2\u1008\u1009\3\2\2\2\u1009\u1107\3\2\2\2")
        buf.write("\u100a\u100b\7d\2\2\u100b\u100c\7\u01ee\2\2\u100c\u100e")
        buf.write("\5\u0200\u0101\2\u100d\u100f\t\66\2\2\u100e\u100d\3\2")
        buf.write("\2\2\u100e\u100f\3\2\2\2\u100f\u1010\3\2\2\2\u1010\u1011")
        buf.write("\7\u01ef\2\2\u1011\u1107\3\2\2\2\u1012\u1013\7\u008e\2")
        buf.write("\2\u1013\u1014\7\u01ee\2\2\u1014\u1015\5\u02e6\u0174\2")
        buf.write("\u1015\u1016\7\u009b\2\2\u1016\u1017\5\u0200\u0101\2\u1017")
        buf.write("\u1018\7\u01ef\2\2\u1018\u1107\3\2\2\2\u1019\u101a\t\67")
        buf.write("\2\2\u101a\u101c\5\u02ba\u015e\2\u101b\u101d\5\u02be\u0160")
        buf.write("\2\u101c\u101b\3\2\2\2\u101c\u101d\3\2\2\2\u101d\u101e")
        buf.write("\3\2\2\2\u101e\u101f\5\u0232\u011a\2\u101f\u1107\3\2\2")
        buf.write("\2\u1020\u1021\5\u0230\u0119\2\u1021\u1022\7\u01ee\2\2")
        buf.write("\u1022\u1027\5\u01f0\u00f9\2\u1023\u1024\7\u01f4\2\2\u1024")
        buf.write("\u1026\5\u01f0\u00f9\2\u1025\u1023\3\2\2\2\u1026\u1029")
        buf.write("\3\2\2\2\u1027\u1025\3\2\2\2\u1027\u1028\3\2\2\2\u1028")
        buf.write("\u102b\3\2\2\2\u1029\u1027\3\2\2\2\u102a\u102c\5\u0242")
        buf.write("\u0122\2\u102b\u102a\3\2\2\2\u102b\u102c\3\2\2\2\u102c")
        buf.write("\u102e\3\2\2\2\u102d\u102f\5\u023a\u011e\2\u102e\u102d")
        buf.write("\3\2\2\2\u102e\u102f\3\2\2\2\u102f\u1030\3\2\2\2\u1030")
        buf.write("\u1031\7\u01ef\2\2\u1031\u1107\3\2\2\2\u1032\u1033\7\u018a")
        buf.write("\2\2\u1033\u1034\7\u01ee\2\2\u1034\u1037\5\u01f0\u00f9")
        buf.write("\2\u1035\u1036\7\u019d\2\2\u1036\u1038\t8\2\2\u1037\u1035")
        buf.write("\3\2\2\2\u1037\u1038\3\2\2\2\u1038\u103d\3\2\2\2\u1039")
        buf.write("\u103a\7\u01f4\2\2\u103a\u103c\5\u01f0\u00f9\2\u103b\u1039")
        buf.write("\3\2\2\2\u103c\u103f\3\2\2\2\u103d\u103b\3\2\2\2\u103d")
        buf.write("\u103e\3\2\2\2\u103e\u1040\3\2\2\2\u103f\u103d\3\2\2\2")
        buf.write("\u1040\u1041\7\u01ef\2\2\u1041\u1107\3\2\2\2\u1042\u1043")
        buf.write("\7\u018b\2\2\u1043\u1044\7\u01ee\2\2\u1044\u1045\5\u01f0")
        buf.write("\u00f9\2\u1045\u1047\7\17\2\2\u1046\u1048\7\u0132\2\2")
        buf.write("\u1047\u1046\3\2\2\2\u1047\u1048\3\2\2\2\u1048\u1049\3")
        buf.write("\2\2\2\u1049\u104a\5\u02c2\u0162\2\u104a\u104b\7\u01ef")
        buf.write("\2\2\u104b\u1107\3\2\2\2\u104c\u104d\7\u018d\2\2\u104d")
        buf.write("\u1055\7\u01ee\2\2\u104e\u1050\t9\2\2\u104f\u104e\3\2")
        buf.write("\2\2\u104f\u1050\3\2\2\2\u1050\u1052\3\2\2\2\u1051\u1053")
        buf.write("\5\u02d6\u016c\2\u1052\u1051\3\2\2\2\u1052\u1053\3\2\2")
        buf.write("\2\u1053\u1054\3\2\2\2\u1054\u1056\7\u009b\2\2\u1055\u104f")
        buf.write("\3\2\2\2\u1055\u1056\3\2\2\2\u1056\u1057\3\2\2\2\u1057")
        buf.write("\u1058\5\u0200\u0101\2\u1058\u1059\7\u01ef\2\2\u1059\u1107")
        buf.write("\3\2\2\2\u105a\u105b\7\u01b4\2\2\u105b\u105c\7\u01ee\2")
        buf.write("\2\u105c\u105e\5\u01f0\u00f9\2\u105d\u105f\5\u019c\u00cf")
        buf.write("\2\u105e\u105d\3\2\2\2\u105e\u105f\3\2\2\2\u105f\u1060")
        buf.write("\3\2\2\2\u1060\u1063\7\u01ef\2\2\u1061\u1062\7\u01e7\2")
        buf.write("\2\u1062\u1064\5\u02cc\u0167\2\u1063\u1061\3\2\2\2\u1063")
        buf.write("\u1064\3\2\2\2\u1064\u1107\3\2\2\2\u1065\u1066\t:\2\2")
        buf.write("\u1066\u1067\7\u01ee\2\2\u1067\u106c\5\u024e\u0128\2\u1068")
        buf.write("\u1069\7\u01f4\2\2\u1069\u106b\5\u024e\u0128\2\u106a\u1068")
        buf.write("\3\2\2\2\u106b\u106e\3\2\2\2\u106c\u106a\3\2\2\2\u106c")
        buf.write("\u106d\3\2\2\2\u106d\u106f\3\2\2\2\u106e\u106c\3\2\2\2")
        buf.write("\u106f\u1072\7\u01ef\2\2\u1070\u1071\7\u01e7\2\2\u1071")
        buf.write("\u1073\5\u02cc\u0167\2\u1072\u1070\3\2\2\2\u1072\u1073")
        buf.write("\3\2\2\2\u1073\u1107\3\2\2\2\u1074\u1075\7\u01b8\2\2\u1075")
        buf.write("\u1077\7\u01ee\2\2\u1076\u1078\t;\2\2\u1077\u1076\3\2")
        buf.write("\2\2\u1077\u1078\3\2\2\2\u1078\u107a\3\2\2\2\u1079\u107b")
        buf.write("\t<\2\2\u107a\u1079\3\2\2\2\u107a\u107b\3\2\2\2\u107b")
        buf.write("\u107c\3\2\2\2\u107c\u107f\5\u01f0\u00f9\2\u107d\u107e")
        buf.write("\7\u01f4\2\2\u107e\u1080\5\u0246\u0124\2\u107f\u107d\3")
        buf.write("\2\2\2\u107f\u1080\3\2\2\2\u1080\u1088\3\2\2\2\u1081\u1082")
        buf.write("\7\u01f4\2\2\u1082\u1084\5\u01f0\u00f9\2\u1083\u1085\5")
        buf.write("\u0268\u0135\2\u1084\u1083\3\2\2\2\u1084\u1085\3\2\2\2")
        buf.write("\u1085\u1087\3\2\2\2\u1086\u1081\3\2\2\2\u1087\u108a\3")
        buf.write("\2\2\2\u1088\u1086\3\2\2\2\u1088\u1089\3\2\2\2\u1089\u108b")
        buf.write("\3\2\2\2\u108a\u1088\3\2\2\2\u108b\u108e\7\u01ef\2\2\u108c")
        buf.write("\u108d\7\u01e7\2\2\u108d\u108f\5\u02cc\u0167\2\u108e\u108c")
        buf.write("\3\2\2\2\u108e\u108f\3\2\2\2\u108f\u1107\3\2\2\2\u1090")
        buf.write("\u1091\7\u01b9\2\2\u1091\u1092\7\u01ee\2\2\u1092\u1094")
        buf.write("\5\u01f0\u00f9\2\u1093\u1095\5\u0244\u0123\2\u1094\u1093")
        buf.write("\3\2\2\2\u1094\u1095\3\2\2\2\u1095\u1096\3\2\2\2\u1096")
        buf.write("\u1097\7\u01ef\2\2\u1097\u1107\3\2\2\2\u1098\u1099\7\u01bc")
        buf.write("\2\2\u1099\u109a\7\u01ee\2\2\u109a\u109b\t=\2\2\u109b")
        buf.write("\u109d\5\u0200\u0101\2\u109c\u109e\7\u01aa\2\2\u109d\u109c")
        buf.write("\3\2\2\2\u109d\u109e\3\2\2\2\u109e\u109f\3\2\2\2\u109f")
        buf.write("\u10a2\7\u01ef\2\2\u10a0\u10a1\7\u01e7\2\2\u10a1\u10a3")
        buf.write("\5\u02cc\u0167\2\u10a2\u10a0\3\2\2\2\u10a2\u10a3\3\2\2")
        buf.write("\2\u10a3\u1107\3\2\2\2\u10a4\u10a5\7\u01bd\2\2\u10a5\u10aa")
        buf.write("\7\u01ee\2\2\u10a6\u10a7\7\u00e9\2\2\u10a7\u10ab\5\u02d8")
        buf.write("\u016d\2\u10a8\u10a9\7\u0082\2\2\u10a9\u10ab\5\u0200\u0101")
        buf.write("\2\u10aa\u10a6\3\2\2\2\u10aa\u10a8\3\2\2\2\u10ab\u10ae")
        buf.write("\3\2\2\2\u10ac\u10ad\7\u01f4\2\2\u10ad\u10af\5\u0200\u0101")
        buf.write("\2\u10ae\u10ac\3\2\2\2\u10ae\u10af\3\2\2\2\u10af\u10b0")
        buf.write("\3\2\2\2\u10b0\u10b3\7\u01ef\2\2\u10b1\u10b2\7\u01e7\2")
        buf.write("\2\u10b2\u10b4\5\u02cc\u0167\2\u10b3\u10b1\3\2\2\2\u10b3")
        buf.write("\u10b4\3\2\2\2\u10b4\u1107\3\2\2\2\u10b5\u10b6\7\u01be")
        buf.write("\2\2\u10b6\u10b7\7\u01ee\2\2\u10b7\u10b9\5\u0200\u0101")
        buf.write("\2\u10b8\u10ba\5\u0244\u0123\2\u10b9\u10b8\3\2\2\2\u10b9")
        buf.write("\u10ba\3\2\2\2\u10ba\u10bb\3\2\2\2\u10bb\u10bc\7\u013e")
        buf.write("\2\2\u10bc\u10c0\7I\2\2\u10bd\u10be\7\u0100\2\2\u10be")
        buf.write("\u10bf\7\u010a\2\2\u10bf\u10c1\7z\2\2\u10c0\u10bd\3\2")
        buf.write("\2\2\u10c0\u10c1\3\2\2\2\u10c1\u10c2\3\2\2\2\u10c2\u10c5")
        buf.write("\7\u01ef\2\2\u10c3\u10c4\7\u01e7\2\2\u10c4\u10c6\5\u02cc")
        buf.write("\u0167\2\u10c5\u10c3\3\2\2\2\u10c5\u10c6\3\2\2\2\u10c6")
        buf.write("\u1107\3\2\2\2\u10c7\u10c8\7\u01bf\2\2\u10c8\u10c9\7\u01ee")
        buf.write("\2\2\u10c9\u10cc\5\u0200\u0101\2\u10ca\u10cb\7\u01f4\2")
        buf.write("\2\u10cb\u10cd\5\u0250\u0129\2\u10cc\u10ca\3\2\2\2\u10cc")
        buf.write("\u10cd\3\2\2\2\u10cd\u10d0\3\2\2\2\u10ce\u10cf\7\u01f4")
        buf.write("\2\2\u10cf\u10d1\5\u0252\u012a\2\u10d0\u10ce\3\2\2\2\u10d0")
        buf.write("\u10d1\3\2\2\2\u10d1\u10d2\3\2\2\2\u10d2\u10d5\7\u01ef")
        buf.write("\2\2\u10d3\u10d4\7\u01e7\2\2\u10d4\u10d6\5\u02cc\u0167")
        buf.write("\2\u10d5\u10d3\3\2\2\2\u10d5\u10d6\3\2\2\2\u10d6\u1107")
        buf.write("\3\2\2\2\u10d7\u10d8\7\u01c0\2\2\u10d8\u10d9\7\u01ee\2")
        buf.write("\2\u10d9\u10da\t=\2\2\u10da\u10dd\5\u0200\u0101\2\u10db")
        buf.write("\u10dc\7\17\2\2\u10dc\u10de\5\u02c2\u0162\2\u10dd\u10db")
        buf.write("\3\2\2\2\u10dd\u10de\3\2\2\2\u10de\u10e0\3\2\2\2\u10df")
        buf.write("\u10e1\5\u0254\u012b\2\u10e0\u10df\3\2\2\2\u10e0\u10e1")
        buf.write("\3\2\2\2\u10e1\u10e3\3\2\2\2\u10e2\u10e4\5\u0256\u012c")
        buf.write("\2\u10e3\u10e2\3\2\2\2\u10e3\u10e4\3\2\2\2\u10e4\u10e6")
        buf.write("\3\2\2\2\u10e5\u10e7\5\u0258\u012d\2\u10e6\u10e5\3\2\2")
        buf.write("\2\u10e6\u10e7\3\2\2\2\u10e7\u10ea\3\2\2\2\u10e8\u10e9")
        buf.write("\t>\2\2\u10e9\u10eb\7g\2\2\u10ea\u10e8\3\2\2\2\u10ea\u10eb")
        buf.write("\3\2\2\2\u10eb\u10ec\3\2\2\2\u10ec\u10ef\7\u01ef\2\2\u10ed")
        buf.write("\u10ee\7\u01e7\2\2\u10ee\u10f0\5\u02cc\u0167\2\u10ef\u10ed")
        buf.write("\3\2\2\2\u10ef\u10f0\3\2\2\2\u10f0\u1107\3\2\2\2\u10f1")
        buf.write("\u10f2\7\u01c1\2\2\u10f2\u10f4\7\u01ee\2\2\u10f3\u10f5")
        buf.write("\5\u0248\u0125\2\u10f4\u10f3\3\2\2\2\u10f4\u10f5\3\2\2")
        buf.write("\2\u10f5\u10f6\3\2\2\2\u10f6\u10f8\5\u0200\u0101\2\u10f7")
        buf.write("\u10f9\5\u0244\u0123\2\u10f8\u10f7\3\2\2\2\u10f8\u10f9")
        buf.write("\3\2\2\2\u10f9\u10ff\3\2\2\2\u10fa\u10fb\7<\2\2\u10fb")
        buf.write("\u10fc\5\u024a\u0126\2\u10fc\u10fd\7\u01f4\2\2\u10fd\u10fe")
        buf.write("\5\u024a\u0126\2\u10fe\u1100\3\2\2\2\u10ff\u10fa\3\2\2")
        buf.write("\2\u10ff\u1100\3\2\2\2\u1100\u1101\3\2\2\2\u1101\u1104")
        buf.write("\7\u01ef\2\2\u1102\u1103\7\u01e7\2\2\u1103\u1105\5\u02cc")
        buf.write("\u0167\2\u1104\u1102\3\2\2\2\u1104\u1105\3\2\2\2\u1105")
        buf.write("\u1107\3\2\2\2\u1106\u0fdd\3\2\2\2\u1106\u0fde\3\2\2\2")
        buf.write("\u1106\u0fe3\3\2\2\2\u1106\u0ff1\3\2\2\2\u1106\u0ff8\3")
        buf.write("\2\2\2\u1106\u1003\3\2\2\2\u1106\u100a\3\2\2\2\u1106\u1012")
        buf.write("\3\2\2\2\u1106\u1019\3\2\2\2\u1106\u1020\3\2\2\2\u1106")
        buf.write("\u1032\3\2\2\2\u1106\u1042\3\2\2\2\u1106\u104c\3\2\2\2")
        buf.write("\u1106\u105a\3\2\2\2\u1106\u1065\3\2\2\2\u1106\u1074\3")
        buf.write("\2\2\2\u1106\u1090\3\2\2\2\u1106\u1098\3\2\2\2\u1106\u10a4")
        buf.write("\3\2\2\2\u1106\u10b5\3\2\2\2\u1106\u10c7\3\2\2\2\u1106")
        buf.write("\u10d7\3\2\2\2\u1106\u10f1\3\2\2\2\u1107\u0229\3\2\2\2")
        buf.write("\u1108\u1109\5\u022c\u0117\2\u1109\u110b\5\u02ba\u015e")
        buf.write("\2\u110a\u110c\5\u0232\u011a\2\u110b\u110a\3\2\2\2\u110b")
        buf.write("\u110c\3\2\2\2\u110c\u111b\3\2\2\2\u110d\u110e\7P\2\2")
        buf.write("\u110e\u1114\7\u01ee\2\2\u110f\u1115\7\u01f1\2\2\u1110")
        buf.write("\u1112\t!\2\2\u1111\u1110\3\2\2\2\u1111\u1112\3\2\2\2")
        buf.write("\u1112\u1113\3\2\2\2\u1113\u1115\5\u0200\u0101\2\u1114")
        buf.write("\u110f\3\2\2\2\u1114\u1111\3\2\2\2\u1115\u1116\3\2\2\2")
        buf.write("\u1116\u1118\7\u01ef\2\2\u1117\u1119\5\u0232\u011a\2\u1118")
        buf.write("\u1117\3\2\2\2\u1118\u1119\3\2\2\2\u1119\u111b\3\2\2\2")
        buf.write("\u111a\u1108\3\2\2\2\u111a\u110d\3\2\2\2\u111b\u022b\3")
        buf.write("\2\2\2\u111c\u111d\t?\2\2\u111d\u022d\3\2\2\2\u111e\u111f")
        buf.write("\t@\2\2\u111f\u022f\3\2\2\2\u1120\u1121\tA\2\2\u1121\u0231")
        buf.write("\3\2\2\2\u1122\u1123\7\u0115\2\2\u1123\u1125\7\u01ee\2")
        buf.write("\2\u1124\u1126\5\u0158\u00ad\2\u1125\u1124\3\2\2\2\u1125")
        buf.write("\u1126\3\2\2\2\u1126\u112b\3\2\2\2\u1127\u1129\5\u019c")
        buf.write("\u00cf\2\u1128\u112a\5\u0234\u011b\2\u1129\u1128\3\2\2")
        buf.write("\2\u1129\u112a\3\2\2\2\u112a\u112c\3\2\2\2\u112b\u1127")
        buf.write("\3\2\2\2\u112b\u112c\3\2\2\2\u112c\u112d\3\2\2\2\u112d")
        buf.write("\u112e\7\u01ef\2\2\u112e\u0233\3\2\2\2\u112f\u1136\5\u0236")
        buf.write("\u011c\2\u1130\u1131\7\36\2\2\u1131\u1132\5\u0238\u011d")
        buf.write("\2\u1132\u1133\7\f\2\2\u1133\u1134\5\u0238\u011d\2\u1134")
        buf.write("\u1137\3\2\2\2\u1135\u1137\5\u0238\u011d\2\u1136\u1130")
        buf.write("\3\2\2\2\u1136\u1135\3\2\2\2\u1137\u0235\3\2\2\2\u1138")
        buf.write("\u1139\tB\2\2\u1139\u0237\3\2\2\2\u113a\u113b\7\u0191")
        buf.write("\2\2\u113b\u1142\7\u0127\2\2\u113c\u113d\7T\2\2\u113d")
        buf.write("\u1142\7\u0145\2\2\u113e\u113f\5\u0200\u0101\2\u113f\u1140")
        buf.write("\tC\2\2\u1140\u1142\3\2\2\2\u1141\u113a\3\2\2\2\u1141")
        buf.write("\u113c\3\2\2\2\u1141\u113e\3\2\2\2\u1142\u0239\3\2\2\2")
        buf.write("\u1143\u114d\7\u019d\2\2\u1144\u114e\7\u01f1\2\2\u1145")
        buf.write("\u114a\5\u023c\u011f\2\u1146\u1147\7\u01f4\2\2\u1147\u1149")
        buf.write("\5\u023c\u011f\2\u1148\u1146\3\2\2\2\u1149\u114c\3\2\2")
        buf.write("\2\u114a\u1148\3\2\2\2\u114a\u114b\3\2\2\2\u114b\u114e")
        buf.write("\3\2\2\2\u114c\u114a\3\2\2\2\u114d\u1144\3\2\2\2\u114d")
        buf.write("\u1145\3\2\2\2\u114e\u023b\3\2\2\2\u114f\u1151\7\u00a9")
        buf.write("\2\2\u1150\u1152\7\u0113\2\2\u1151\u1150\3\2\2\2\u1151")
        buf.write("\u1152\3\2\2\2\u1152\u1155\3\2\2\2\u1153\u1155\7\u0113")
        buf.write("\2\2\u1154\u114f\3\2\2\2\u1154\u1153\3\2\2\2\u1154\u1155")
        buf.write("\3\2\2\2\u1155\u1156\3\2\2\2\u1156\u1158\5\u0146\u00a4")
        buf.write("\2\u1157\u1159\5\u0268\u0135\2\u1158\u1157\3\2\2\2\u1158")
        buf.write("\u1159\3\2\2\2\u1159\u023d\3\2\2\2\u115a\u115b\7\u0110")
        buf.write("\2\2\u115b\u115c\7*\2\2\u115c\u115d\5\u0200\u0101\2\u115d")
        buf.write("\u023f\3\2\2\2\u115e\u115f\7\u01b0\2\2\u115f\u1160\7\u00a0")
        buf.write("\2\2\u1160\u1161\7\u01ee\2\2\u1161\u1162\5\u019c\u00cf")
        buf.write("\2\u1162\u1163\7\u01ef\2\2\u1163\u1166\3\2\2\2\u1164\u1166")
        buf.write("\5\u0232\u011a\2\u1165\u115e\3\2\2\2\u1165\u1164\3\2\2")
        buf.write("\2\u1166\u0241\3\2\2\2\u1167\u1179\7O\2\2\u1168\u116a")
        buf.write("\7\u00e5\2\2\u1169\u116b\7\30\2\2\u116a\u1169\3\2\2\2")
        buf.write("\u116a\u116b\3\2\2\2\u116b\u117a\3\2\2\2\u116c\u116d\7")
        buf.write("\u01ee\2\2\u116d\u1172\5\u0276\u013c\2\u116e\u116f\7\u01f4")
        buf.write("\2\2\u116f\u1171\5\u0276\u013c\2\u1170\u116e\3\2\2\2\u1171")
        buf.write("\u1174\3\2\2\2\u1172\u1170\3\2\2\2\u1172\u1173\3\2\2\2")
        buf.write("\u1173\u1175\3\2\2\2\u1174\u1172\3\2\2\2\u1175\u1176\7")
        buf.write("\u01ef\2\2\u1176\u1177\7\u01a0\2\2\u1177\u1178\5\u01ec")
        buf.write("\u00f7\2\u1178\u117a\3\2\2\2\u1179\u1168\3\2\2\2\u1179")
        buf.write("\u116c\3\2\2\2\u117a\u0243\3\2\2\2\u117b\u117e\7\u011c")
        buf.write("\2\2\u117c\u117d\7*\2\2\u117d\u117f\7\u019f\2\2\u117e")
        buf.write("\u117c\3\2\2\2\u117e\u117f\3\2\2\2\u117f\u1180\3\2\2\2")
        buf.write("\u1180\u1182\5\u01f0\u00f9\2\u1181\u1183\5\u0268\u0135")
        buf.write("\2\u1182\u1181\3\2\2\2\u1182\u1183\3\2\2\2\u1183\u1184")
        buf.write("\3\2\2\2\u1184\u1185\7\u01f4\2\2\u1185\u1187\5\u01f0\u00f9")
        buf.write("\2\u1186\u1188\5\u0268\u0135\2\u1187\u1186\3\2\2\2\u1187")
        buf.write("\u1188\3\2\2\2\u1188\u0245\3\2\2\2\u1189\u118a\7\u01b5")
        buf.write("\2\2\u118a\u118c\7\u01ee\2\2\u118b\u118d\t;\2\2\u118c")
        buf.write("\u118b\3\2\2\2\u118c\u118d\3\2\2\2\u118d\u118f\3\2\2\2")
        buf.write("\u118e\u1190\tD\2\2\u118f\u118e\3\2\2\2\u118f\u1190\3")
        buf.write("\2\2\2\u1190\u1191\3\2\2\2\u1191\u1196\5\u024e\u0128\2")
        buf.write("\u1192\u1193\7\u01f4\2\2\u1193\u1195\5\u024e\u0128\2\u1194")
        buf.write("\u1192\3\2\2\2\u1195\u1198\3\2\2\2\u1196\u1194\3\2\2\2")
        buf.write("\u1196\u1197\3\2\2\2\u1197\u1199\3\2\2\2\u1198\u1196\3")
        buf.write("\2\2\2\u1199\u119a\7\u01ef\2\2\u119a\u0247\3\2\2\2\u119b")
        buf.write("\u119c\7\u01bb\2\2\u119c\u11a0\7\u01ee\2\2\u119d\u119e")
        buf.write("\5\u0200\u0101\2\u119e\u119f\5\u0268\u0135\2\u119f\u11a1")
        buf.write("\3\2\2\2\u11a0\u119d\3\2\2\2\u11a0\u11a1\3\2\2\2\u11a1")
        buf.write("\u11a8\3\2\2\2\u11a2\u11a3\7\u01f4\2\2\u11a3\u11a4\5\u0200")
        buf.write("\u0101\2\u11a4\u11a5\5\u0268\u0135\2\u11a5\u11a7\3\2\2")
        buf.write("\2\u11a6\u11a2\3\2\2\2\u11a7\u11aa\3\2\2\2\u11a8\u11a6")
        buf.write("\3\2\2\2\u11a8\u11a9\3\2\2\2\u11a9\u11ac\3\2\2\2\u11aa")
        buf.write("\u11a8\3\2\2\2\u11ab\u11ad\5\u024c\u0127\2\u11ac\u11ab")
        buf.write("\3\2\2\2\u11ac\u11ad\3\2\2\2\u11ad\u11ae\3\2\2\2\u11ae")
        buf.write("\u11af\7\u01ef\2\2\u11af\u0249\3\2\2\2\u11b0\u11bb\5\u0274")
        buf.write("\u013b\2\u11b1\u11b2\7\u0098\2\2\u11b2\u11bc\7\u0111\2")
        buf.write("\2\u11b3\u11b6\5\u02c2\u0162\2\u11b4\u11b5\7\u011d\2\2")
        buf.write("\u11b5\u11b7\5\u0200\u0101\2\u11b6\u11b4\3\2\2\2\u11b6")
        buf.write("\u11b7\3\2\2\2\u11b7\u11b9\3\2\2\2\u11b8\u11ba\5\u024c")
        buf.write("\u0127\2\u11b9\u11b8\3\2\2\2\u11b9\u11ba\3\2\2\2\u11ba")
        buf.write("\u11bc\3\2\2\2\u11bb\u11b1\3\2\2\2\u11bb\u11b3\3\2\2\2")
        buf.write("\u11bc\u024b\3\2\2\2\u11bd\u11be\7f\2\2\u11be\u11bf\5")
        buf.write("\u0200\u0101\2\u11bf\u024d\3\2\2\2\u11c0\u11c7\5\u01f0")
        buf.write("\u00f9\2\u11c1\u11c5\7\17\2\2\u11c2\u11c6\5\u02da\u016e")
        buf.write("\2\u11c3\u11c4\7\u0082\2\2\u11c4\u11c6\5\u0200\u0101\2")
        buf.write("\u11c5\u11c2\3\2\2\2\u11c5\u11c3\3\2\2\2\u11c6\u11c8\3")
        buf.write("\2\2\2\u11c7\u11c1\3\2\2\2\u11c7\u11c8\3\2\2\2\u11c8\u024f")
        buf.write("\3\2\2\2\u11c9\u11cd\7\u01a6\2\2\u11ca\u11cb\7\u00f3\2")
        buf.write("\2\u11cb\u11ce\7\u019f\2\2\u11cc\u11ce\5\u01f0\u00f9\2")
        buf.write("\u11cd\u11ca\3\2\2\2\u11cd\u11cc\3\2\2\2\u11ce\u0251\3")
        buf.write("\2\2\2\u11cf\u11d5\7\u016d\2\2\u11d0\u11d6\7\u01c3\2\2")
        buf.write("\u11d1\u11d3\7\u00f3\2\2\u11d2\u11d4\7\u019f\2\2\u11d3")
        buf.write("\u11d2\3\2\2\2\u11d3\u11d4\3\2\2\2\u11d4\u11d6\3\2\2\2")
        buf.write("\u11d5\u11d0\3\2\2\2\u11d5\u11d1\3\2\2\2\u11d6\u0253\3")
        buf.write("\2\2\2\u11d7\u11d8\7|\2\2\u11d8\u11d9\5\u0200\u0101\2")
        buf.write("\u11d9\u0255\3\2\2\2\u11da\u11db\7\u01a6\2\2\u11db\u11dc")
        buf.write("\5\u0200\u0101\2\u11dc\u0257\3\2\2\2\u11dd\u11de\7\u00f3")
        buf.write("\2\2\u11de\u11e6\7\u00ad\2\2\u11df\u11e3\7\u00ad\2\2\u11e0")
        buf.write("\u11e1\7\u0165\2\2\u11e1\u11e2\7\u0205\2\2\u11e2\u11e4")
        buf.write("\5\u0200\u0101\2\u11e3\u11e0\3\2\2\2\u11e3\u11e4\3\2\2")
        buf.write("\2\u11e4\u11e6\3\2\2\2\u11e5\u11dd\3\2\2\2\u11e5\u11df")
        buf.write("\3\2\2\2\u11e6\u0259\3\2\2\2\u11e7\u11ee\7\u01f5\2\2\u11e8")
        buf.write("\u11ee\5\u025c\u012f\2\u11e9\u11ee\5\u0260\u0131\2\u11ea")
        buf.write("\u11ee\5\u0262\u0132\2\u11eb\u11ee\5\u025e\u0130\2\u11ec")
        buf.write("\u11ee\5\u0264\u0133\2\u11ed\u11e7\3\2\2\2\u11ed\u11e8")
        buf.write("\3\2\2\2\u11ed\u11e9\3\2\2\2\u11ed\u11ea\3\2\2\2\u11ed")
        buf.write("\u11eb\3\2\2\2\u11ed\u11ec\3\2\2\2\u11ee\u025b\3\2\2\2")
        buf.write("\u11ef\u11f0\7\u01ac\2\2\u11f0\u11f6\tE\2\2\u11f1\u11f2")
        buf.write("\7\u008b\2\2\u11f2\u11f3\tF\2\2\u11f3\u11f7\tG\2\2\u11f4")
        buf.write("\u11f5\7K\2\2\u11f5\u11f7\tH\2\2\u11f6\u11f1\3\2\2\2\u11f6")
        buf.write("\u11f4\3\2\2\2\u11f7\u025d\3\2\2\2\u11f8\u11f9\7\u015b")
        buf.write("\2\2\u11f9\u11ff\5\u02e6\u0174\2\u11fa\u1200\7\u01ea\2")
        buf.write("\2\u11fb\u1200\7\u010a\2\2\u11fc\u1200\7\u0107\2\2\u11fd")
        buf.write("\u1200\5\u02d2\u016a\2\u11fe\u1200\5\u02e6\u0174\2\u11ff")
        buf.write("\u11fa\3\2\2\2\u11ff\u11fb\3\2\2\2\u11ff\u11fc\3\2\2\2")
        buf.write("\u11ff\u11fd\3\2\2\2\u11ff\u11fe\3\2\2\2\u1200\u025f\3")
        buf.write("\2\2\2\u1201\u1202\7\u008b\2\2\u1202\u0261\3\2\2\2\u1203")
        buf.write("\u1204\7\u020c\2\2\u1204\u0263\3\2\2\2\u1205\u1206\7\u015f")
        buf.write("\2\2\u1206\u120a\7\177\2\2\u1207\u1208\7\u015f\2\2\u1208")
        buf.write("\u120a\7\u0080\2\2\u1209\u1205\3\2\2\2\u1209\u1207\3\2")
        buf.write("\2\2\u120a\u0265\3\2\2\2\u120b\u120d\tI\2\2\u120c\u120e")
        buf.write("\7\u0098\2\2\u120d\u120c\3\2\2\2\u120d\u120e\3\2\2\2\u120e")
        buf.write("\u120f\3\2\2\2\u120f\u1210\5\u01ec\u00f7\2\u1210\u0267")
        buf.write("\3\2\2\2\u1211\u1213\7\17\2\2\u1212\u1211\3\2\2\2\u1212")
        buf.write("\u1213\3\2\2\2\u1213\u1216\3\2\2\2\u1214\u1217\5\u02d8")
        buf.write("\u016d\2\u1215\u1217\5\u026c\u0137\2\u1216\u1214\3\2\2")
        buf.write("\2\u1216\u1215\3\2\2\2\u1217\u121a\3\2\2\2\u1218\u121a")
        buf.write("\7\17\2\2\u1219\u1212\3\2\2\2\u1219\u1218\3\2\2\2\u121a")
        buf.write("\u0269\3\2\2\2\u121b\u121d\7\17\2\2\u121c\u121b\3\2\2")
        buf.write("\2\u121c\u121d\3\2\2\2\u121d\u1220\3\2\2\2\u121e\u1221")
        buf.write("\5\u02d8\u016d\2\u121f\u1221\5\u026c\u0137\2\u1220\u121e")
        buf.write("\3\2\2\2\u1220\u121f\3\2\2\2\u1221\u026b\3\2\2\2\u1222")
        buf.write("\u1223\5\u02d6\u016c\2\u1223\u026d\3\2\2\2\u1224\u1227")
        buf.write("\7\u01ad\2\2\u1225\u1228\5\u0270\u0139\2\u1226\u1228\5")
        buf.write("\u01f0\u00f9\2\u1227\u1225\3\2\2\2\u1227\u1226\3\2\2\2")
        buf.write("\u1228\u026f\3\2\2\2\u1229\u122a\7T\2\2\u122a\u122b\7")
        buf.write("\u0106\2\2\u122b\u122c\5\u02a6\u0154\2\u122c\u0271\3\2")
        buf.write("\2\2\u122d\u122e\7\u00bd\2\2\u122e\u1233\5\u02a2\u0152")
        buf.write("\2\u122f\u1230\7\u01f4\2\2\u1230\u1232\5\u02a2\u0152\2")
        buf.write("\u1231\u122f\3\2\2\2\u1232\u1235\3\2\2\2\u1233\u1231\3")
        buf.write("\2\2\2\u1233\u1234\3\2\2\2\u1234\u1242\3\2\2\2\u1235\u1233")
        buf.write("\3\2\2\2\u1236\u1237\7)\2\2\u1237\u1238\7;\2\2\u1238\u1239")
        buf.write("\7\u00bd\2\2\u1239\u123e\5\u02a2\u0152\2\u123a\u123b\7")
        buf.write("\u01f4\2\2\u123b\u123d\5\u02a2\u0152\2\u123c\u123a\3\2")
        buf.write("\2\2\u123d\u1240\3\2\2\2\u123e\u123c\3\2\2\2\u123e\u123f")
        buf.write("\3\2\2\2\u123f\u1242\3\2\2\2\u1240\u123e\3\2\2\2\u1241")
        buf.write("\u122d\3\2\2\2\u1241\u1236\3\2\2\2\u1242\u0273\3\2\2\2")
        buf.write("\u1243\u1246\5\u02d8\u016d\2\u1244\u1246\5\u02d6\u016c")
        buf.write("\2\u1245\u1243\3\2\2\2\u1245\u1244\3\2\2\2\u1246\u0275")
        buf.write("\3\2\2\2\u1247\u1248\5\u02d8\u016d\2\u1248\u0277\3\2\2")
        buf.write("\2\u1249\u124a\5\u02d8\u016d\2\u124a\u0279\3\2\2\2\u124b")
        buf.write("\u124c\5\u02d8\u016d\2\u124c\u027b\3\2\2\2\u124d\u124e")
        buf.write("\5\u02d8\u016d\2\u124e\u027d\3\2\2\2\u124f\u1250\5\u02d8")
        buf.write("\u016d\2\u1250\u027f\3\2\2\2\u1251\u1252\5\u02d8\u016d")
        buf.write("\2\u1252\u0281\3\2\2\2\u1253\u1258\5\u02d8\u016d\2\u1254")
        buf.write("\u1255\7\u01e7\2\2\u1255\u1257\5\u02da\u016e\2\u1256\u1254")
        buf.write("\3\2\2\2\u1257\u125a\3\2\2\2\u1258\u1256\3\2\2\2\u1258")
        buf.write("\u1259\3\2\2\2\u1259\u125d\3\2\2\2\u125a\u1258\3\2\2\2")
        buf.write("\u125b\u125c\7\u01f6\2\2\u125c\u125e\5\u02ac\u0157\2\u125d")
        buf.write("\u125b\3\2\2\2\u125d\u125e\3\2\2\2\u125e\u0283\3\2\2\2")
        buf.write("\u125f\u1260\5\u02d8\u016d\2\u1260\u0285\3\2\2\2\u1261")
        buf.write("\u1264\5\u02d8\u016d\2\u1262\u1263\7\u01e7\2\2\u1263\u1265")
        buf.write("\5\u02da\u016e\2\u1264\u1262\3\2\2\2\u1264\u1265\3\2\2")
        buf.write("\2\u1265\u0287\3\2\2\2\u1266\u1267\5\u02d8\u016d\2\u1267")
        buf.write("\u0289\3\2\2\2\u1268\u1269\5\u02d8\u016d\2\u1269\u028b")
        buf.write("\3\2\2\2\u126a\u126b\5\u02d8\u016d\2\u126b\u028d\3\2\2")
        buf.write("\2\u126c\u1271\5\u02d8\u016d\2\u126d\u126e\7\u01e7\2\2")
        buf.write("\u126e\u1270\5\u02da\u016e\2\u126f\u126d\3\2\2\2\u1270")
        buf.write("\u1273\3\2\2\2\u1271\u126f\3\2\2\2\u1271\u1272\3\2\2\2")
        buf.write("\u1272\u028f\3\2\2\2\u1273\u1271\3\2\2\2\u1274\u1275\5")
        buf.write("\u02d8\u016d\2\u1275\u0291\3\2\2\2\u1276\u127b\5\u02d8")
        buf.write("\u016d\2\u1277\u1278\7\u01e7\2\2\u1278\u127a\5\u02da\u016e")
        buf.write("\2\u1279\u1277\3\2\2\2\u127a\u127d\3\2\2\2\u127b\u1279")
        buf.write("\3\2\2\2\u127b\u127c\3\2\2\2\u127c\u1280\3\2\2\2\u127d")
        buf.write("\u127b\3\2\2\2\u127e\u127f\7\u01f6\2\2\u127f\u1281\5\u02ac")
        buf.write("\u0157\2\u1280\u127e\3\2\2\2\u1280\u1281\3\2\2\2\u1281")
        buf.write("\u0293\3\2\2\2\u1282\u1283\5\u02da\u016e\2\u1283\u0295")
        buf.write("\3\2\2\2\u1284\u1289\5\u02da\u016e\2\u1285\u1286\7\u01e7")
        buf.write("\2\2\u1286\u1288\5\u02da\u016e\2\u1287\u1285\3\2\2\2\u1288")
        buf.write("\u128b\3\2\2\2\u1289\u1287\3\2\2\2\u1289\u128a\3\2\2\2")
        buf.write("\u128a\u0297\3\2\2\2\u128b\u1289\3\2\2\2\u128c\u1291\5")
        buf.write("\u02da\u016e\2\u128d\u128e\7\u01e7\2\2\u128e\u1290\5\u02da")
        buf.write("\u016e\2\u128f\u128d\3\2\2\2\u1290\u1293\3\2\2\2\u1291")
        buf.write("\u128f\3\2\2\2\u1291\u1292\3\2\2\2\u1292\u0299\3\2\2\2")
        buf.write("\u1293\u1291\3\2\2\2\u1294\u1299\5\u02d8\u016d\2\u1295")
        buf.write("\u1296\7\u01e7\2\2\u1296\u1298\5\u02da\u016e\2\u1297\u1295")
        buf.write("\3\2\2\2\u1298\u129b\3\2\2\2\u1299\u1297\3\2\2\2\u1299")
        buf.write("\u129a\3\2\2\2\u129a\u029b\3\2\2\2\u129b\u1299\3\2\2\2")
        buf.write("\u129c\u129f\5\u02d8\u016d\2\u129d\u129e\7\u01e7\2\2\u129e")
        buf.write("\u12a0\5\u02da\u016e\2\u129f\u129d\3\2\2\2\u129f\u12a0")
        buf.write("\3\2\2\2\u12a0\u029d\3\2\2\2\u12a1\u12a4\5\u02d8\u016d")
        buf.write("\2\u12a2\u12a3\7\u01e7\2\2\u12a3\u12a5\5\u02da\u016e\2")
        buf.write("\u12a4\u12a2\3\2\2\2\u12a4\u12a5\3\2\2\2\u12a5\u029f\3")
        buf.write("\2\2\2\u12a6\u12a9\5\u02d8\u016d\2\u12a7\u12a8\7\u01e7")
        buf.write("\2\2\u12a8\u12aa\5\u02da\u016e\2\u12a9\u12a7\3\2\2\2\u12a9")
        buf.write("\u12aa\3\2\2\2\u12aa\u02a1\3\2\2\2\u12ab\u12ae\5\u02b2")
        buf.write("\u015a\2\u12ac\u12ae\5\u02ca\u0166\2\u12ad\u12ab\3\2\2")
        buf.write("\2\u12ad\u12ac\3\2\2\2\u12ae\u02a3\3\2\2\2\u12af\u12b0")
        buf.write("\5\u02d8\u016d\2\u12b0\u02a5\3\2\2\2\u12b1\u12b4\5\u02d8")
        buf.write("\u016d\2\u12b2\u12b4\5\u02ca\u0166\2\u12b3\u12b1\3\2\2")
        buf.write("\2\u12b3\u12b2\3\2\2\2\u12b4\u02a7\3\2\2\2\u12b5\u12b8")
        buf.write("\5\u02d8\u016d\2\u12b6\u12b8\5\u02ca\u0166\2\u12b7\u12b5")
        buf.write("\3\2\2\2\u12b7\u12b6\3\2\2\2\u12b8\u02a9\3\2\2\2\u12b9")
        buf.write("\u12bc\5\u02d8\u016d\2\u12ba\u12bb\7\u01e7\2\2\u12bb\u12bd")
        buf.write("\5\u02da\u016e\2\u12bc\u12ba\3\2\2\2\u12bc\u12bd\3\2\2")
        buf.write("\2\u12bd\u02ab\3\2\2\2\u12be\u12bf\5\u02d8\u016d\2\u12bf")
        buf.write("\u02ad\3\2\2\2\u12c0\u12c5\5\u02d8\u016d\2\u12c1\u12c2")
        buf.write("\7\u01e7\2\2\u12c2\u12c4\5\u02da\u016e\2\u12c3\u12c1\3")
        buf.write("\2\2\2\u12c4\u12c7\3\2\2\2\u12c5\u12c3\3\2\2\2\u12c5\u12c6")
        buf.write("\3\2\2\2\u12c6\u02af\3\2\2\2\u12c7\u12c5\3\2\2\2\u12c8")
        buf.write("\u12cc\5\u02b2\u015a\2\u12c9\u12ca\7\u01f6\2\2\u12ca\u12cd")
        buf.write("\5\u02ac\u0157\2\u12cb\u12cd\5\u0266\u0134\2\u12cc\u12c9")
        buf.write("\3\2\2\2\u12cc\u12cb\3\2\2\2\u12cc\u12cd\3\2\2\2\u12cd")
        buf.write("\u02b1\3\2\2\2\u12ce\u12d3\5\u02da\u016e\2\u12cf\u12d0")
        buf.write("\7\u01e7\2\2\u12d0\u12d2\5\u02da\u016e\2\u12d1\u12cf\3")
        buf.write("\2\2\2\u12d2\u12d5\3\2\2\2\u12d3\u12d1\3\2\2\2\u12d3\u12d4")
        buf.write("\3\2\2\2\u12d4\u02b3\3\2\2\2\u12d5\u12d3\3\2\2\2\u12d6")
        buf.write("\u12d7\7\u01f1\2\2\u12d7\u02b5\3\2\2\2\u12d8\u12d9\7\u00c4")
        buf.write("\2\2\u12d9\u12da\7\u01ee\2\2\u12da\u12db\7\u01cd\2\2\u12db")
        buf.write("\u12dc\t+\2\2\u12dc\u12dd\5\u019c\u00cf\2\u12dd\u12df")
        buf.write("\7\u01ef\2\2\u12de\u12e0\5\u0232\u011a\2\u12df\u12de\3")
        buf.write("\2\2\2\u12df\u12e0\3\2\2\2\u12e0\u02b7\3\2\2\2\u12e1\u12e3")
        buf.write("\7\u01ee\2\2\u12e2\u12e4\5\u02c0\u0161\2\u12e3\u12e2\3")
        buf.write("\2\2\2\u12e3\u12e4\3\2\2\2\u12e4\u12e9\3\2\2\2\u12e5\u12e6")
        buf.write("\7\u01f4\2\2\u12e6\u12e8\5\u02c0\u0161\2\u12e7\u12e5\3")
        buf.write("\2\2\2\u12e8\u12eb\3\2\2\2\u12e9\u12e7\3\2\2\2\u12e9\u12ea")
        buf.write("\3\2\2\2\u12ea\u12ec\3\2\2\2\u12eb\u12e9\3\2\2\2\u12ec")
        buf.write("\u12ee\7\u01ef\2\2\u12ed\u12ef\5\u02b6\u015c\2\u12ee\u12ed")
        buf.write("\3\2\2\2\u12ee\u12ef\3\2\2\2\u12ef\u02b9\3\2\2\2\u12f0")
        buf.write("\u12f5\7\u01ee\2\2\u12f1\u12f3\5\u02c0\u0161\2\u12f2\u12f4")
        buf.write("\5\u02be\u0160\2\u12f3\u12f2\3\2\2\2\u12f3\u12f4\3\2\2")
        buf.write("\2\u12f4\u12f6\3\2\2\2\u12f5\u12f1\3\2\2\2\u12f5\u12f6")
        buf.write("\3\2\2\2\u12f6\u12fe\3\2\2\2\u12f7\u12f8\7\u01f4\2\2\u12f8")
        buf.write("\u12fa\5\u02c0\u0161\2\u12f9\u12fb\5\u02be\u0160\2\u12fa")
        buf.write("\u12f9\3\2\2\2\u12fa\u12fb\3\2\2\2\u12fb\u12fd\3\2\2\2")
        buf.write("\u12fc\u12f7\3\2\2\2\u12fd\u1300\3\2\2\2\u12fe\u12fc\3")
        buf.write("\2\2\2\u12fe\u12ff\3\2\2\2\u12ff\u1301\3\2\2\2\u1300\u12fe")
        buf.write("\3\2\2\2\u1301\u1303\7\u01ef\2\2\u1302\u1304\5\u02b6\u015c")
        buf.write("\2\u1303\u1302\3\2\2\2\u1303\u1304\3\2\2\2\u1304\u02bb")
        buf.write("\3\2\2\2\u1305\u1306\7\u01ee\2\2\u1306\u1313\5\u02ae\u0158")
        buf.write("\2\u1307\u130a\7\u01f4\2\2\u1308\u130b\5\u02d2\u016a\2")
        buf.write("\u1309\u130b\7\u0100\2\2\u130a\u1308\3\2\2\2\u130a\u1309")
        buf.write("\3\2\2\2\u130b\u1311\3\2\2\2\u130c\u130f\7\u01f4\2\2\u130d")
        buf.write("\u1310\5\u02d2\u016a\2\u130e\u1310\7\u0100\2\2\u130f\u130d")
        buf.write("\3\2\2\2\u130f\u130e\3\2\2\2\u1310\u1312\3\2\2\2\u1311")
        buf.write("\u130c\3\2\2\2\u1311\u1312\3\2\2\2\u1312\u1314\3\2\2\2")
        buf.write("\u1313\u1307\3\2\2\2\u1313\u1314\3\2\2\2\u1314\u1315\3")
        buf.write("\2\2\2\u1315\u1329\7\u019d\2\2\u1316\u1317\5\u02b0\u0159")
        buf.write("\2\u1317\u1318\7\u01e7\2\2\u1318\u1319\7\u01f1\2\2\u1319")
        buf.write("\u132a\3\2\2\2\u131a\u132a\7\u01f1\2\2\u131b\u131d\5\u01f0")
        buf.write("\u00f9\2\u131c\u131e\5\u0268\u0135\2\u131d\u131c\3\2\2")
        buf.write("\2\u131d\u131e\3\2\2\2\u131e\u1326\3\2\2\2\u131f\u1320")
        buf.write("\7\u01f4\2\2\u1320\u1322\5\u01f0\u00f9\2\u1321\u1323\5")
        buf.write("\u0268\u0135\2\u1322\u1321\3\2\2\2\u1322\u1323\3\2\2\2")
        buf.write("\u1323\u1325\3\2\2\2\u1324\u131f\3\2\2\2\u1325\u1328\3")
        buf.write("\2\2\2\u1326\u1324\3\2\2\2\u1326\u1327\3\2\2\2\u1327\u132a")
        buf.write("\3\2\2\2\u1328\u1326\3\2\2\2\u1329\u1316\3\2\2\2\u1329")
        buf.write("\u131a\3\2\2\2\u1329\u131b\3\2\2\2\u132a\u132b\3\2\2\2")
        buf.write("\u132b\u132d\7\u01ef\2\2\u132c\u132e\5\u02b6\u015c\2\u132d")
        buf.write("\u132c\3\2\2\2\u132d\u132e\3\2\2\2\u132e\u02bd\3\2\2\2")
        buf.write("\u132f\u1330\tJ\2\2\u1330\u1331\7\u0101\2\2\u1331\u02bf")
        buf.write("\3\2\2\2\u1332\u1333\5\u02d8\u016d\2\u1333\u1334\7\u0205")
        buf.write("\2\2\u1334\u1335\7\u0202\2\2\u1335\u1337\3\2\2\2\u1336")
        buf.write("\u1332\3\2\2\2\u1336\u1337\3\2\2\2\u1337\u1338\3\2\2\2")
        buf.write("\u1338\u1339\5\u01f0\u00f9\2\u1339\u02c1\3\2\2\2\u133a")
        buf.write("\u1343\5\u02c4\u0163\2\u133b\u133d\7\u0132\2\2\u133c\u133b")
        buf.write("\3\2\2\2\u133c\u133d\3\2\2\2\u133d\u133e\3\2\2\2\u133e")
        buf.write("\u1340\5\u0296\u014c\2\u133f\u1341\t\27\2\2\u1340\u133f")
        buf.write("\3\2\2\2\u1340\u1341\3\2\2\2\u1341\u1343\3\2\2\2\u1342")
        buf.write("\u133a\3\2\2\2\u1342\u133c\3\2\2\2\u1343\u02c3\3\2\2\2")
        buf.write("\u1344\u1346\5\u02c8\u0165\2\u1345\u1347\5\u02c6\u0164")
        buf.write("\2\u1346\u1345\3\2\2\2\u1346\u1347\3\2\2\2\u1347\u134e")
        buf.write("\3\2\2\2\u1348\u134a\7\u01af\2\2\u1349\u134b\7\u00d1\2")
        buf.write("\2\u134a\u1349\3\2\2\2\u134a\u134b\3\2\2\2\u134b\u134c")
        buf.write("\3\2\2\2\u134c\u134d\7\u017e\2\2\u134d\u134f\7\u01c5\2")
        buf.write("\2\u134e\u1348\3\2\2\2\u134e\u134f\3\2\2\2\u134f\u1361")
        buf.write("\3\2\2\2\u1350\u1351\7\u00bc\2\2\u1351\u1356\tK\2\2\u1352")
        buf.write("\u1353\7\u01ee\2\2\u1353\u1354\5\u01f0\u00f9\2\u1354\u1355")
        buf.write("\7\u01ef\2\2\u1355\u1357\3\2\2\2\u1356\u1352\3\2\2\2\u1356")
        buf.write("\u1357\3\2\2\2\u1357\u1358\3\2\2\2\u1358\u1359\7\u0187")
        buf.write("\2\2\u1359\u135e\tL\2\2\u135a\u135b\7\u01ee\2\2\u135b")
        buf.write("\u135c\5\u01f0\u00f9\2\u135c\u135d\7\u01ef\2\2\u135d\u135f")
        buf.write("\3\2\2\2\u135e\u135a\3\2\2\2\u135e\u135f\3\2\2\2\u135f")
        buf.write("\u1361\3\2\2\2\u1360\u1344\3\2\2\2\u1360\u1350\3\2\2\2")
        buf.write("\u1361\u02c5\3\2\2\2\u1362\u1363\7\u01ee\2\2\u1363\u1366")
        buf.write("\5\u02d2\u016a\2\u1364\u1365\7\u01f4\2\2\u1365\u1367\5")
        buf.write("\u02d2\u016a\2\u1366\u1364\3\2\2\2\u1366\u1367\3\2\2\2")
        buf.write("\u1367\u1369\3\2\2\2\u1368\u136a\tM\2\2\u1369\u1368\3")
        buf.write("\2\2\2\u1369\u136a\3\2\2\2\u136a\u136b\3\2\2\2\u136b\u136c")
        buf.write("\7\u01ef\2\2\u136c\u02c7\3\2\2\2\u136d\u13aa\7\"\2\2\u136e")
        buf.write("\u13aa\7\u0123\2\2\u136f\u13aa\7\u00eb\2\2\u1370\u13aa")
        buf.write("\7!\2\2\u1371\u13aa\7 \2\2\u1372\u13aa\7\u00ec\2\2\u1373")
        buf.write("\u13aa\7\u0124\2\2\u1374\u13aa\7\u0125\2\2\u1375\u13aa")
        buf.write("\7\u0162\2\2\u1376\u13aa\7\u0163\2\2\u1377\u13aa\7\u0104")
        buf.write("\2\2\u1378\u13aa\7a\2\2\u1379\u13aa\7\u00ba\2\2\u137a")
        buf.write("\u13aa\7\u00b9\2\2\u137b\u13aa\7\u0103\2\2\u137c\u13aa")
        buf.write("\7\u0167\2\2\u137d\u13aa\7\u0102\2\2\u137e\u13aa\7b\2")
        buf.write("\2\u137f\u1381\7s\2\2\u1380\u1382\7\u0128\2\2\u1381\u1380")
        buf.write("\3\2\2\2\u1381\u1382\3\2\2\2\u1382\u13aa\3\2\2\2\u1383")
        buf.write("\u13aa\7\u0095\2\2\u1384\u13aa\7\u0130\2\2\u1385\u13aa")
        buf.write("\7\u00ee\2\2\u1386\u1388\7\u00d7\2\2\u1387\u1389\7\u012e")
        buf.write("\2\2\u1388\u1387\3\2\2\2\u1388\u1389\3\2\2\2\u1389\u13aa")
        buf.write("\3\2\2\2\u138a\u13aa\7\63\2\2\u138b\u13aa\7\65\2\2\u138c")
        buf.write("\u13aa\7\u01a2\2\2\u138d\u13aa\7\u01a1\2\2\u138e\u13aa")
        buf.write("\7\u0174\2\2\u138f\u13aa\7\u012e\2\2\u1390\u13aa\7&\2")
        buf.write("\2\u1391\u13aa\7[\2\2\u1392\u13aa\7\u0146\2\2\u1393\u13aa")
        buf.write("\7\u019b\2\2\u1394\u13aa\7\u01c2\2\2\u1395\u13aa\7\u00e7")
        buf.write("\2\2\u1396\u13aa\7\\\2\2\u1397\u13aa\7\u00a5\2\2\u1398")
        buf.write("\u13aa\7\u00e1\2\2\u1399\u13aa\7\u0150\2\2\u139a\u13aa")
        buf.write("\7\u0184\2\2\u139b\u13aa\7\u0185\2\2\u139c\u13aa\7\u0186")
        buf.write("\2\2\u139d\u13aa\7\u0183\2\2\u139e\u13aa\7\u017f\2\2\u139f")
        buf.write("\u13aa\7\u0182\2\2\u13a0\u13aa\7\u0181\2\2\u13a1\u13aa")
        buf.write("\7\u0180\2\2\u13a2\u13aa\7\u01c4\2\2\u13a3\u13aa\7u\2")
        buf.write("\2\u13a4\u13aa\7\37\2\2\u13a5\u13aa\7#\2\2\u13a6\u13aa")
        buf.write("\78\2\2\u13a7\u13aa\7\u00f0\2\2\u13a8\u13aa\7\u00e3\2")
        buf.write("\2\u13a9\u136d\3\2\2\2\u13a9\u136e\3\2\2\2\u13a9\u136f")
        buf.write("\3\2\2\2\u13a9\u1370\3\2\2\2\u13a9\u1371\3\2\2\2\u13a9")
        buf.write("\u1372\3\2\2\2\u13a9\u1373\3\2\2\2\u13a9\u1374\3\2\2\2")
        buf.write("\u13a9\u1375\3\2\2\2\u13a9\u1376\3\2\2\2\u13a9\u1377\3")
        buf.write("\2\2\2\u13a9\u1378\3\2\2\2\u13a9\u1379\3\2\2\2\u13a9\u137a")
        buf.write("\3\2\2\2\u13a9\u137b\3\2\2\2\u13a9\u137c\3\2\2\2\u13a9")
        buf.write("\u137d\3\2\2\2\u13a9\u137e\3\2\2\2\u13a9\u137f\3\2\2\2")
        buf.write("\u13a9\u1383\3\2\2\2\u13a9\u1384\3\2\2\2\u13a9\u1385\3")
        buf.write("\2\2\2\u13a9\u1386\3\2\2\2\u13a9\u138a\3\2\2\2\u13a9\u138b")
        buf.write("\3\2\2\2\u13a9\u138c\3\2\2\2\u13a9\u138d\3\2\2\2\u13a9")
        buf.write("\u138e\3\2\2\2\u13a9\u138f\3\2\2\2\u13a9\u1390\3\2\2\2")
        buf.write("\u13a9\u1391\3\2\2\2\u13a9\u1392\3\2\2\2\u13a9\u1393\3")
        buf.write("\2\2\2\u13a9\u1394\3\2\2\2\u13a9\u1395\3\2\2\2\u13a9\u1396")
        buf.write("\3\2\2\2\u13a9\u1397\3\2\2\2\u13a9\u1398\3\2\2\2\u13a9")
        buf.write("\u1399\3\2\2\2\u13a9\u139a\3\2\2\2\u13a9\u139b\3\2\2\2")
        buf.write("\u13a9\u139c\3\2\2\2\u13a9\u139d\3\2\2\2\u13a9\u139e\3")
        buf.write("\2\2\2\u13a9\u139f\3\2\2\2\u13a9\u13a0\3\2\2\2\u13a9\u13a1")
        buf.write("\3\2\2\2\u13a9\u13a2\3\2\2\2\u13a9\u13a3\3\2\2\2\u13a9")
        buf.write("\u13a4\3\2\2\2\u13a9\u13a5\3\2\2\2\u13a9\u13a6\3\2\2\2")
        buf.write("\u13a9\u13a7\3\2\2\2\u13a9\u13a8\3\2\2\2\u13aa\u02c9\3")
        buf.write("\2\2\2\u13ab\u13af\7\u01f8\2\2\u13ac\u13ad\7\u01f9\2\2")
        buf.write("\u13ad\u13af\7\u01e8\2\2\u13ae\u13ab\3\2\2\2\u13ae\u13ac")
        buf.write("\3\2\2\2\u13af\u13b8\3\2\2\2\u13b0\u13b2\7\u00b0\2\2\u13b1")
        buf.write("\u13b0\3\2\2\2\u13b1\u13b2\3\2\2\2\u13b2\u13b6\3\2\2\2")
        buf.write("\u13b3\u13b7\7\u01f8\2\2\u13b4\u13b5\7\u01f9\2\2\u13b5")
        buf.write("\u13b7\7\u01e8\2\2\u13b6\u13b3\3\2\2\2\u13b6\u13b4\3\2")
        buf.write("\2\2\u13b7\u13b9\3\2\2\2\u13b8\u13b1\3\2\2\2\u13b8\u13b9")
        buf.write("\3\2\2\2\u13b9\u13be\3\2\2\2\u13ba\u13bb\7\u01e7\2\2\u13bb")
        buf.write("\u13bd\5\u02cc\u0167\2\u13bc\u13ba\3\2\2\2\u13bd\u13c0")
        buf.write("\3\2\2\2\u13be\u13bc\3\2\2\2\u13be\u13bf\3\2\2\2\u13bf")
        buf.write("\u02cb\3\2\2\2\u13c0\u13be\3\2\2\2\u13c1\u13c2\5\u02b2")
        buf.write("\u015a\2\u13c2\u13c3\5\u02b8\u015d\2\u13c3\u13c6\3\2\2")
        buf.write("\2\u13c4\u13c6\5\u02b2\u015a\2\u13c5\u13c1\3\2\2\2\u13c5")
        buf.write("\u13c4\3\2\2\2\u13c6\u02cd\3\2\2\2\u13c7\u13c8\5\u02b2")
        buf.write("\u015a\2\u13c8\u02cf\3\2\2\2\u13c9\u13cc\7\u017f\2\2\u13ca")
        buf.write("\u13cd\5\u02d6\u016c\2\u13cb\u13cd\5\u02ca\u0166\2\u13cc")
        buf.write("\u13ca\3\2\2\2\u13cc\u13cb\3\2\2\2\u13cd\u13d2\3\2\2\2")
        buf.write("\u13ce\u13cf\7\24\2\2\u13cf\u13d0\7\u017e\2\2\u13d0\u13d1")
        buf.write("\7\u01c5\2\2\u13d1\u13d3\5\u02d6\u016c\2\u13d2\u13ce\3")
        buf.write("\2\2\2\u13d2\u13d3\3\2\2\2\u13d3\u1408\3\2\2\2\u13d4\u13d8")
        buf.write("\7\u00bc\2\2\u13d5\u13d9\5\u02d6\u016c\2\u13d6\u13d9\5")
        buf.write("\u02ca\u0166\2\u13d7\u13d9\5\u02cc\u0167\2\u13d8\u13d5")
        buf.write("\3\2\2\2\u13d8\u13d6\3\2\2\2\u13d8\u13d7\3\2\2\2\u13d9")
        buf.write("\u13da\3\2\2\2\u13da\u13e8\tN\2\2\u13db\u13de\7\u01ee")
        buf.write("\2\2\u13dc\u13df\7\u01e8\2\2\u13dd\u13df\5\u02ca\u0166")
        buf.write("\2\u13de\u13dc\3\2\2\2\u13de\u13dd\3\2\2\2\u13df\u13e5")
        buf.write("\3\2\2\2\u13e0\u13e3\7\u01f4\2\2\u13e1\u13e4\7\u01e8\2")
        buf.write("\2\u13e2\u13e4\5\u02ca\u0166\2\u13e3\u13e1\3\2\2\2\u13e3")
        buf.write("\u13e2\3\2\2\2\u13e4\u13e6\3\2\2\2\u13e5\u13e0\3\2\2\2")
        buf.write("\u13e5\u13e6\3\2\2\2\u13e6\u13e7\3\2\2\2\u13e7\u13e9\7")
        buf.write("\u01ef\2\2\u13e8\u13db\3\2\2\2\u13e8\u13e9\3\2\2\2\u13e9")
        buf.write("\u13f9\3\2\2\2\u13ea\u13f7\7\u0187\2\2\u13eb\u13f8\7\\")
        buf.write("\2\2\u13ec\u13f8\7\u00a5\2\2\u13ed\u13f8\7\u00e1\2\2\u13ee")
        buf.write("\u13f5\7\u0150\2\2\u13ef\u13f2\7\u01ee\2\2\u13f0\u13f3")
        buf.write("\7\u01e8\2\2\u13f1\u13f3\5\u02ca\u0166\2\u13f2\u13f0\3")
        buf.write("\2\2\2\u13f2\u13f1\3\2\2\2\u13f3\u13f4\3\2\2\2\u13f4\u13f6")
        buf.write("\7\u01ef\2\2\u13f5\u13ef\3\2\2\2\u13f5\u13f6\3\2\2\2\u13f6")
        buf.write("\u13f8\3\2\2\2\u13f7\u13eb\3\2\2\2\u13f7\u13ec\3\2\2\2")
        buf.write("\u13f7\u13ed\3\2\2\2\u13f7\u13ee\3\2\2\2\u13f8\u13fa\3")
        buf.write("\2\2\2\u13f9\u13ea\3\2\2\2\u13f9\u13fa\3\2\2\2\u13fa\u1408")
        buf.write("\3\2\2\2\u13fb\u1408\5\u02d2\u016a\2\u13fc\u13fd\7[\2")
        buf.write("\2\u13fd\u1408\5\u02d6\u016c\2\u13fe\u1408\5\u02d6\u016c")
        buf.write("\2\u13ff\u1408\7\u0100\2\2\u1400\u1408\7\u018e\2\2\u1401")
        buf.write("\u1408\7\u0090\2\2\u1402\u1408\7^\2\2\u1403\u1408\7\u015a")
        buf.write("\2\2\u1404\u1408\7\u00e2\2\2\u1405\u1408\7\u00dc\2\2\u1406")
        buf.write("\u1408\7f\2\2\u1407\u13c9\3\2\2\2\u1407\u13d4\3\2\2\2")
        buf.write("\u1407\u13fb\3\2\2\2\u1407\u13fc\3\2\2\2\u1407\u13fe\3")
        buf.write("\2\2\2\u1407\u13ff\3\2\2\2\u1407\u1400\3\2\2\2\u1407\u1401")
        buf.write("\3\2\2\2\u1407\u1402\3\2\2\2\u1407\u1403\3\2\2\2\u1407")
        buf.write("\u1404\3\2\2\2\u1407\u1405\3\2\2\2\u1407\u1406\3\2\2\2")
        buf.write("\u1408\u02d1\3\2\2\2\u1409\u140a\tO\2\2\u140a\u02d3\3")
        buf.write("\2\2\2\u140b\u140c\7\u01f3\2\2\u140c\u140d\5\u02d2\u016a")
        buf.write("\2\u140d\u02d5\3\2\2\2\u140e\u140f\tP\2\2\u140f\u02d7")
        buf.write("\3\2\2\2\u1410\u1411\5\u02b2\u015a\2\u1411\u02d9\3\2\2")
        buf.write("\2\u1412\u1415\5\u02e6\u0174\2\u1413\u1415\7\u01eb\2\2")
        buf.write("\u1414\u1412\3\2\2\2\u1414\u1413\3\2\2\2\u1415\u02db\3")
        buf.write("\2\2\2\u1416\u141e\7\u01fe\2\2\u1417\u1418\7\u01fc\2\2")
        buf.write("\u1418\u141e\7\u0202\2\2\u1419\u141a\7\u0201\2\2\u141a")
        buf.write("\u141e\7\u0205\2\2\u141b\u141c\7\u01ff\2\2\u141c\u141e")
        buf.write("\7\u0205\2\2\u141d\u1416\3\2\2\2\u141d\u1417\3\2\2\2\u141d")
        buf.write("\u1419\3\2\2\2\u141d\u141b\3\2\2\2\u141e\u02dd\3\2\2\2")
        buf.write("\u141f\u1423\7\u01fd\2\2\u1420\u1421\7\u0202\2\2\u1421")
        buf.write("\u1423\7\u0205\2\2\u1422\u141f\3\2\2\2\u1422\u1420\3\2")
        buf.write("\2\2\u1423\u02df\3\2\2\2\u1424\u1428\7\u01fb\2\2\u1425")
        buf.write("\u1426\7\u01fc\2\2\u1426\u1428\7\u0205\2\2\u1427\u1424")
        buf.write("\3\2\2\2\u1427\u1425\3\2\2\2\u1428\u02e1\3\2\2\2\u1429")
        buf.write("\u142d\7\u0203\2\2\u142a\u142b\7\u0204\2\2\u142b\u142d")
        buf.write("\7\u0204\2\2\u142c\u1429\3\2\2\2\u142c\u142a\3\2\2\2\u142d")
        buf.write("\u02e3\3\2\2\2\u142e\u142f\7\u01ee\2\2\u142f\u1430\7\u01f2")
        buf.write("\2\2\u1430\u1431\7\u01ef\2\2\u1431\u02e5\3\2\2\2\u1432")
        buf.write("\u1433\tQ\2\2\u1433\u02e7\3\2\2\2\u02a8\u02eb\u02ef\u02f9")
        buf.write("\u02fb\u02ff\u0314\u031f\u0324\u0329\u032e\u0330\u033a")
        buf.write("\u033f\u0347\u0349\u034d\u0351\u0356\u035b\u0360\u0364")
        buf.write("\u0372\u0377\u037a\u0380\u0389\u0397\u039f\u03a8\u03ab")
        buf.write("\u03b0\u03b5\u03ba\u03bf\u03c7\u03ce\u03d0\u03d4\u03da")
        buf.write("\u03df\u03ea\u03f4\u03f9\u0405\u040a\u040f\u0412\u0420")
        buf.write("\u042b\u0430\u0435\u043a\u043c\u0446\u044b\u044e\u0452")
        buf.write("\u0457\u045d\u046c\u0471\u0476\u0478\u047d\u0484\u0487")
        buf.write("\u048a\u048d\u0497\u04a3\u04a7\u04aa\u04b3\u04bb\u04c3")
        buf.write("\u04c6\u04cd\u04d1\u04d8\u04de\u0507\u0523\u052a\u052f")
        buf.write("\u053a\u053d\u0548\u0550\u0554\u055e\u0561\u0565\u0568")
        buf.write("\u056d\u0572\u0576\u0580\u058a\u0590\u059b\u05a0\u05a4")
        buf.write("\u05ac\u05b4\u05b9\u05bc\u05be\u05c1\u05ca\u05cf\u05d4")
        buf.write("\u05d7\u05da\u05de\u05e1\u05e9\u05ee\u05f3\u05fa\u0604")
        buf.write("\u0614\u061a\u0624\u062e\u0635\u063a\u0640\u064a\u064f")
        buf.write("\u0656\u065b\u0661\u0664\u0667\u0678\u067d\u0686\u068b")
        buf.write("\u0691\u0694\u069b\u069e\u06a5\u06aa\u06ae\u06b3\u06b8")
        buf.write("\u06c2\u06c8\u06d2\u06d7\u06de\u06e4\u06e8\u06eb\u06ee")
        buf.write("\u06ff\u0704\u070c\u071a\u0721\u0730\u0737\u0739\u074c")
        buf.write("\u075c\u0765\u076a\u076e\u0771\u077b\u0787\u078d\u0795")
        buf.write("\u0799\u079c\u07aa\u07ae\u07b3\u07b6\u07c3\u07c7\u07d3")
        buf.write("\u07d8\u07dc\u07e0\u07e6\u07e9\u07ec\u0807\u080d\u0811")
        buf.write("\u0817\u0823\u082c\u082e\u0834\u0838\u083b\u0844\u084f")
        buf.write("\u0853\u0856\u085a\u0862\u086b\u0874\u0876\u0884\u089a")
        buf.write("\u08a4\u08ab\u08af\u08b3\u08b7\u08c3\u08c7\u08d5\u08db")
        buf.write("\u08e2\u08e7\u08f1\u08f7\u08f9\u0902\u090c\u0911\u0920")
        buf.write("\u0924\u0927\u092b\u0933\u0935\u0939\u0941\u0948\u094d")
        buf.write("\u094f\u0954\u0959\u0961\u0968\u096c\u096f\u097b\u0981")
        buf.write("\u0989\u0993\u099e\u09a1\u09a8\u09ab\u09b2\u09bd\u09c3")
        buf.write("\u09c7\u09d1\u09d4\u09da\u09e5\u09e7\u09e9\u09ec\u09f0")
        buf.write("\u09f3\u09f7\u09fb\u0a00\u0a0b\u0a0f\u0a17\u0a1a\u0a24")
        buf.write("\u0a2e\u0a33\u0a39\u0a3d\u0a40\u0a48\u0a4b\u0a4f\u0a53")
        buf.write("\u0a58\u0a5b\u0a5f\u0a63\u0a67\u0a73\u0a83\u0a89\u0a8d")
        buf.write("\u0a92\u0a96\u0a9d\u0aa1\u0aa5\u0aa8\u0aac\u0aae\u0ab2")
        buf.write("\u0ab7\u0ab9\u0ac4\u0ac6\u0ace\u0ad4\u0adb\u0ae2\u0ae6")
        buf.write("\u0ae8\u0aee\u0af4\u0afb\u0afe\u0b01\u0b06\u0b0a\u0b16")
        buf.write("\u0b1d\u0b22\u0b24\u0b26\u0b34\u0b37\u0b41\u0b45\u0b4d")
        buf.write("\u0b59\u0b63\u0b68\u0b72\u0b7a\u0b7d\u0b83\u0b87\u0b8c")
        buf.write("\u0b96\u0b9b\u0ba8\u0bb4\u0bb9\u0bc3\u0bc8\u0bca\u0bcf")
        buf.write("\u0bd3\u0bd9\u0bdd\u0bea\u0bf0\u0bf9\u0c06\u0c0e\u0c17")
        buf.write("\u0c1b\u0c20\u0c2b\u0c2d\u0c3d\u0c42\u0c48\u0c4e\u0c60")
        buf.write("\u0c67\u0c6a\u0c72\u0c7b\u0c7d\u0c81\u0c84\u0c89\u0c8b")
        buf.write("\u0c8f\u0c9b\u0ca4\u0cac\u0cb1\u0cb5\u0cba\u0cbd\u0cc5")
        buf.write("\u0ccd\u0cd6\u0cd9\u0cdc\u0ce4\u0cee\u0cfa\u0d01\u0d05")
        buf.write("\u0d09\u0d0c\u0d0f\u0d14\u0d19\u0d1c\u0d1f\u0d25\u0d28")
        buf.write("\u0d2e\u0d31\u0d34\u0d39\u0d3c\u0d44\u0d4a\u0d54\u0d59")
        buf.write("\u0d62\u0d6c\u0d70\u0d72\u0d75\u0d81\u0d85\u0d88\u0d9c")
        buf.write("\u0da1\u0da6\u0dad\u0db0\u0db9\u0dc0\u0dc5\u0dc9\u0dd1")
        buf.write("\u0dd7\u0ddf\u0de2\u0dea\u0df2\u0df5\u0df8\u0e01\u0e07")
        buf.write("\u0e0d\u0e0f\u0e1c\u0e1e\u0e27\u0e29\u0e2d\u0e33\u0e37")
        buf.write("\u0e45\u0e4b\u0e5c\u0e60\u0e76\u0e7e\u0e82\u0e88\u0e8d")
        buf.write("\u0e90\u0e92\u0e96\u0ea1\u0ea5\u0eac\u0eb1\u0ebf\u0ed2")
        buf.write("\u0ee3\u0ee6\u0ee8\u0eea\u0ef2\u0efa\u0f01\u0f05\u0f0e")
        buf.write("\u0f13\u0f17\u0f1f\u0f23\u0f2a\u0f33\u0f41\u0f4e\u0f53")
        buf.write("\u0f68\u0f71\u0f76\u0f79\u0f80\u0f83\u0f87\u0f8a\u0f91")
        buf.write("\u0f94\u0f9a\u0f9d\u0fa1\u0fa4\u0fab\u0fb0\u0fc1\u0fc3")
        buf.write("\u0fc7\u0fcf\u0fdb\u0fe1\u0feb\u0ffb\u0fff\u1008\u100e")
        buf.write("\u101c\u1027\u102b\u102e\u1037\u103d\u1047\u104f\u1052")
        buf.write("\u1055\u105e\u1063\u106c\u1072\u1077\u107a\u107f\u1084")
        buf.write("\u1088\u108e\u1094\u109d\u10a2\u10aa\u10ae\u10b3\u10b9")
        buf.write("\u10c0\u10c5\u10cc\u10d0\u10d5\u10dd\u10e0\u10e3\u10e6")
        buf.write("\u10ea\u10ef\u10f4\u10f8\u10ff\u1104\u1106\u110b\u1111")
        buf.write("\u1114\u1118\u111a\u1125\u1129\u112b\u1136\u1141\u114a")
        buf.write("\u114d\u1151\u1154\u1158\u1165\u116a\u1172\u1179\u117e")
        buf.write("\u1182\u1187\u118c\u118f\u1196\u11a0\u11a8\u11ac\u11b6")
        buf.write("\u11b9\u11bb\u11c5\u11c7\u11cd\u11d3\u11d5\u11e3\u11e5")
        buf.write("\u11ed\u11f6\u11ff\u1209\u120d\u1212\u1216\u1219\u121c")
        buf.write("\u1220\u1227\u1233\u123e\u1241\u1245\u1258\u125d\u1264")
        buf.write("\u1271\u127b\u1280\u1289\u1291\u1299\u129f\u12a4\u12a9")
        buf.write("\u12ad\u12b3\u12b7\u12bc\u12c5\u12cc\u12d3\u12df\u12e3")
        buf.write("\u12e9\u12ee\u12f3\u12f5\u12fa\u12fe\u1303\u130a\u130f")
        buf.write("\u1311\u1313\u131d\u1322\u1326\u1329\u132d\u1336\u133c")
        buf.write("\u1340\u1342\u1346\u134a\u134e\u1356\u135e\u1360\u1366")
        buf.write("\u1369\u1381\u1388\u13a9\u13ae\u13b1\u13b6\u13b8\u13be")
        buf.write("\u13c5\u13cc\u13d2\u13d8\u13de\u13e3\u13e5\u13e8\u13f2")
        buf.write("\u13f5\u13f7\u13f9\u1407\u1414\u141d\u1422\u1427\u142c")
        return buf.getvalue()


class PlSqlParser ( Parser ):

    grammarFileName = "PlSql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'..'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'.'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'%'", "'&'", "'('", "')'", "'**'", "'*'", "'+'", "'-'", 
                     "','", "'/'", "'@'", "':='", "<INVALID>", "':'", "';'", 
                     "'<='", "'<'", "'>='", "<INVALID>", "'^'", "'~'", "'!'", 
                     "'>'", "'||'", "'|'", "'='", "'['", "']'", "'_'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'@!'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "A_LETTER", "ADD", "AFTER", 
                      "AGENT", "AGGREGATE", "ALL", "ALTER", "ANALYZE", "AND", 
                      "ANY", "ARRAY", "AS", "ASSUME", "ASSERT", "ASC", "ASSOCIATE", 
                      "AT", "ATTRIBUTE", "AUDIT", "AUTHID", "AUTO", "AUTOMATIC", 
                      "AUTONOMOUS_TRANSACTION", "BATCH", "BEFORE", "BEGIN", 
                      "BETWEEN", "BFILE", "BINARY_DOUBLE", "BINARY_FLOAT", 
                      "BINARY_INTEGER", "BLOB", "BLOCK", "BODY", "BOOLEAN", 
                      "BOTH", "BREADTH", "BULK", "BY", "BYTE", "C_LETTER", 
                      "CACHE", "CALL", "CANONICAL", "CASCADE", "CASE", "CAST", 
                      "CHAR", "CHAR_CS", "CHARACTER", "CHECK", "CHR", "CLOB", 
                      "CLOSE", "CLUSTER", "COLLECT", "COLUMNS", "COMMENT", 
                      "COMMIT", "COMMITTED", "COMPATIBILITY", "COMPILE", 
                      "COMPOUND", "CONNECT", "CONNECT_BY_ROOT", "CONSTANT", 
                      "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", "CONTENT", 
                      "CONTEXT", "CONTINUE", "CONVERT", "CORRUPT_XID", "CORRUPT_XID_ALL", 
                      "COST", "COUNT", "CREATE", "CROSS", "CUBE", "CURRENT", 
                      "CURRENT_USER", "CURSOR", "CUSTOMDATUM", "CYCLE", 
                      "DATA", "DATABASE", "DATE", "DAY", "DB_ROLE_CHANGE", 
                      "DBTIMEZONE", "DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", 
                      "DECOMPOSE", "DECREMENT", "DEFAULT", "DEFAULTS", "DEFERRED", 
                      "DEFINER", "DELETE", "DEPTH", "DESC", "DETERMINISTIC", 
                      "DIMENSION", "DISABLE", "DISASSOCIATE", "DISTINCT", 
                      "DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", 
                      "EACH", "ELEMENT", "ELSE", "ELSIF", "EMPTY", "ENABLE", 
                      "ENCODING", "END", "ENTITYESCAPING", "ERR", "ERRORS", 
                      "ESCAPE", "EVALNAME", "EXCEPT", "EXCEPTION", "EXCEPTION_INIT", 
                      "EXCEPTIONS", "EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXISTS", 
                      "EXIT", "EXPLAIN", "EXTERNAL", "EXTRACT", "FAILURE", 
                      "FALSE", "FETCH", "FINAL", "FIRST", "FIRST_VALUE", 
                      "FLOAT", "FOLLOWING", "FOLLOWS", "FOR", "FORALL", 
                      "FORCE", "FROM", "FULL", "FUNCTION", "GOTO", "GRANT", 
                      "GROUP", "GROUPING", "HASH", "HAVING", "HIDE", "HOUR", 
                      "IF", "IGNORE", "IMMEDIATE", "IN", "INCLUDE", "INCLUDING", 
                      "INCREMENT", "INDENT", "INDEX", "INDEXED", "INDICATOR", 
                      "INDICES", "INFINITE", "INLINE", "INNER", "INOUT", 
                      "INSERT", "INSTANTIABLE", "INSTEAD", "INT", "INTEGER", 
                      "INTERSECT", "INTERVAL", "INTO", "INVALIDATE", "IS", 
                      "ISOLATION", "ITERATE", "JAVA", "JOIN", "KEEP", "LANGUAGE", 
                      "LAST", "LAST_VALUE", "LEADING", "LEFT", "LEVEL", 
                      "LIBRARY", "LIKE", "LIKE2", "LIKE4", "LIKEC", "LIMIT", 
                      "LOCAL", "LOCK", "LOCKED", "LOG", "LOGOFF", "LOGON", 
                      "LONG", "LOOP", "MAIN", "MAP", "MATCHED", "MAXVALUE", 
                      "MEASURES", "MEMBER", "MERGE", "MINUS", "MINUTE", 
                      "MINVALUE", "MLSLABEL", "MODE", "MODEL", "MODIFY", 
                      "MONTH", "MULTISET", "NAME", "NAN", "NATURAL", "NATURALN", 
                      "NAV", "NCHAR", "NCHAR_CS", "NCLOB", "NESTED", "NEW", 
                      "NO", "NOAUDIT", "NOCACHE", "NOCOPY", "NOCYCLE", "NOENTITYESCAPING", 
                      "NOMAXVALUE", "NOMINVALUE", "NONE", "NOORDER", "NOSCHEMACHECK", 
                      "NOT", "NOWAIT", "NULL", "NULLS", "NUMBER", "NUMERIC", 
                      "NVARCHAR2", "OBJECT", "OF", "OFF", "OID", "OLD", 
                      "ON", "ONLY", "OPEN", "OPTION", "OR", "ORADATA", "ORDER", 
                      "ORDINALITY", "OSERROR", "OUT", "OUTER", "OVER", "OVERRIDING", 
                      "PACKAGE", "PARALLEL_ENABLE", "PARAMETERS", "PARENT", 
                      "PARTITION", "PASSING", "PATH", "PERCENT_ROWTYPE", 
                      "PERCENT_TYPE", "PIPELINED", "PIVOT", "PLAN", "PLS_INTEGER", 
                      "POSITIVE", "POSITIVEN", "PRAGMA", "PRECEDING", "PRECISION", 
                      "PRESENT", "PRIOR", "PROCEDURE", "RAISE", "RANGE", 
                      "RAW", "READ", "REAL", "RECORD", "REF", "REFERENCE", 
                      "REFERENCING", "REJECT", "RELIES_ON", "RENAME", "REPLACE", 
                      "RESPECT", "RESTRICT_REFERENCES", "RESULT", "RESULT_CACHE", 
                      "RETURN", "RETURNING", "REUSE", "REVERSE", "REVOKE", 
                      "RIGHT", "ROLLBACK", "ROLLUP", "ROW", "ROWID", "ROWS", 
                      "RULES", "SAMPLE", "SAVE", "SAVEPOINT", "SCHEMA", 
                      "SCHEMACHECK", "SCN", "SEARCH", "SECOND", "SEED", 
                      "SEGMENT", "SELECT", "SELF", "SEQUENCE", "SEQUENTIAL", 
                      "SERIALIZABLE", "SERIALLY_REUSABLE", "SERVERERROR", 
                      "SESSIONTIMEZONE", "SET", "SETS", "SETTINGS", "SHARE", 
                      "SHOW", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", 
                      "SINGLE", "SIZE", "SKIP_", "SMALLINT", "SNAPSHOT", 
                      "SOME", "SPECIFICATION", "SQLDATA", "SQLERROR", "STANDALONE", 
                      "START", "STARTUP", "STATEMENT", "STATEMENT_ID", "STATIC", 
                      "STATISTICS", "STRING", "SUBMULTISET", "SUBPARTITION", 
                      "SUBSTITUTABLE", "SUBTYPE", "SUCCESS", "SUSPEND", 
                      "TABLE", "THE", "THEN", "TIME", "TIMESTAMP", "TIMESTAMP_LTZ_UNCONSTRAINED", 
                      "TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", 
                      "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
                      "TIMEZONE_REGION", "TO", "TRAILING", "TRANSACTION", 
                      "TRANSLATE", "TREAT", "TRIGGER", "TRIM", "TRUE", "TRUNCATE", 
                      "TYPE", "UNBOUNDED", "UNDER", "UNION", "UNIQUE", "UNLIMITED", 
                      "UNPIVOT", "UNTIL", "UPDATE", "UPDATED", "UPSERT", 
                      "UROWID", "USE", "USING", "VALIDATE", "VALUE", "VALUES", 
                      "VARCHAR", "VARCHAR2", "VARIABLE", "VARRAY", "VARYING", 
                      "VERSION", "VERSIONS", "WAIT", "WARNING", "WELLFORMED", 
                      "WHEN", "WHENEVER", "WHERE", "WHILE", "WITH", "WITHIN", 
                      "WORK", "WRITE", "XML", "XMLAGG", "XMLATTRIBUTES", 
                      "XMLCAST", "XMLCOLATTVAL", "XMLELEMENT", "XMLEXISTS", 
                      "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", 
                      "XMLQUERY", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", 
                      "YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", "ZONE", 
                      "PREDICTION", "PREDICTION_BOUNDS", "PREDICTION_COST", 
                      "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", "PREDICTION_SET", 
                      "CUME_DIST", "DENSE_RANK", "LISTAGG", "PERCENT_RANK", 
                      "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", "AVG", 
                      "CORR", "LAG", "LEAD", "MAX", "MEDIAN", "MIN", "NTILE", 
                      "RATIO_TO_REPORT", "ROW_NUMBER", "SUM", "VARIANCE", 
                      "REGR_", "STDDEV", "VAR_", "COVAR_", "NATIONAL_CHAR_STRING_LIT", 
                      "BIT_STRING_LIT", "HEX_STRING_LIT", "DOUBLE_PERIOD", 
                      "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", 
                      "CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", 
                      "LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", 
                      "PLUS_SIGN", "MINUS_SIGN", "COMMA", "SOLIDUS", "AT_SIGN", 
                      "ASSIGN_OP", "BINDVAR", "COLON", "SEMICOLON", "LESS_THAN_OR_EQUALS_OP", 
                      "LESS_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "NOT_EQUAL_OP", 
                      "CARRET_OPERATOR_PART", "TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", 
                      "GREATER_THAN_OP", "CONCATENATION_OP", "VERTICAL_BAR", 
                      "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", "INTRODUCER", 
                      "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
                      "PROMPT", "REGULAR_ID", "ZV" ]

    RULE_swallow_to_semi = 0
    RULE_sql_script = 1
    RULE_unit_statement = 2
    RULE_drop_function = 3
    RULE_alter_function = 4
    RULE_create_function_body = 5
    RULE_parallel_enable_clause = 6
    RULE_partition_by_clause = 7
    RULE_result_cache_clause = 8
    RULE_relies_on_part = 9
    RULE_streaming_clause = 10
    RULE_drop_package = 11
    RULE_alter_package = 12
    RULE_create_package = 13
    RULE_package_body = 14
    RULE_package_spec = 15
    RULE_package_obj_spec = 16
    RULE_procedure_spec = 17
    RULE_function_spec = 18
    RULE_package_obj_body = 19
    RULE_drop_procedure = 20
    RULE_alter_procedure = 21
    RULE_create_procedure_body = 22
    RULE_drop_trigger = 23
    RULE_alter_trigger = 24
    RULE_create_trigger = 25
    RULE_trigger_follows_clause = 26
    RULE_trigger_when_clause = 27
    RULE_simple_dml_trigger = 28
    RULE_for_each_row = 29
    RULE_compound_dml_trigger = 30
    RULE_non_dml_trigger = 31
    RULE_trigger_body = 32
    RULE_routine_clause = 33
    RULE_compound_trigger_block = 34
    RULE_timing_point_section = 35
    RULE_non_dml_event = 36
    RULE_dml_event_clause = 37
    RULE_dml_event_element = 38
    RULE_dml_event_nested_clause = 39
    RULE_referencing_clause = 40
    RULE_referencing_element = 41
    RULE_drop_type = 42
    RULE_alter_type = 43
    RULE_compile_type_clause = 44
    RULE_replace_type_clause = 45
    RULE_alter_method_spec = 46
    RULE_alter_method_element = 47
    RULE_alter_attribute_definition = 48
    RULE_attribute_definition = 49
    RULE_alter_collection_clauses = 50
    RULE_dependent_handling_clause = 51
    RULE_dependent_exceptions_part = 52
    RULE_create_type = 53
    RULE_type_definition = 54
    RULE_object_type_def = 55
    RULE_object_as_part = 56
    RULE_object_under_part = 57
    RULE_nested_table_type_def = 58
    RULE_sqlj_object_type = 59
    RULE_type_body = 60
    RULE_type_body_elements = 61
    RULE_map_order_func_declaration = 62
    RULE_subprog_decl_in_type = 63
    RULE_proc_decl_in_type = 64
    RULE_func_decl_in_type = 65
    RULE_constructor_declaration = 66
    RULE_modifier_clause = 67
    RULE_object_member_spec = 68
    RULE_sqlj_object_type_attr = 69
    RULE_element_spec = 70
    RULE_element_spec_options = 71
    RULE_subprogram_spec = 72
    RULE_type_procedure_spec = 73
    RULE_type_function_spec = 74
    RULE_constructor_spec = 75
    RULE_map_order_function_spec = 76
    RULE_pragma_clause = 77
    RULE_pragma_elements = 78
    RULE_type_elements_parameter = 79
    RULE_drop_sequence = 80
    RULE_alter_sequence = 81
    RULE_create_sequence = 82
    RULE_sequence_spec = 83
    RULE_sequence_start_clause = 84
    RULE_invoker_rights_clause = 85
    RULE_compiler_parameters_clause = 86
    RULE_call_spec = 87
    RULE_java_spec = 88
    RULE_c_spec = 89
    RULE_c_agent_in_clause = 90
    RULE_c_parameters_clause = 91
    RULE_parameter = 92
    RULE_default_value_part = 93
    RULE_declare_spec = 94
    RULE_variable_declaration = 95
    RULE_subtype_declaration = 96
    RULE_cursor_declaration = 97
    RULE_parameter_spec = 98
    RULE_exception_declaration = 99
    RULE_pragma_declaration = 100
    RULE_record_declaration = 101
    RULE_record_type_dec = 102
    RULE_field_spec = 103
    RULE_record_var_dec = 104
    RULE_table_declaration = 105
    RULE_table_type_dec = 106
    RULE_table_indexed_by_part = 107
    RULE_varray_type_def = 108
    RULE_table_var_dec = 109
    RULE_seq_of_statements = 110
    RULE_label_declaration = 111
    RULE_statement = 112
    RULE_assume_statement = 113
    RULE_assert_statement = 114
    RULE_assignment_statement = 115
    RULE_continue_statement = 116
    RULE_exit_statement = 117
    RULE_goto_statement = 118
    RULE_if_statement = 119
    RULE_elsif_part = 120
    RULE_else_part = 121
    RULE_loop_statement = 122
    RULE_cursor_loop_param = 123
    RULE_forall_statement = 124
    RULE_bounds_clause = 125
    RULE_between_bound = 126
    RULE_lower_bound = 127
    RULE_upper_bound = 128
    RULE_null_statement = 129
    RULE_raise_statement = 130
    RULE_return_statement = 131
    RULE_function_call = 132
    RULE_body = 133
    RULE_exception_handler = 134
    RULE_trigger_block = 135
    RULE_block = 136
    RULE_sql_statement = 137
    RULE_execute_immediate = 138
    RULE_dynamic_returning_clause = 139
    RULE_data_manipulation_language_statements = 140
    RULE_cursor_manipulation_statements = 141
    RULE_close_statement = 142
    RULE_open_statement = 143
    RULE_fetch_statement = 144
    RULE_open_for_statement = 145
    RULE_transaction_control_statements = 146
    RULE_set_transaction_command = 147
    RULE_set_constraint_command = 148
    RULE_commit_statement = 149
    RULE_write_clause = 150
    RULE_rollback_statement = 151
    RULE_savepoint_statement = 152
    RULE_explain_statement = 153
    RULE_select_statement = 154
    RULE_subquery_factoring_clause = 155
    RULE_factoring_element = 156
    RULE_search_clause = 157
    RULE_cycle_clause = 158
    RULE_subquery = 159
    RULE_subquery_operation_part = 160
    RULE_query_block = 161
    RULE_selected_element = 162
    RULE_from_clause = 163
    RULE_table_ref_pivot = 164
    RULE_table_ref = 165
    RULE_table_ref_aux = 166
    RULE_join_clause = 167
    RULE_join_on_part = 168
    RULE_join_using_part = 169
    RULE_join_type = 170
    RULE_query_partition_clause = 171
    RULE_flashback_query_clause = 172
    RULE_pivot_clause = 173
    RULE_pivot_element = 174
    RULE_pivot_for_clause = 175
    RULE_pivot_in_clause = 176
    RULE_pivot_in_clause_element = 177
    RULE_pivot_in_clause_elements = 178
    RULE_unpivot_clause = 179
    RULE_unpivot_in_clause = 180
    RULE_unpivot_in_elements = 181
    RULE_hierarchical_query_clause = 182
    RULE_start_part = 183
    RULE_group_by_clause = 184
    RULE_group_by_elements = 185
    RULE_rollup_cube_clause = 186
    RULE_grouping_sets_clause = 187
    RULE_grouping_sets_elements = 188
    RULE_having_clause = 189
    RULE_model_clause = 190
    RULE_cell_reference_options = 191
    RULE_return_rows_clause = 192
    RULE_reference_model = 193
    RULE_main_model = 194
    RULE_model_column_clauses = 195
    RULE_model_column_partition_part = 196
    RULE_model_column_list = 197
    RULE_model_column = 198
    RULE_model_rules_clause = 199
    RULE_model_rules_part = 200
    RULE_model_rules_element = 201
    RULE_cell_assignment = 202
    RULE_model_iterate_clause = 203
    RULE_until_part = 204
    RULE_order_by_clause = 205
    RULE_order_by_elements = 206
    RULE_for_update_clause = 207
    RULE_for_update_of_part = 208
    RULE_for_update_options = 209
    RULE_limit_clause = 210
    RULE_update_statement = 211
    RULE_update_set_clause = 212
    RULE_column_based_update_set_clause = 213
    RULE_delete_statement = 214
    RULE_insert_statement = 215
    RULE_single_table_insert = 216
    RULE_multi_table_insert = 217
    RULE_multi_table_element = 218
    RULE_conditional_insert_clause = 219
    RULE_conditional_insert_when_part = 220
    RULE_conditional_insert_else_part = 221
    RULE_insert_into_clause = 222
    RULE_values_clause = 223
    RULE_merge_statement = 224
    RULE_merge_update_clause = 225
    RULE_merge_element = 226
    RULE_merge_update_delete_part = 227
    RULE_merge_insert_clause = 228
    RULE_selected_tableview = 229
    RULE_lock_table_statement = 230
    RULE_wait_nowait_part = 231
    RULE_lock_table_element = 232
    RULE_lock_mode = 233
    RULE_general_table_ref = 234
    RULE_static_returning_clause = 235
    RULE_error_logging_clause = 236
    RULE_error_logging_into_part = 237
    RULE_error_logging_reject_part = 238
    RULE_dml_table_expression_clause = 239
    RULE_table_collection_expression = 240
    RULE_subquery_restriction_clause = 241
    RULE_sample_clause = 242
    RULE_seed_part = 243
    RULE_cursor_expression = 244
    RULE_expression_list = 245
    RULE_condition = 246
    RULE_expression = 247
    RULE_is_part = 248
    RULE_cursor_part = 249
    RULE_multiset_type = 250
    RULE_relational_operator = 251
    RULE_like_type = 252
    RULE_like_escape_part = 253
    RULE_between_elements = 254
    RULE_concatenation = 255
    RULE_binary_expression = 256
    RULE_interval_expression = 257
    RULE_model_expression = 258
    RULE_model_expression_element = 259
    RULE_single_column_for_loop = 260
    RULE_for_like_part = 261
    RULE_for_increment_decrement_type = 262
    RULE_multi_column_for_loop = 263
    RULE_unary_expression = 264
    RULE_case_statement = 265
    RULE_simple_case_statement = 266
    RULE_simple_case_when_part = 267
    RULE_searched_case_statement = 268
    RULE_searched_case_when_part = 269
    RULE_case_else_part = 270
    RULE_atom = 271
    RULE_expression_or_vector = 272
    RULE_vector_expr = 273
    RULE_quantified_expression = 274
    RULE_standard_function = 275
    RULE_aggregate_windowed_function = 276
    RULE_over_clause_keyword = 277
    RULE_within_or_over_clause_keyword = 278
    RULE_standard_prediction_function_keyword = 279
    RULE_over_clause = 280
    RULE_windowing_clause = 281
    RULE_windowing_type = 282
    RULE_windowing_elements = 283
    RULE_using_clause = 284
    RULE_using_element = 285
    RULE_collect_order_by_part = 286
    RULE_within_or_over_part = 287
    RULE_cost_matrix_clause = 288
    RULE_xml_passing_clause = 289
    RULE_xml_attributes_clause = 290
    RULE_xml_namespaces_clause = 291
    RULE_xml_table_column = 292
    RULE_xml_general_default_part = 293
    RULE_xml_multiuse_expression_element = 294
    RULE_xmlroot_param_version_part = 295
    RULE_xmlroot_param_standalone_part = 296
    RULE_xmlserialize_param_enconding_part = 297
    RULE_xmlserialize_param_version_part = 298
    RULE_xmlserialize_param_ident_part = 299
    RULE_sql_plus_command = 300
    RULE_whenever_command = 301
    RULE_set_command = 302
    RULE_exit_command = 303
    RULE_prompt_command = 304
    RULE_show_errors_command = 305
    RULE_partition_extension_clause = 306
    RULE_column_alias = 307
    RULE_table_alias = 308
    RULE_alias_quoted_string = 309
    RULE_where_clause = 310
    RULE_current_of_clause = 311
    RULE_into_clause = 312
    RULE_xml_column_name = 313
    RULE_cost_class_name = 314
    RULE_attribute_name = 315
    RULE_savepoint_name = 316
    RULE_rollback_segment_name = 317
    RULE_table_var_name = 318
    RULE_schema_name = 319
    RULE_routine_name = 320
    RULE_package_name = 321
    RULE_implementation_type_name = 322
    RULE_parameter_name = 323
    RULE_reference_model_name = 324
    RULE_main_model_name = 325
    RULE_aggregate_function_name = 326
    RULE_query_name = 327
    RULE_constraint_name = 328
    RULE_label_name = 329
    RULE_type_name = 330
    RULE_sequence_name = 331
    RULE_exception_name = 332
    RULE_function_name = 333
    RULE_procedure_name = 334
    RULE_trigger_name = 335
    RULE_variable_name = 336
    RULE_index_name = 337
    RULE_cursor_name = 338
    RULE_record_name = 339
    RULE_collection_name = 340
    RULE_link_name = 341
    RULE_column_name = 342
    RULE_tableview_name = 343
    RULE_dot_id = 344
    RULE_star = 345
    RULE_keep_clause = 346
    RULE_function_argument = 347
    RULE_function_argument_analytic = 348
    RULE_function_argument_modeling = 349
    RULE_respect_or_ignore_nulls = 350
    RULE_argument = 351
    RULE_type_spec = 352
    RULE_datatype = 353
    RULE_precision_part = 354
    RULE_native_datatype_element = 355
    RULE_bind_variable = 356
    RULE_general_element = 357
    RULE_table_element = 358
    RULE_constant = 359
    RULE_numeric = 360
    RULE_numeric_negative = 361
    RULE_quoted_string = 362
    RULE_r_id = 363
    RULE_id_expression = 364
    RULE_not_equal_op = 365
    RULE_greater_than_or_equals_op = 366
    RULE_less_than_or_equals_op = 367
    RULE_concatenation_op = 368
    RULE_outer_join_sign = 369
    RULE_regular_id = 370

    ruleNames =  [ "swallow_to_semi", "sql_script", "unit_statement", "drop_function", 
                   "alter_function", "create_function_body", "parallel_enable_clause", 
                   "partition_by_clause", "result_cache_clause", "relies_on_part", 
                   "streaming_clause", "drop_package", "alter_package", 
                   "create_package", "package_body", "package_spec", "package_obj_spec", 
                   "procedure_spec", "function_spec", "package_obj_body", 
                   "drop_procedure", "alter_procedure", "create_procedure_body", 
                   "drop_trigger", "alter_trigger", "create_trigger", "trigger_follows_clause", 
                   "trigger_when_clause", "simple_dml_trigger", "for_each_row", 
                   "compound_dml_trigger", "non_dml_trigger", "trigger_body", 
                   "routine_clause", "compound_trigger_block", "timing_point_section", 
                   "non_dml_event", "dml_event_clause", "dml_event_element", 
                   "dml_event_nested_clause", "referencing_clause", "referencing_element", 
                   "drop_type", "alter_type", "compile_type_clause", "replace_type_clause", 
                   "alter_method_spec", "alter_method_element", "alter_attribute_definition", 
                   "attribute_definition", "alter_collection_clauses", "dependent_handling_clause", 
                   "dependent_exceptions_part", "create_type", "type_definition", 
                   "object_type_def", "object_as_part", "object_under_part", 
                   "nested_table_type_def", "sqlj_object_type", "type_body", 
                   "type_body_elements", "map_order_func_declaration", "subprog_decl_in_type", 
                   "proc_decl_in_type", "func_decl_in_type", "constructor_declaration", 
                   "modifier_clause", "object_member_spec", "sqlj_object_type_attr", 
                   "element_spec", "element_spec_options", "subprogram_spec", 
                   "type_procedure_spec", "type_function_spec", "constructor_spec", 
                   "map_order_function_spec", "pragma_clause", "pragma_elements", 
                   "type_elements_parameter", "drop_sequence", "alter_sequence", 
                   "create_sequence", "sequence_spec", "sequence_start_clause", 
                   "invoker_rights_clause", "compiler_parameters_clause", 
                   "call_spec", "java_spec", "c_spec", "c_agent_in_clause", 
                   "c_parameters_clause", "parameter", "default_value_part", 
                   "declare_spec", "variable_declaration", "subtype_declaration", 
                   "cursor_declaration", "parameter_spec", "exception_declaration", 
                   "pragma_declaration", "record_declaration", "record_type_dec", 
                   "field_spec", "record_var_dec", "table_declaration", 
                   "table_type_dec", "table_indexed_by_part", "varray_type_def", 
                   "table_var_dec", "seq_of_statements", "label_declaration", 
                   "statement", "assume_statement", "assert_statement", 
                   "assignment_statement", "continue_statement", "exit_statement", 
                   "goto_statement", "if_statement", "elsif_part", "else_part", 
                   "loop_statement", "cursor_loop_param", "forall_statement", 
                   "bounds_clause", "between_bound", "lower_bound", "upper_bound", 
                   "null_statement", "raise_statement", "return_statement", 
                   "function_call", "body", "exception_handler", "trigger_block", 
                   "block", "sql_statement", "execute_immediate", "dynamic_returning_clause", 
                   "data_manipulation_language_statements", "cursor_manipulation_statements", 
                   "close_statement", "open_statement", "fetch_statement", 
                   "open_for_statement", "transaction_control_statements", 
                   "set_transaction_command", "set_constraint_command", 
                   "commit_statement", "write_clause", "rollback_statement", 
                   "savepoint_statement", "explain_statement", "select_statement", 
                   "subquery_factoring_clause", "factoring_element", "search_clause", 
                   "cycle_clause", "subquery", "subquery_operation_part", 
                   "query_block", "selected_element", "from_clause", "table_ref_pivot", 
                   "table_ref", "table_ref_aux", "join_clause", "join_on_part", 
                   "join_using_part", "join_type", "query_partition_clause", 
                   "flashback_query_clause", "pivot_clause", "pivot_element", 
                   "pivot_for_clause", "pivot_in_clause", "pivot_in_clause_element", 
                   "pivot_in_clause_elements", "unpivot_clause", "unpivot_in_clause", 
                   "unpivot_in_elements", "hierarchical_query_clause", "start_part", 
                   "group_by_clause", "group_by_elements", "rollup_cube_clause", 
                   "grouping_sets_clause", "grouping_sets_elements", "having_clause", 
                   "model_clause", "cell_reference_options", "return_rows_clause", 
                   "reference_model", "main_model", "model_column_clauses", 
                   "model_column_partition_part", "model_column_list", "model_column", 
                   "model_rules_clause", "model_rules_part", "model_rules_element", 
                   "cell_assignment", "model_iterate_clause", "until_part", 
                   "order_by_clause", "order_by_elements", "for_update_clause", 
                   "for_update_of_part", "for_update_options", "limit_clause", 
                   "update_statement", "update_set_clause", "column_based_update_set_clause", 
                   "delete_statement", "insert_statement", "single_table_insert", 
                   "multi_table_insert", "multi_table_element", "conditional_insert_clause", 
                   "conditional_insert_when_part", "conditional_insert_else_part", 
                   "insert_into_clause", "values_clause", "merge_statement", 
                   "merge_update_clause", "merge_element", "merge_update_delete_part", 
                   "merge_insert_clause", "selected_tableview", "lock_table_statement", 
                   "wait_nowait_part", "lock_table_element", "lock_mode", 
                   "general_table_ref", "static_returning_clause", "error_logging_clause", 
                   "error_logging_into_part", "error_logging_reject_part", 
                   "dml_table_expression_clause", "table_collection_expression", 
                   "subquery_restriction_clause", "sample_clause", "seed_part", 
                   "cursor_expression", "expression_list", "condition", 
                   "expression", "is_part", "cursor_part", "multiset_type", 
                   "relational_operator", "like_type", "like_escape_part", 
                   "between_elements", "concatenation", "binary_expression", 
                   "interval_expression", "model_expression", "model_expression_element", 
                   "single_column_for_loop", "for_like_part", "for_increment_decrement_type", 
                   "multi_column_for_loop", "unary_expression", "case_statement", 
                   "simple_case_statement", "simple_case_when_part", "searched_case_statement", 
                   "searched_case_when_part", "case_else_part", "atom", 
                   "expression_or_vector", "vector_expr", "quantified_expression", 
                   "standard_function", "aggregate_windowed_function", "over_clause_keyword", 
                   "within_or_over_clause_keyword", "standard_prediction_function_keyword", 
                   "over_clause", "windowing_clause", "windowing_type", 
                   "windowing_elements", "using_clause", "using_element", 
                   "collect_order_by_part", "within_or_over_part", "cost_matrix_clause", 
                   "xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause", 
                   "xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element", 
                   "xmlroot_param_version_part", "xmlroot_param_standalone_part", 
                   "xmlserialize_param_enconding_part", "xmlserialize_param_version_part", 
                   "xmlserialize_param_ident_part", "sql_plus_command", 
                   "whenever_command", "set_command", "exit_command", "prompt_command", 
                   "show_errors_command", "partition_extension_clause", 
                   "column_alias", "table_alias", "alias_quoted_string", 
                   "where_clause", "current_of_clause", "into_clause", "xml_column_name", 
                   "cost_class_name", "attribute_name", "savepoint_name", 
                   "rollback_segment_name", "table_var_name", "schema_name", 
                   "routine_name", "package_name", "implementation_type_name", 
                   "parameter_name", "reference_model_name", "main_model_name", 
                   "aggregate_function_name", "query_name", "constraint_name", 
                   "label_name", "type_name", "sequence_name", "exception_name", 
                   "function_name", "procedure_name", "trigger_name", "variable_name", 
                   "index_name", "cursor_name", "record_name", "collection_name", 
                   "link_name", "column_name", "tableview_name", "dot_id", 
                   "star", "keep_clause", "function_argument", "function_argument_analytic", 
                   "function_argument_modeling", "respect_or_ignore_nulls", 
                   "argument", "type_spec", "datatype", "precision_part", 
                   "native_datatype_element", "bind_variable", "general_element", 
                   "table_element", "constant", "numeric", "numeric_negative", 
                   "quoted_string", "r_id", "id_expression", "not_equal_op", 
                   "greater_than_or_equals_op", "less_than_or_equals_op", 
                   "concatenation_op", "outer_join_sign", "regular_id" ]

    EOF = Token.EOF
    T__0=1
    A_LETTER=2
    ADD=3
    AFTER=4
    AGENT=5
    AGGREGATE=6
    ALL=7
    ALTER=8
    ANALYZE=9
    AND=10
    ANY=11
    ARRAY=12
    AS=13
    ASSUME=14
    ASSERT=15
    ASC=16
    ASSOCIATE=17
    AT=18
    ATTRIBUTE=19
    AUDIT=20
    AUTHID=21
    AUTO=22
    AUTOMATIC=23
    AUTONOMOUS_TRANSACTION=24
    BATCH=25
    BEFORE=26
    BEGIN=27
    BETWEEN=28
    BFILE=29
    BINARY_DOUBLE=30
    BINARY_FLOAT=31
    BINARY_INTEGER=32
    BLOB=33
    BLOCK=34
    BODY=35
    BOOLEAN=36
    BOTH=37
    BREADTH=38
    BULK=39
    BY=40
    BYTE=41
    C_LETTER=42
    CACHE=43
    CALL=44
    CANONICAL=45
    CASCADE=46
    CASE=47
    CAST=48
    CHAR=49
    CHAR_CS=50
    CHARACTER=51
    CHECK=52
    CHR=53
    CLOB=54
    CLOSE=55
    CLUSTER=56
    COLLECT=57
    COLUMNS=58
    COMMENT=59
    COMMIT=60
    COMMITTED=61
    COMPATIBILITY=62
    COMPILE=63
    COMPOUND=64
    CONNECT=65
    CONNECT_BY_ROOT=66
    CONSTANT=67
    CONSTRAINT=68
    CONSTRAINTS=69
    CONSTRUCTOR=70
    CONTENT=71
    CONTEXT=72
    CONTINUE=73
    CONVERT=74
    CORRUPT_XID=75
    CORRUPT_XID_ALL=76
    COST=77
    COUNT=78
    CREATE=79
    CROSS=80
    CUBE=81
    CURRENT=82
    CURRENT_USER=83
    CURSOR=84
    CUSTOMDATUM=85
    CYCLE=86
    DATA=87
    DATABASE=88
    DATE=89
    DAY=90
    DB_ROLE_CHANGE=91
    DBTIMEZONE=92
    DDL=93
    DEBUG=94
    DEC=95
    DECIMAL=96
    DECLARE=97
    DECOMPOSE=98
    DECREMENT=99
    DEFAULT=100
    DEFAULTS=101
    DEFERRED=102
    DEFINER=103
    DELETE=104
    DEPTH=105
    DESC=106
    DETERMINISTIC=107
    DIMENSION=108
    DISABLE=109
    DISASSOCIATE=110
    DISTINCT=111
    DOCUMENT=112
    DOUBLE=113
    DROP=114
    DSINTERVAL_UNCONSTRAINED=115
    EACH=116
    ELEMENT=117
    ELSE=118
    ELSIF=119
    EMPTY=120
    ENABLE=121
    ENCODING=122
    END=123
    ENTITYESCAPING=124
    ERR=125
    ERRORS=126
    ESCAPE=127
    EVALNAME=128
    EXCEPT=129
    EXCEPTION=130
    EXCEPTION_INIT=131
    EXCEPTIONS=132
    EXCLUDE=133
    EXCLUSIVE=134
    EXECUTE=135
    EXISTS=136
    EXIT=137
    EXPLAIN=138
    EXTERNAL=139
    EXTRACT=140
    FAILURE=141
    FALSE=142
    FETCH=143
    FINAL=144
    FIRST=145
    FIRST_VALUE=146
    FLOAT=147
    FOLLOWING=148
    FOLLOWS=149
    FOR=150
    FORALL=151
    FORCE=152
    FROM=153
    FULL=154
    FUNCTION=155
    GOTO=156
    GRANT=157
    GROUP=158
    GROUPING=159
    HASH=160
    HAVING=161
    HIDE=162
    HOUR=163
    IF=164
    IGNORE=165
    IMMEDIATE=166
    IN=167
    INCLUDE=168
    INCLUDING=169
    INCREMENT=170
    INDENT=171
    INDEX=172
    INDEXED=173
    INDICATOR=174
    INDICES=175
    INFINITE=176
    INLINE=177
    INNER=178
    INOUT=179
    INSERT=180
    INSTANTIABLE=181
    INSTEAD=182
    INT=183
    INTEGER=184
    INTERSECT=185
    INTERVAL=186
    INTO=187
    INVALIDATE=188
    IS=189
    ISOLATION=190
    ITERATE=191
    JAVA=192
    JOIN=193
    KEEP=194
    LANGUAGE=195
    LAST=196
    LAST_VALUE=197
    LEADING=198
    LEFT=199
    LEVEL=200
    LIBRARY=201
    LIKE=202
    LIKE2=203
    LIKE4=204
    LIKEC=205
    LIMIT=206
    LOCAL=207
    LOCK=208
    LOCKED=209
    LOG=210
    LOGOFF=211
    LOGON=212
    LONG=213
    LOOP=214
    MAIN=215
    MAP=216
    MATCHED=217
    MAXVALUE=218
    MEASURES=219
    MEMBER=220
    MERGE=221
    MINUS=222
    MINUTE=223
    MINVALUE=224
    MLSLABEL=225
    MODE=226
    MODEL=227
    MODIFY=228
    MONTH=229
    MULTISET=230
    NAME=231
    NAN=232
    NATURAL=233
    NATURALN=234
    NAV=235
    NCHAR=236
    NCHAR_CS=237
    NCLOB=238
    NESTED=239
    NEW=240
    NO=241
    NOAUDIT=242
    NOCACHE=243
    NOCOPY=244
    NOCYCLE=245
    NOENTITYESCAPING=246
    NOMAXVALUE=247
    NOMINVALUE=248
    NONE=249
    NOORDER=250
    NOSCHEMACHECK=251
    NOT=252
    NOWAIT=253
    NULL=254
    NULLS=255
    NUMBER=256
    NUMERIC=257
    NVARCHAR2=258
    OBJECT=259
    OF=260
    OFF=261
    OID=262
    OLD=263
    ON=264
    ONLY=265
    OPEN=266
    OPTION=267
    OR=268
    ORADATA=269
    ORDER=270
    ORDINALITY=271
    OSERROR=272
    OUT=273
    OUTER=274
    OVER=275
    OVERRIDING=276
    PACKAGE=277
    PARALLEL_ENABLE=278
    PARAMETERS=279
    PARENT=280
    PARTITION=281
    PASSING=282
    PATH=283
    PERCENT_ROWTYPE=284
    PERCENT_TYPE=285
    PIPELINED=286
    PIVOT=287
    PLAN=288
    PLS_INTEGER=289
    POSITIVE=290
    POSITIVEN=291
    PRAGMA=292
    PRECEDING=293
    PRECISION=294
    PRESENT=295
    PRIOR=296
    PROCEDURE=297
    RAISE=298
    RANGE=299
    RAW=300
    READ=301
    REAL=302
    RECORD=303
    REF=304
    REFERENCE=305
    REFERENCING=306
    REJECT=307
    RELIES_ON=308
    RENAME=309
    REPLACE=310
    RESPECT=311
    RESTRICT_REFERENCES=312
    RESULT=313
    RESULT_CACHE=314
    RETURN=315
    RETURNING=316
    REUSE=317
    REVERSE=318
    REVOKE=319
    RIGHT=320
    ROLLBACK=321
    ROLLUP=322
    ROW=323
    ROWID=324
    ROWS=325
    RULES=326
    SAMPLE=327
    SAVE=328
    SAVEPOINT=329
    SCHEMA=330
    SCHEMACHECK=331
    SCN=332
    SEARCH=333
    SECOND=334
    SEED=335
    SEGMENT=336
    SELECT=337
    SELF=338
    SEQUENCE=339
    SEQUENTIAL=340
    SERIALIZABLE=341
    SERIALLY_REUSABLE=342
    SERVERERROR=343
    SESSIONTIMEZONE=344
    SET=345
    SETS=346
    SETTINGS=347
    SHARE=348
    SHOW=349
    SHUTDOWN=350
    SIBLINGS=351
    SIGNTYPE=352
    SIMPLE_INTEGER=353
    SINGLE=354
    SIZE=355
    SKIP_=356
    SMALLINT=357
    SNAPSHOT=358
    SOME=359
    SPECIFICATION=360
    SQLDATA=361
    SQLERROR=362
    STANDALONE=363
    START=364
    STARTUP=365
    STATEMENT=366
    STATEMENT_ID=367
    STATIC=368
    STATISTICS=369
    STRING=370
    SUBMULTISET=371
    SUBPARTITION=372
    SUBSTITUTABLE=373
    SUBTYPE=374
    SUCCESS=375
    SUSPEND=376
    TABLE=377
    THE=378
    THEN=379
    TIME=380
    TIMESTAMP=381
    TIMESTAMP_LTZ_UNCONSTRAINED=382
    TIMESTAMP_TZ_UNCONSTRAINED=383
    TIMESTAMP_UNCONSTRAINED=384
    TIMEZONE_ABBR=385
    TIMEZONE_HOUR=386
    TIMEZONE_MINUTE=387
    TIMEZONE_REGION=388
    TO=389
    TRAILING=390
    TRANSACTION=391
    TRANSLATE=392
    TREAT=393
    TRIGGER=394
    TRIM=395
    TRUE=396
    TRUNCATE=397
    TYPE=398
    UNBOUNDED=399
    UNDER=400
    UNION=401
    UNIQUE=402
    UNLIMITED=403
    UNPIVOT=404
    UNTIL=405
    UPDATE=406
    UPDATED=407
    UPSERT=408
    UROWID=409
    USE=410
    USING=411
    VALIDATE=412
    VALUE=413
    VALUES=414
    VARCHAR=415
    VARCHAR2=416
    VARIABLE=417
    VARRAY=418
    VARYING=419
    VERSION=420
    VERSIONS=421
    WAIT=422
    WARNING=423
    WELLFORMED=424
    WHEN=425
    WHENEVER=426
    WHERE=427
    WHILE=428
    WITH=429
    WITHIN=430
    WORK=431
    WRITE=432
    XML=433
    XMLAGG=434
    XMLATTRIBUTES=435
    XMLCAST=436
    XMLCOLATTVAL=437
    XMLELEMENT=438
    XMLEXISTS=439
    XMLFOREST=440
    XMLNAMESPACES=441
    XMLPARSE=442
    XMLPI=443
    XMLQUERY=444
    XMLROOT=445
    XMLSERIALIZE=446
    XMLTABLE=447
    YEAR=448
    YES=449
    YMINTERVAL_UNCONSTRAINED=450
    ZONE=451
    PREDICTION=452
    PREDICTION_BOUNDS=453
    PREDICTION_COST=454
    PREDICTION_DETAILS=455
    PREDICTION_PROBABILITY=456
    PREDICTION_SET=457
    CUME_DIST=458
    DENSE_RANK=459
    LISTAGG=460
    PERCENT_RANK=461
    PERCENTILE_CONT=462
    PERCENTILE_DISC=463
    RANK=464
    AVG=465
    CORR=466
    LAG=467
    LEAD=468
    MAX=469
    MEDIAN=470
    MIN=471
    NTILE=472
    RATIO_TO_REPORT=473
    ROW_NUMBER=474
    SUM=475
    VARIANCE=476
    REGR_=477
    STDDEV=478
    VAR_=479
    COVAR_=480
    NATIONAL_CHAR_STRING_LIT=481
    BIT_STRING_LIT=482
    HEX_STRING_LIT=483
    DOUBLE_PERIOD=484
    PERIOD=485
    UNSIGNED_INTEGER=486
    APPROXIMATE_NUM_LIT=487
    CHAR_STRING=488
    DELIMITED_ID=489
    PERCENT=490
    AMPERSAND=491
    LEFT_PAREN=492
    RIGHT_PAREN=493
    DOUBLE_ASTERISK=494
    ASTERISK=495
    PLUS_SIGN=496
    MINUS_SIGN=497
    COMMA=498
    SOLIDUS=499
    AT_SIGN=500
    ASSIGN_OP=501
    BINDVAR=502
    COLON=503
    SEMICOLON=504
    LESS_THAN_OR_EQUALS_OP=505
    LESS_THAN_OP=506
    GREATER_THAN_OR_EQUALS_OP=507
    NOT_EQUAL_OP=508
    CARRET_OPERATOR_PART=509
    TILDE_OPERATOR_PART=510
    EXCLAMATION_OPERATOR_PART=511
    GREATER_THAN_OP=512
    CONCATENATION_OP=513
    VERTICAL_BAR=514
    EQUALS_OP=515
    LEFT_BRACKET=516
    RIGHT_BRACKET=517
    INTRODUCER=518
    SPACES=519
    SINGLE_LINE_COMMENT=520
    MULTI_LINE_COMMENT=521
    PROMPT=522
    REGULAR_ID=523
    ZV=524

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Swallow_to_semiContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlSqlParser.RULE_swallow_to_semi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwallow_to_semi" ):
                listener.enterSwallow_to_semi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwallow_to_semi" ):
                listener.exitSwallow_to_semi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwallow_to_semi" ):
                return visitor.visitSwallow_to_semi(self)
            else:
                return visitor.visitChildren(self)




    def swallow_to_semi(self):

        localctx = PlSqlParser.Swallow_to_semiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_swallow_to_semi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 742
                _la = self._input.LA(1)
                if _la <= 0 or _la==PlSqlParser.SEMICOLON:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 745 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.T__0) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ALTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.AND) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.AS) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASC) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BEGIN) | (1 << PlSqlParser.BETWEEN) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BREADTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BY) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CACHE) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CASE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHECK) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CREATE - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECLARE - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DELETE - 64)) | (1 << (PlSqlParser.DEPTH - 64)) | (1 << (PlSqlParser.DESC - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DISTINCT - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DROP - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.ELSE - 64)) | (1 << (PlSqlParser.ELSIF - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.END - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPT - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXCLUSIVE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXISTS - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FALSE - 128)) | (1 << (PlSqlParser.FETCH - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FOR - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FROM - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GOTO - 128)) | (1 << (PlSqlParser.GRANT - 128)) | (1 << (PlSqlParser.GROUP - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HAVING - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IF - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.IN - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEX - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSERT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERSECT - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INTO - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.IS - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCK - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUS - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODE - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCACHE - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NOMAXVALUE - 192)) | (1 << (PlSqlParser.NOMINVALUE - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOORDER - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NOT - 192)) | (1 << (PlSqlParser.NOWAIT - 192)) | (1 << (PlSqlParser.NULL - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OF - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ON - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.OPTION - 256)) | (1 << (PlSqlParser.OR - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDER - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PERCENT_ROWTYPE - 256)) | (1 << (PlSqlParser.PERCENT_TYPE - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PIVOT - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.PRIOR - 256)) | (1 << (PlSqlParser.PROCEDURE - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)) | (1 << (PlSqlParser.REVOKE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SEARCH - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELECT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENCE - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHARE - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.START - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TABLE - 320)) | (1 << (PlSqlParser.THE - 320)) | (1 << (PlSqlParser.THEN - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TO - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUE - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNION - 384)) | (1 << (PlSqlParser.UNIQUE - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNPIVOT - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATE - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.USING - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VALUES - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHEN - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHERE - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITH - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 448)) | (1 << (PlSqlParser.BIT_STRING_LIT - 448)) | (1 << (PlSqlParser.HEX_STRING_LIT - 448)) | (1 << (PlSqlParser.DOUBLE_PERIOD - 448)) | (1 << (PlSqlParser.PERIOD - 448)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 448)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 448)) | (1 << (PlSqlParser.CHAR_STRING - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)) | (1 << (PlSqlParser.PERCENT - 448)) | (1 << (PlSqlParser.AMPERSAND - 448)) | (1 << (PlSqlParser.LEFT_PAREN - 448)) | (1 << (PlSqlParser.RIGHT_PAREN - 448)) | (1 << (PlSqlParser.DOUBLE_ASTERISK - 448)) | (1 << (PlSqlParser.ASTERISK - 448)) | (1 << (PlSqlParser.PLUS_SIGN - 448)) | (1 << (PlSqlParser.MINUS_SIGN - 448)) | (1 << (PlSqlParser.COMMA - 448)) | (1 << (PlSqlParser.SOLIDUS - 448)) | (1 << (PlSqlParser.AT_SIGN - 448)) | (1 << (PlSqlParser.ASSIGN_OP - 448)) | (1 << (PlSqlParser.BINDVAR - 448)) | (1 << (PlSqlParser.COLON - 448)) | (1 << (PlSqlParser.LESS_THAN_OR_EQUALS_OP - 448)) | (1 << (PlSqlParser.LESS_THAN_OP - 448)) | (1 << (PlSqlParser.GREATER_THAN_OR_EQUALS_OP - 448)) | (1 << (PlSqlParser.NOT_EQUAL_OP - 448)) | (1 << (PlSqlParser.CARRET_OPERATOR_PART - 448)) | (1 << (PlSqlParser.TILDE_OPERATOR_PART - 448)) | (1 << (PlSqlParser.EXCLAMATION_OPERATOR_PART - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (PlSqlParser.GREATER_THAN_OP - 512)) | (1 << (PlSqlParser.CONCATENATION_OP - 512)) | (1 << (PlSqlParser.VERTICAL_BAR - 512)) | (1 << (PlSqlParser.EQUALS_OP - 512)) | (1 << (PlSqlParser.LEFT_BRACKET - 512)) | (1 << (PlSqlParser.RIGHT_BRACKET - 512)) | (1 << (PlSqlParser.INTRODUCER - 512)) | (1 << (PlSqlParser.SPACES - 512)) | (1 << (PlSqlParser.SINGLE_LINE_COMMENT - 512)) | (1 << (PlSqlParser.MULTI_LINE_COMMENT - 512)) | (1 << (PlSqlParser.PROMPT - 512)) | (1 << (PlSqlParser.REGULAR_ID - 512)) | (1 << (PlSqlParser.ZV - 512)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_scriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PlSqlParser.EOF, 0)

        def unit_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Unit_statementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Unit_statementContext,i)


        def sql_plus_command(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Sql_plus_commandContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Sql_plus_commandContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_sql_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_script" ):
                listener.enterSql_script(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_script" ):
                listener.exitSql_script(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_script" ):
                return visitor.visitSql_script(self)
            else:
                return visitor.visitChildren(self)




    def sql_script(self):

        localctx = PlSqlParser.Sql_scriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sql_script)
        self._la = 0 # Token type
        try:
            self.state = 765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 749
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.ALTER, PlSqlParser.CREATE, PlSqlParser.DELETE, PlSqlParser.DROP, PlSqlParser.EXPLAIN, PlSqlParser.FUNCTION, PlSqlParser.INSERT, PlSqlParser.LOCK, PlSqlParser.MERGE, PlSqlParser.PROCEDURE, PlSqlParser.SELECT, PlSqlParser.UPDATE, PlSqlParser.WITH, PlSqlParser.LEFT_PAREN]:
                    self.state = 747
                    self.unit_statement()
                    pass
                elif token in [PlSqlParser.EXIT, PlSqlParser.SET, PlSqlParser.SHOW, PlSqlParser.WHENEVER, PlSqlParser.SOLIDUS, PlSqlParser.PROMPT]:
                    self.state = 748
                    self.sql_plus_command()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 751
                self.match(PlSqlParser.EOF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.ALTER or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (PlSqlParser.CREATE - 79)) | (1 << (PlSqlParser.DELETE - 79)) | (1 << (PlSqlParser.DROP - 79)) | (1 << (PlSqlParser.EXIT - 79)) | (1 << (PlSqlParser.EXPLAIN - 79)))) != 0) or ((((_la - 155)) & ~0x3f) == 0 and ((1 << (_la - 155)) & ((1 << (PlSqlParser.FUNCTION - 155)) | (1 << (PlSqlParser.INSERT - 155)) | (1 << (PlSqlParser.LOCK - 155)))) != 0) or _la==PlSqlParser.MERGE or ((((_la - 297)) & ~0x3f) == 0 and ((1 << (_la - 297)) & ((1 << (PlSqlParser.PROCEDURE - 297)) | (1 << (PlSqlParser.SELECT - 297)) | (1 << (PlSqlParser.SET - 297)) | (1 << (PlSqlParser.SHOW - 297)))) != 0) or ((((_la - 406)) & ~0x3f) == 0 and ((1 << (_la - 406)) & ((1 << (PlSqlParser.UPDATE - 406)) | (1 << (PlSqlParser.WHENEVER - 406)) | (1 << (PlSqlParser.WITH - 406)))) != 0) or ((((_la - 492)) & ~0x3f) == 0 and ((1 << (_la - 492)) & ((1 << (PlSqlParser.LEFT_PAREN - 492)) | (1 << (PlSqlParser.SOLIDUS - 492)) | (1 << (PlSqlParser.PROMPT - 492)))) != 0):
                    self.state = 759
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.ALTER, PlSqlParser.CREATE, PlSqlParser.DELETE, PlSqlParser.DROP, PlSqlParser.EXPLAIN, PlSqlParser.FUNCTION, PlSqlParser.INSERT, PlSqlParser.LOCK, PlSqlParser.MERGE, PlSqlParser.PROCEDURE, PlSqlParser.SELECT, PlSqlParser.UPDATE, PlSqlParser.WITH, PlSqlParser.LEFT_PAREN]:
                        self.state = 753
                        self.unit_statement()
                        self.state = 754
                        self.match(PlSqlParser.SEMICOLON)
                        pass
                    elif token in [PlSqlParser.EXIT, PlSqlParser.SET, PlSqlParser.SHOW, PlSqlParser.WHENEVER, PlSqlParser.SOLIDUS, PlSqlParser.PROMPT]:
                        self.state = 756
                        self.sql_plus_command()
                        self.state = 757
                        self.match(PlSqlParser.SEMICOLON)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 763
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 764
                self.match(PlSqlParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unit_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_function(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_functionContext,0)


        def alter_package(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_packageContext,0)


        def alter_procedure(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_procedureContext,0)


        def alter_sequence(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_sequenceContext,0)


        def alter_trigger(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_triggerContext,0)


        def alter_type(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_typeContext,0)


        def create_function_body(self):
            return self.getTypedRuleContext(PlSqlParser.Create_function_bodyContext,0)


        def create_procedure_body(self):
            return self.getTypedRuleContext(PlSqlParser.Create_procedure_bodyContext,0)


        def create_package(self):
            return self.getTypedRuleContext(PlSqlParser.Create_packageContext,0)


        def create_sequence(self):
            return self.getTypedRuleContext(PlSqlParser.Create_sequenceContext,0)


        def create_trigger(self):
            return self.getTypedRuleContext(PlSqlParser.Create_triggerContext,0)


        def create_type(self):
            return self.getTypedRuleContext(PlSqlParser.Create_typeContext,0)


        def drop_function(self):
            return self.getTypedRuleContext(PlSqlParser.Drop_functionContext,0)


        def drop_package(self):
            return self.getTypedRuleContext(PlSqlParser.Drop_packageContext,0)


        def drop_procedure(self):
            return self.getTypedRuleContext(PlSqlParser.Drop_procedureContext,0)


        def drop_sequence(self):
            return self.getTypedRuleContext(PlSqlParser.Drop_sequenceContext,0)


        def drop_trigger(self):
            return self.getTypedRuleContext(PlSqlParser.Drop_triggerContext,0)


        def drop_type(self):
            return self.getTypedRuleContext(PlSqlParser.Drop_typeContext,0)


        def data_manipulation_language_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Data_manipulation_language_statementsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_unit_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_statement" ):
                listener.enterUnit_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_statement" ):
                listener.exitUnit_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_statement" ):
                return visitor.visitUnit_statement(self)
            else:
                return visitor.visitChildren(self)




    def unit_statement(self):

        localctx = PlSqlParser.Unit_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_unit_statement)
        try:
            self.state = 786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 767
                self.alter_function()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 768
                self.alter_package()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 769
                self.alter_procedure()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 770
                self.alter_sequence()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 771
                self.alter_trigger()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 772
                self.alter_type()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 773
                self.create_function_body()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 774
                self.create_procedure_body()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 775
                self.create_package()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 776
                self.create_sequence()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 777
                self.create_trigger()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 778
                self.create_type()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 779
                self.drop_function()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 780
                self.drop_package()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 781
                self.drop_procedure()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 782
                self.drop_sequence()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 783
                self.drop_trigger()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 784
                self.drop_type()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 785
                self.data_manipulation_language_statements()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(PlSqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(PlSqlParser.Function_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_drop_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_function" ):
                listener.enterDrop_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_function" ):
                listener.exitDrop_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_function" ):
                return visitor.visitDrop_function(self)
            else:
                return visitor.visitChildren(self)




    def drop_function(self):

        localctx = PlSqlParser.Drop_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_drop_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.match(PlSqlParser.DROP)
            self.state = 789
            self.match(PlSqlParser.FUNCTION)
            self.state = 790
            self.function_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PlSqlParser.ALTER, 0)

        def FUNCTION(self):
            return self.getToken(PlSqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(PlSqlParser.Function_nameContext,0)


        def COMPILE(self):
            return self.getToken(PlSqlParser.COMPILE, 0)

        def DEBUG(self):
            return self.getToken(PlSqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(PlSqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(PlSqlParser.SETTINGS, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_function" ):
                listener.enterAlter_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_function" ):
                listener.exitAlter_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_function" ):
                return visitor.visitAlter_function(self)
            else:
                return visitor.visitChildren(self)




    def alter_function(self):

        localctx = PlSqlParser.Alter_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_alter_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(PlSqlParser.ALTER)
            self.state = 793
            self.match(PlSqlParser.FUNCTION)
            self.state = 794
            self.function_name()
            self.state = 795
            self.match(PlSqlParser.COMPILE)
            self.state = 797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 796
                self.match(PlSqlParser.DEBUG)


            self.state = 802
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 799
                    self.compiler_parameters_clause() 
                self.state = 804
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.REUSE:
                self.state = 805
                self.match(PlSqlParser.REUSE)
                self.state = 806
                self.match(PlSqlParser.SETTINGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_function_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(PlSqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(PlSqlParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def implementation_type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Implementation_type_nameContext,0)


        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ParameterContext,i)


        def invoker_rights_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Invoker_rights_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Invoker_rights_clauseContext,i)


        def parallel_enable_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Parallel_enable_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Parallel_enable_clauseContext,i)


        def result_cache_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Result_cache_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Result_cache_clauseContext,i)


        def DETERMINISTIC(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.DETERMINISTIC)
            else:
                return self.getToken(PlSqlParser.DETERMINISTIC, i)

        def PIPELINED(self):
            return self.getToken(PlSqlParser.PIPELINED, 0)

        def AGGREGATE(self):
            return self.getToken(PlSqlParser.AGGREGATE, 0)

        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def OR(self):
            return self.getToken(PlSqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(PlSqlParser.REPLACE, 0)

        def body(self):
            return self.getTypedRuleContext(PlSqlParser.BodyContext,0)


        def call_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Call_specContext,0)


        def DECLARE(self):
            return self.getToken(PlSqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_create_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_function_body" ):
                listener.enterCreate_function_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_function_body" ):
                listener.exitCreate_function_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_function_body" ):
                return visitor.visitCreate_function_body(self)
            else:
                return visitor.visitChildren(self)




    def create_function_body(self):

        localctx = PlSqlParser.Create_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_create_function_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.CREATE:
                self.state = 809
                self.match(PlSqlParser.CREATE)
                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.OR:
                    self.state = 810
                    self.match(PlSqlParser.OR)
                    self.state = 811
                    self.match(PlSqlParser.REPLACE)




            self.state = 816
            self.match(PlSqlParser.FUNCTION)
            self.state = 817
            self.function_name()
            self.state = 829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 818
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 819
                self.parameter()
                self.state = 824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 820
                    self.match(PlSqlParser.COMMA)
                    self.state = 821
                    self.parameter()
                    self.state = 826
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 827
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 831
            self.match(PlSqlParser.RETURN)
            self.state = 832
            self.type_spec()
            self.state = 839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.AUTHID or _la==PlSqlParser.DETERMINISTIC or _la==PlSqlParser.PARALLEL_ENABLE or _la==PlSqlParser.RESULT_CACHE:
                self.state = 837
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.AUTHID]:
                    self.state = 833
                    self.invoker_rights_clause()
                    pass
                elif token in [PlSqlParser.PARALLEL_ENABLE]:
                    self.state = 834
                    self.parallel_enable_clause()
                    pass
                elif token in [PlSqlParser.RESULT_CACHE]:
                    self.state = 835
                    self.result_cache_clause()
                    pass
                elif token in [PlSqlParser.DETERMINISTIC]:
                    self.state = 836
                    self.match(PlSqlParser.DETERMINISTIC)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 862
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.PIPELINED:
                    self.state = 842
                    self.match(PlSqlParser.PIPELINED)


                self.state = 845
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 857
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 847
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.DECLARE:
                        self.state = 846
                        self.match(PlSqlParser.DECLARE)


                    self.state = 852
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CREATE - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.PROCEDURE - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)) | (1 << (PlSqlParser.BINDVAR - 448)) | (1 << (PlSqlParser.COLON - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                        self.state = 849
                        self.declare_spec()
                        self.state = 854
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 855
                    self.body()
                    pass

                elif la_ == 2:
                    self.state = 856
                    self.call_spec()
                    pass


                pass

            elif la_ == 2:
                self.state = 859
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.AGGREGATE or _la==PlSqlParser.PIPELINED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 860
                self.match(PlSqlParser.USING)
                self.state = 861
                self.implementation_type_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parallel_enable_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARALLEL_ENABLE(self):
            return self.getToken(PlSqlParser.PARALLEL_ENABLE, 0)

        def partition_by_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Partition_by_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_parallel_enable_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParallel_enable_clause" ):
                listener.enterParallel_enable_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParallel_enable_clause" ):
                listener.exitParallel_enable_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParallel_enable_clause" ):
                return visitor.visitParallel_enable_clause(self)
            else:
                return visitor.visitChildren(self)




    def parallel_enable_clause(self):

        localctx = PlSqlParser.Parallel_enable_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_parallel_enable_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.match(PlSqlParser.PARALLEL_ENABLE)
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 865
                self.partition_by_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(PlSqlParser.PARTITION, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def ANY(self):
            return self.getToken(PlSqlParser.ANY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def HASH(self):
            return self.getToken(PlSqlParser.HASH, 0)

        def RANGE(self):
            return self.getToken(PlSqlParser.RANGE, 0)

        def streaming_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Streaming_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_partition_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_by_clause" ):
                listener.enterPartition_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_by_clause" ):
                listener.exitPartition_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartition_by_clause" ):
                return visitor.visitPartition_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def partition_by_clause(self):

        localctx = PlSqlParser.Partition_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_partition_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 869
            self.match(PlSqlParser.PARTITION)
            self.state = 870
            self.expression(0)
            self.state = 871
            self.match(PlSqlParser.BY)
            self.state = 885
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ANY]:
                self.state = 872
                self.match(PlSqlParser.ANY)
                pass
            elif token in [PlSqlParser.HASH, PlSqlParser.RANGE]:
                self.state = 873
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.HASH or _la==PlSqlParser.RANGE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 874
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 875
                self.column_name()
                self.state = 880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 876
                    self.match(PlSqlParser.COMMA)
                    self.state = 877
                    self.column_name()
                    self.state = 882
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 883
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.CLUSTER or _la==PlSqlParser.ORDER:
                self.state = 887
                self.streaming_clause()


            self.state = 890
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Result_cache_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_CACHE(self):
            return self.getToken(PlSqlParser.RESULT_CACHE, 0)

        def relies_on_part(self):
            return self.getTypedRuleContext(PlSqlParser.Relies_on_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_result_cache_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_cache_clause" ):
                listener.enterResult_cache_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_cache_clause" ):
                listener.exitResult_cache_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResult_cache_clause" ):
                return visitor.visitResult_cache_clause(self)
            else:
                return visitor.visitChildren(self)




    def result_cache_clause(self):

        localctx = PlSqlParser.Result_cache_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_result_cache_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.match(PlSqlParser.RESULT_CACHE)
            self.state = 894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.RELIES_ON:
                self.state = 893
                self.relies_on_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Relies_on_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELIES_ON(self):
            return self.getToken(PlSqlParser.RELIES_ON, 0)

        def tableview_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Tableview_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_relies_on_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelies_on_part" ):
                listener.enterRelies_on_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelies_on_part" ):
                listener.exitRelies_on_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelies_on_part" ):
                return visitor.visitRelies_on_part(self)
            else:
                return visitor.visitChildren(self)




    def relies_on_part(self):

        localctx = PlSqlParser.Relies_on_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_relies_on_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896
            self.match(PlSqlParser.RELIES_ON)
            self.state = 897
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 898
            self.tableview_name()
            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 899
                self.match(PlSqlParser.COMMA)
                self.state = 900
                self.tableview_name()
                self.state = 905
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 906
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Streaming_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def ORDER(self):
            return self.getToken(PlSqlParser.ORDER, 0)

        def CLUSTER(self):
            return self.getToken(PlSqlParser.CLUSTER, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_streaming_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStreaming_clause" ):
                listener.enterStreaming_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStreaming_clause" ):
                listener.exitStreaming_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStreaming_clause" ):
                return visitor.visitStreaming_clause(self)
            else:
                return visitor.visitChildren(self)




    def streaming_clause(self):

        localctx = PlSqlParser.Streaming_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_streaming_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.CLUSTER or _la==PlSqlParser.ORDER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 909
            self.expression(0)
            self.state = 910
            self.match(PlSqlParser.BY)
            self.state = 911
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 912
            self.column_name()
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 913
                self.match(PlSqlParser.COMMA)
                self.state = 914
                self.column_name()
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 920
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_packageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def PACKAGE(self):
            return self.getToken(PlSqlParser.PACKAGE, 0)

        def package_name(self):
            return self.getTypedRuleContext(PlSqlParser.Package_nameContext,0)


        def BODY(self):
            return self.getToken(PlSqlParser.BODY, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_drop_package

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_package" ):
                listener.enterDrop_package(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_package" ):
                listener.exitDrop_package(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_package" ):
                return visitor.visitDrop_package(self)
            else:
                return visitor.visitChildren(self)




    def drop_package(self):

        localctx = PlSqlParser.Drop_packageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_drop_package)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.match(PlSqlParser.DROP)
            self.state = 923
            self.match(PlSqlParser.PACKAGE)
            self.state = 925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 924
                self.match(PlSqlParser.BODY)


            self.state = 927
            self.package_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_packageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PlSqlParser.ALTER, 0)

        def PACKAGE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.PACKAGE)
            else:
                return self.getToken(PlSqlParser.PACKAGE, i)

        def package_name(self):
            return self.getTypedRuleContext(PlSqlParser.Package_nameContext,0)


        def COMPILE(self):
            return self.getToken(PlSqlParser.COMPILE, 0)

        def DEBUG(self):
            return self.getToken(PlSqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(PlSqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(PlSqlParser.SETTINGS, 0)

        def BODY(self):
            return self.getToken(PlSqlParser.BODY, 0)

        def SPECIFICATION(self):
            return self.getToken(PlSqlParser.SPECIFICATION, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_package

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_package" ):
                listener.enterAlter_package(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_package" ):
                listener.exitAlter_package(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_package" ):
                return visitor.visitAlter_package(self)
            else:
                return visitor.visitChildren(self)




    def alter_package(self):

        localctx = PlSqlParser.Alter_packageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_alter_package)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 929
            self.match(PlSqlParser.ALTER)
            self.state = 930
            self.match(PlSqlParser.PACKAGE)
            self.state = 931
            self.package_name()
            self.state = 932
            self.match(PlSqlParser.COMPILE)
            self.state = 934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 933
                self.match(PlSqlParser.DEBUG)


            self.state = 937
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 936
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.BODY or _la==PlSqlParser.PACKAGE or _la==PlSqlParser.SPECIFICATION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 942
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 939
                    self.compiler_parameters_clause() 
                self.state = 944
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

            self.state = 947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.REUSE:
                self.state = 945
                self.match(PlSqlParser.REUSE)
                self.state = 946
                self.match(PlSqlParser.SETTINGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_packageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def PACKAGE(self):
            return self.getToken(PlSqlParser.PACKAGE, 0)

        def OR(self):
            return self.getToken(PlSqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(PlSqlParser.REPLACE, 0)

        def package_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Package_specContext,0)


        def package_body(self):
            return self.getTypedRuleContext(PlSqlParser.Package_bodyContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_create_package

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_package" ):
                listener.enterCreate_package(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_package" ):
                listener.exitCreate_package(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_package" ):
                return visitor.visitCreate_package(self)
            else:
                return visitor.visitChildren(self)




    def create_package(self):

        localctx = PlSqlParser.Create_packageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_create_package)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.match(PlSqlParser.CREATE)
            self.state = 952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.OR:
                self.state = 950
                self.match(PlSqlParser.OR)
                self.state = 951
                self.match(PlSqlParser.REPLACE)


            self.state = 954
            self.match(PlSqlParser.PACKAGE)
            self.state = 957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 955
                self.package_spec()

            elif la_ == 2:
                self.state = 956
                self.package_body()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Package_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BODY(self):
            return self.getToken(PlSqlParser.BODY, 0)

        def package_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Package_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Package_nameContext,i)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def BEGIN(self):
            return self.getToken(PlSqlParser.BEGIN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(PlSqlParser.END, 0)

        def package_obj_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Package_obj_bodyContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Package_obj_bodyContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_package_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_body" ):
                listener.enterPackage_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_body" ):
                listener.exitPackage_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_body" ):
                return visitor.visitPackage_body(self)
            else:
                return visitor.visitChildren(self)




    def package_body(self):

        localctx = PlSqlParser.Package_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_package_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.match(PlSqlParser.BODY)
            self.state = 960
            self.package_name()
            self.state = 961
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CREATE - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.PROCEDURE - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)) | (1 << (PlSqlParser.BINDVAR - 448)) | (1 << (PlSqlParser.COLON - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 962
                self.package_obj_body()
                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 974
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.BEGIN]:
                self.state = 968
                self.match(PlSqlParser.BEGIN)
                self.state = 969
                self.seq_of_statements()
                pass
            elif token in [PlSqlParser.END]:
                self.state = 970
                self.match(PlSqlParser.END)
                self.state = 972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                    self.state = 971
                    self.package_name()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Package_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def package_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Package_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Package_nameContext,i)


        def END(self):
            return self.getToken(PlSqlParser.END, 0)

        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def invoker_rights_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Invoker_rights_clauseContext,0)


        def package_obj_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Package_obj_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Package_obj_specContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_package_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_spec" ):
                listener.enterPackage_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_spec" ):
                listener.exitPackage_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_spec" ):
                return visitor.visitPackage_spec(self)
            else:
                return visitor.visitChildren(self)




    def package_spec(self):

        localctx = PlSqlParser.Package_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_package_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.package_name()
            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AUTHID:
                self.state = 977
                self.invoker_rights_clause()


            self.state = 980
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.PROCEDURE - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)) | (1 << (PlSqlParser.BINDVAR - 448)) | (1 << (PlSqlParser.COLON - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 981
                self.package_obj_spec()
                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 987
            self.match(PlSqlParser.END)
            self.state = 989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 988
                self.package_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Package_obj_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Variable_declarationContext,0)


        def subtype_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Subtype_declarationContext,0)


        def cursor_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_declarationContext,0)


        def exception_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Exception_declarationContext,0)


        def pragma_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Pragma_declarationContext,0)


        def record_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Record_declarationContext,0)


        def table_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Table_declarationContext,0)


        def procedure_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Procedure_specContext,0)


        def function_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Function_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_package_obj_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_obj_spec" ):
                listener.enterPackage_obj_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_obj_spec" ):
                listener.exitPackage_obj_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_obj_spec" ):
                return visitor.visitPackage_obj_spec(self)
            else:
                return visitor.visitChildren(self)




    def package_obj_spec(self):

        localctx = PlSqlParser.Package_obj_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_package_obj_spec)
        try:
            self.state = 1000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 991
                self.variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 992
                self.subtype_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 993
                self.cursor_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 994
                self.exception_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 995
                self.pragma_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 996
                self.record_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 997
                self.table_declaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 998
                self.procedure_spec()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 999
                self.function_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Procedure_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(PlSqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(PlSqlParser.Procedure_nameContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ParameterContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_procedure_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_spec" ):
                listener.enterProcedure_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_spec" ):
                listener.exitProcedure_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedure_spec" ):
                return visitor.visitProcedure_spec(self)
            else:
                return visitor.visitChildren(self)




    def procedure_spec(self):

        localctx = PlSqlParser.Procedure_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_procedure_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.match(PlSqlParser.PROCEDURE)
            self.state = 1003
            self.procedure_name()
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 1004
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 1005
                self.parameter()
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 1006
                    self.match(PlSqlParser.COMMA)
                    self.state = 1007
                    self.parameter()
                    self.state = 1012
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1013
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 1017
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(PlSqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(PlSqlParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ParameterContext,i)


        def DETERMINISTIC(self):
            return self.getToken(PlSqlParser.DETERMINISTIC, 0)

        def RESULT_CACHE(self):
            return self.getToken(PlSqlParser.RESULT_CACHE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_function_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_spec" ):
                listener.enterFunction_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_spec" ):
                listener.exitFunction_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_spec" ):
                return visitor.visitFunction_spec(self)
            else:
                return visitor.visitChildren(self)




    def function_spec(self):

        localctx = PlSqlParser.Function_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_function_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            self.match(PlSqlParser.FUNCTION)
            self.state = 1020
            self.function_name()
            self.state = 1032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 1021
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 1022
                self.parameter()
                self.state = 1027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 1023
                    self.match(PlSqlParser.COMMA)
                    self.state = 1024
                    self.parameter()
                    self.state = 1029
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1030
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 1034
            self.match(PlSqlParser.RETURN)
            self.state = 1035
            self.type_spec()
            self.state = 1037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DETERMINISTIC:
                self.state = 1036
                self.match(PlSqlParser.DETERMINISTIC)


            self.state = 1040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.RESULT_CACHE:
                self.state = 1039
                self.match(PlSqlParser.RESULT_CACHE)


            self.state = 1042
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Package_obj_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Variable_declarationContext,0)


        def subtype_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Subtype_declarationContext,0)


        def cursor_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_declarationContext,0)


        def exception_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Exception_declarationContext,0)


        def record_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Record_declarationContext,0)


        def table_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Table_declarationContext,0)


        def create_procedure_body(self):
            return self.getTypedRuleContext(PlSqlParser.Create_procedure_bodyContext,0)


        def create_function_body(self):
            return self.getTypedRuleContext(PlSqlParser.Create_function_bodyContext,0)


        def procedure_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Procedure_specContext,0)


        def function_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Function_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_package_obj_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_obj_body" ):
                listener.enterPackage_obj_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_obj_body" ):
                listener.exitPackage_obj_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_obj_body" ):
                return visitor.visitPackage_obj_body(self)
            else:
                return visitor.visitChildren(self)




    def package_obj_body(self):

        localctx = PlSqlParser.Package_obj_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_package_obj_body)
        try:
            self.state = 1054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1044
                self.variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1045
                self.subtype_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1046
                self.cursor_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1047
                self.exception_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1048
                self.record_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1049
                self.table_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1050
                self.create_procedure_body()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1051
                self.create_function_body()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1052
                self.procedure_spec()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1053
                self.function_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(PlSqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(PlSqlParser.Procedure_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_drop_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_procedure" ):
                listener.enterDrop_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_procedure" ):
                listener.exitDrop_procedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_procedure" ):
                return visitor.visitDrop_procedure(self)
            else:
                return visitor.visitChildren(self)




    def drop_procedure(self):

        localctx = PlSqlParser.Drop_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_drop_procedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.match(PlSqlParser.DROP)
            self.state = 1057
            self.match(PlSqlParser.PROCEDURE)
            self.state = 1058
            self.procedure_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PlSqlParser.ALTER, 0)

        def PROCEDURE(self):
            return self.getToken(PlSqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(PlSqlParser.Procedure_nameContext,0)


        def COMPILE(self):
            return self.getToken(PlSqlParser.COMPILE, 0)

        def DEBUG(self):
            return self.getToken(PlSqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(PlSqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(PlSqlParser.SETTINGS, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_procedure" ):
                listener.enterAlter_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_procedure" ):
                listener.exitAlter_procedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_procedure" ):
                return visitor.visitAlter_procedure(self)
            else:
                return visitor.visitChildren(self)




    def alter_procedure(self):

        localctx = PlSqlParser.Alter_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_alter_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.match(PlSqlParser.ALTER)
            self.state = 1061
            self.match(PlSqlParser.PROCEDURE)
            self.state = 1062
            self.procedure_name()
            self.state = 1063
            self.match(PlSqlParser.COMPILE)
            self.state = 1065
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 1064
                self.match(PlSqlParser.DEBUG)


            self.state = 1070
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1067
                    self.compiler_parameters_clause() 
                self.state = 1072
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

            self.state = 1075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.REUSE:
                self.state = 1073
                self.match(PlSqlParser.REUSE)
                self.state = 1074
                self.match(PlSqlParser.SETTINGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_procedure_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(PlSqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(PlSqlParser.Procedure_nameContext,0)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def body(self):
            return self.getTypedRuleContext(PlSqlParser.BodyContext,0)


        def call_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Call_specContext,0)


        def EXTERNAL(self):
            return self.getToken(PlSqlParser.EXTERNAL, 0)

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ParameterContext,i)


        def invoker_rights_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Invoker_rights_clauseContext,0)


        def DECLARE(self):
            return self.getToken(PlSqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Declare_specContext,i)


        def OR(self):
            return self.getToken(PlSqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(PlSqlParser.REPLACE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_create_procedure_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_procedure_body" ):
                listener.enterCreate_procedure_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_procedure_body" ):
                listener.exitCreate_procedure_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_procedure_body" ):
                return visitor.visitCreate_procedure_body(self)
            else:
                return visitor.visitChildren(self)




    def create_procedure_body(self):

        localctx = PlSqlParser.Create_procedure_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_create_procedure_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.CREATE:
                self.state = 1077
                self.match(PlSqlParser.CREATE)
                self.state = 1080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.OR:
                    self.state = 1078
                    self.match(PlSqlParser.OR)
                    self.state = 1079
                    self.match(PlSqlParser.REPLACE)




            self.state = 1084
            self.match(PlSqlParser.PROCEDURE)
            self.state = 1085
            self.procedure_name()
            self.state = 1097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 1086
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 1087
                self.parameter()
                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 1088
                    self.match(PlSqlParser.COMMA)
                    self.state = 1089
                    self.parameter()
                    self.state = 1094
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1095
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 1100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AUTHID:
                self.state = 1099
                self.invoker_rights_clause()


            self.state = 1102
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 1104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.DECLARE:
                    self.state = 1103
                    self.match(PlSqlParser.DECLARE)


                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CREATE - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.PROCEDURE - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)) | (1 << (PlSqlParser.BINDVAR - 448)) | (1 << (PlSqlParser.COLON - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                    self.state = 1106
                    self.declare_spec()
                    self.state = 1111
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1112
                self.body()
                pass

            elif la_ == 2:
                self.state = 1113
                self.call_spec()
                pass

            elif la_ == 3:
                self.state = 1114
                self.match(PlSqlParser.EXTERNAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def TRIGGER(self):
            return self.getToken(PlSqlParser.TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(PlSqlParser.Trigger_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_drop_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_trigger" ):
                listener.enterDrop_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_trigger" ):
                listener.exitDrop_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_trigger" ):
                return visitor.visitDrop_trigger(self)
            else:
                return visitor.visitChildren(self)




    def drop_trigger(self):

        localctx = PlSqlParser.Drop_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_drop_trigger)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            self.match(PlSqlParser.DROP)
            self.state = 1118
            self.match(PlSqlParser.TRIGGER)
            self.state = 1119
            self.trigger_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tn1 = None # Trigger_nameContext
            self.tn2 = None # Trigger_nameContext

        def ALTER(self):
            return self.getToken(PlSqlParser.ALTER, 0)

        def TRIGGER(self):
            return self.getToken(PlSqlParser.TRIGGER, 0)

        def trigger_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Trigger_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Trigger_nameContext,i)


        def RENAME(self):
            return self.getToken(PlSqlParser.RENAME, 0)

        def TO(self):
            return self.getToken(PlSqlParser.TO, 0)

        def COMPILE(self):
            return self.getToken(PlSqlParser.COMPILE, 0)

        def ENABLE(self):
            return self.getToken(PlSqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(PlSqlParser.DISABLE, 0)

        def DEBUG(self):
            return self.getToken(PlSqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(PlSqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(PlSqlParser.SETTINGS, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_trigger" ):
                listener.enterAlter_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_trigger" ):
                listener.exitAlter_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_trigger" ):
                return visitor.visitAlter_trigger(self)
            else:
                return visitor.visitChildren(self)




    def alter_trigger(self):

        localctx = PlSqlParser.Alter_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_alter_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.match(PlSqlParser.ALTER)
            self.state = 1122
            self.match(PlSqlParser.TRIGGER)
            self.state = 1123
            localctx.tn1 = self.trigger_name()
            self.state = 1142
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.DISABLE, PlSqlParser.ENABLE]:
                self.state = 1124
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DISABLE or _la==PlSqlParser.ENABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [PlSqlParser.RENAME]:
                self.state = 1125
                self.match(PlSqlParser.RENAME)
                self.state = 1126
                self.match(PlSqlParser.TO)
                self.state = 1127
                localctx.tn2 = self.trigger_name()
                pass
            elif token in [PlSqlParser.COMPILE]:
                self.state = 1128
                self.match(PlSqlParser.COMPILE)
                self.state = 1130
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 1129
                    self.match(PlSqlParser.DEBUG)


                self.state = 1135
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1132
                        self.compiler_parameters_clause() 
                    self.state = 1137
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                self.state = 1140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.REUSE:
                    self.state = 1138
                    self.match(PlSqlParser.REUSE)
                    self.state = 1139
                    self.match(PlSqlParser.SETTINGS)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def TRIGGER(self):
            return self.getToken(PlSqlParser.TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(PlSqlParser.Trigger_nameContext,0)


        def trigger_body(self):
            return self.getTypedRuleContext(PlSqlParser.Trigger_bodyContext,0)


        def simple_dml_trigger(self):
            return self.getTypedRuleContext(PlSqlParser.Simple_dml_triggerContext,0)


        def compound_dml_trigger(self):
            return self.getTypedRuleContext(PlSqlParser.Compound_dml_triggerContext,0)


        def non_dml_trigger(self):
            return self.getTypedRuleContext(PlSqlParser.Non_dml_triggerContext,0)


        def OR(self):
            return self.getToken(PlSqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(PlSqlParser.REPLACE, 0)

        def trigger_follows_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Trigger_follows_clauseContext,0)


        def trigger_when_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Trigger_when_clauseContext,0)


        def ENABLE(self):
            return self.getToken(PlSqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(PlSqlParser.DISABLE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_create_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_trigger" ):
                listener.enterCreate_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_trigger" ):
                listener.exitCreate_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_trigger" ):
                return visitor.visitCreate_trigger(self)
            else:
                return visitor.visitChildren(self)




    def create_trigger(self):

        localctx = PlSqlParser.Create_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_create_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            self.match(PlSqlParser.CREATE)
            self.state = 1147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.OR:
                self.state = 1145
                self.match(PlSqlParser.OR)
                self.state = 1146
                self.match(PlSqlParser.REPLACE)


            self.state = 1149
            self.match(PlSqlParser.TRIGGER)
            self.state = 1150
            self.trigger_name()
            self.state = 1154
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 1151
                self.simple_dml_trigger()
                pass

            elif la_ == 2:
                self.state = 1152
                self.compound_dml_trigger()
                pass

            elif la_ == 3:
                self.state = 1153
                self.non_dml_trigger()
                pass


            self.state = 1157
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 1156
                self.trigger_follows_clause()


            self.state = 1160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 1159
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DISABLE or _la==PlSqlParser.ENABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WHEN:
                self.state = 1162
                self.trigger_when_clause()


            self.state = 1165
            self.trigger_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_follows_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOLLOWS(self):
            return self.getToken(PlSqlParser.FOLLOWS, 0)

        def trigger_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Trigger_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Trigger_nameContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_trigger_follows_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_follows_clause" ):
                listener.enterTrigger_follows_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_follows_clause" ):
                listener.exitTrigger_follows_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_follows_clause" ):
                return visitor.visitTrigger_follows_clause(self)
            else:
                return visitor.visitChildren(self)




    def trigger_follows_clause(self):

        localctx = PlSqlParser.Trigger_follows_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_trigger_follows_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            self.match(PlSqlParser.FOLLOWS)
            self.state = 1168
            self.trigger_name()
            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 1169
                self.match(PlSqlParser.COMMA)
                self.state = 1170
                self.trigger_name()
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_when_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PlSqlParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_trigger_when_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_when_clause" ):
                listener.enterTrigger_when_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_when_clause" ):
                listener.exitTrigger_when_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_when_clause" ):
                return visitor.visitTrigger_when_clause(self)
            else:
                return visitor.visitChildren(self)




    def trigger_when_clause(self):

        localctx = PlSqlParser.Trigger_when_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_trigger_when_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176
            self.match(PlSqlParser.WHEN)
            self.state = 1177
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 1178
            self.condition()
            self.state = 1179
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_event_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Dml_event_clauseContext,0)


        def BEFORE(self):
            return self.getToken(PlSqlParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(PlSqlParser.AFTER, 0)

        def INSTEAD(self):
            return self.getToken(PlSqlParser.INSTEAD, 0)

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def referencing_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Referencing_clauseContext,0)


        def for_each_row(self):
            return self.getTypedRuleContext(PlSqlParser.For_each_rowContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_simple_dml_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_dml_trigger" ):
                listener.enterSimple_dml_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_dml_trigger" ):
                listener.exitSimple_dml_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_dml_trigger" ):
                return visitor.visitSimple_dml_trigger(self)
            else:
                return visitor.visitChildren(self)




    def simple_dml_trigger(self):

        localctx = PlSqlParser.Simple_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_simple_dml_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.BEFORE]:
                self.state = 1181
                self.match(PlSqlParser.BEFORE)
                pass
            elif token in [PlSqlParser.AFTER]:
                self.state = 1182
                self.match(PlSqlParser.AFTER)
                pass
            elif token in [PlSqlParser.INSTEAD]:
                self.state = 1183
                self.match(PlSqlParser.INSTEAD)
                self.state = 1184
                self.match(PlSqlParser.OF)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1187
            self.dml_event_clause()
            self.state = 1189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 1188
                self.referencing_clause()


            self.state = 1192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FOR:
                self.state = 1191
                self.for_each_row()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_each_rowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def EACH(self):
            return self.getToken(PlSqlParser.EACH, 0)

        def ROW(self):
            return self.getToken(PlSqlParser.ROW, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_for_each_row

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_each_row" ):
                listener.enterFor_each_row(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_each_row" ):
                listener.exitFor_each_row(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_each_row" ):
                return visitor.visitFor_each_row(self)
            else:
                return visitor.visitChildren(self)




    def for_each_row(self):

        localctx = PlSqlParser.For_each_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_for_each_row)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1194
            self.match(PlSqlParser.FOR)
            self.state = 1195
            self.match(PlSqlParser.EACH)
            self.state = 1196
            self.match(PlSqlParser.ROW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def dml_event_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Dml_event_clauseContext,0)


        def referencing_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Referencing_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_compound_dml_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_dml_trigger" ):
                listener.enterCompound_dml_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_dml_trigger" ):
                listener.exitCompound_dml_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_dml_trigger" ):
                return visitor.visitCompound_dml_trigger(self)
            else:
                return visitor.visitChildren(self)




    def compound_dml_trigger(self):

        localctx = PlSqlParser.Compound_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_compound_dml_trigger)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self.match(PlSqlParser.FOR)
            self.state = 1199
            self.dml_event_clause()
            self.state = 1201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 1200
                self.referencing_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Non_dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_dml_event(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Non_dml_eventContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Non_dml_eventContext,i)


        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def BEFORE(self):
            return self.getToken(PlSqlParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(PlSqlParser.AFTER, 0)

        def DATABASE(self):
            return self.getToken(PlSqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(PlSqlParser.SCHEMA, 0)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.OR)
            else:
                return self.getToken(PlSqlParser.OR, i)

        def schema_name(self):
            return self.getTypedRuleContext(PlSqlParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_non_dml_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_dml_trigger" ):
                listener.enterNon_dml_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_dml_trigger" ):
                listener.exitNon_dml_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNon_dml_trigger" ):
                return visitor.visitNon_dml_trigger(self)
            else:
                return visitor.visitChildren(self)




    def non_dml_trigger(self):

        localctx = PlSqlParser.Non_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_non_dml_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.AFTER or _la==PlSqlParser.BEFORE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1204
            self.non_dml_event()
            self.state = 1209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.OR:
                self.state = 1205
                self.match(PlSqlParser.OR)
                self.state = 1206
                self.non_dml_event()
                self.state = 1211
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1212
            self.match(PlSqlParser.ON)
            self.state = 1220
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 1213
                self.match(PlSqlParser.DATABASE)
                pass

            elif la_ == 2:
                self.state = 1217
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 1214
                    self.schema_name()
                    self.state = 1215
                    self.match(PlSqlParser.PERIOD)


                self.state = 1219
                self.match(PlSqlParser.SCHEMA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPOUND(self):
            return self.getToken(PlSqlParser.COMPOUND, 0)

        def TRIGGER(self):
            return self.getToken(PlSqlParser.TRIGGER, 0)

        def CALL(self):
            return self.getToken(PlSqlParser.CALL, 0)

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def trigger_block(self):
            return self.getTypedRuleContext(PlSqlParser.Trigger_blockContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_trigger_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_body" ):
                listener.enterTrigger_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_body" ):
                listener.exitTrigger_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_body" ):
                return visitor.visitTrigger_body(self)
            else:
                return visitor.visitChildren(self)




    def trigger_body(self):

        localctx = PlSqlParser.Trigger_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_trigger_body)
        try:
            self.state = 1227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1222
                self.match(PlSqlParser.COMPOUND)
                self.state = 1223
                self.match(PlSqlParser.TRIGGER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1224
                self.match(PlSqlParser.CALL)
                self.state = 1225
                self.r_id()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1226
                self.trigger_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Routine_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def routine_name(self):
            return self.getTypedRuleContext(PlSqlParser.Routine_nameContext,0)


        def function_argument(self):
            return self.getTypedRuleContext(PlSqlParser.Function_argumentContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_routine_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutine_clause" ):
                listener.enterRoutine_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutine_clause" ):
                listener.exitRoutine_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutine_clause" ):
                return visitor.visitRoutine_clause(self)
            else:
                return visitor.visitChildren(self)




    def routine_clause(self):

        localctx = PlSqlParser.Routine_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_routine_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            self.routine_name()
            self.state = 1231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 1230
                self.function_argument()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_trigger_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPOUND(self):
            return self.getToken(PlSqlParser.COMPOUND, 0)

        def TRIGGER(self):
            return self.getToken(PlSqlParser.TRIGGER, 0)

        def END(self):
            return self.getToken(PlSqlParser.END, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(PlSqlParser.Trigger_nameContext,0)


        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Declare_specContext,i)


        def timing_point_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Timing_point_sectionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Timing_point_sectionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_compound_trigger_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_trigger_block" ):
                listener.enterCompound_trigger_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_trigger_block" ):
                listener.exitCompound_trigger_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_trigger_block" ):
                return visitor.visitCompound_trigger_block(self)
            else:
                return visitor.visitChildren(self)




    def compound_trigger_block(self):

        localctx = PlSqlParser.Compound_trigger_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_compound_trigger_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1233
            self.match(PlSqlParser.COMPOUND)
            self.state = 1234
            self.match(PlSqlParser.TRIGGER)
            self.state = 1238
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1235
                    self.declare_spec() 
                self.state = 1240
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

            self.state = 1242 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1241
                self.timing_point_section()
                self.state = 1244 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.AFTER or _la==PlSqlParser.BEFORE):
                    break

            self.state = 1246
            self.match(PlSqlParser.END)
            self.state = 1247
            self.trigger_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Timing_point_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bk = None # Token
            self.ak = None # Token

        def STATEMENT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.STATEMENT)
            else:
                return self.getToken(PlSqlParser.STATEMENT, i)

        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def trigger_block(self):
            return self.getTypedRuleContext(PlSqlParser.Trigger_blockContext,0)


        def BEFORE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.BEFORE)
            else:
                return self.getToken(PlSqlParser.BEFORE, i)

        def EACH(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.EACH)
            else:
                return self.getToken(PlSqlParser.EACH, i)

        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ROW)
            else:
                return self.getToken(PlSqlParser.ROW, i)

        def AFTER(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.AFTER)
            else:
                return self.getToken(PlSqlParser.AFTER, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_timing_point_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTiming_point_section" ):
                listener.enterTiming_point_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTiming_point_section" ):
                listener.exitTiming_point_section(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTiming_point_section" ):
                return visitor.visitTiming_point_section(self)
            else:
                return visitor.visitChildren(self)




    def timing_point_section(self):

        localctx = PlSqlParser.Timing_point_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_timing_point_section)
        try:
            self.state = 1285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1249
                localctx.bk = self.match(PlSqlParser.BEFORE)
                self.state = 1250
                self.match(PlSqlParser.STATEMENT)
                self.state = 1251
                self.match(PlSqlParser.IS)
                self.state = 1252
                self.trigger_block()
                self.state = 1253
                self.match(PlSqlParser.BEFORE)
                self.state = 1254
                self.match(PlSqlParser.STATEMENT)
                self.state = 1255
                self.match(PlSqlParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1257
                localctx.bk = self.match(PlSqlParser.BEFORE)
                self.state = 1258
                self.match(PlSqlParser.EACH)
                self.state = 1259
                self.match(PlSqlParser.ROW)
                self.state = 1260
                self.match(PlSqlParser.IS)
                self.state = 1261
                self.trigger_block()
                self.state = 1262
                self.match(PlSqlParser.BEFORE)
                self.state = 1263
                self.match(PlSqlParser.EACH)
                self.state = 1264
                self.match(PlSqlParser.ROW)
                self.state = 1265
                self.match(PlSqlParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1267
                localctx.ak = self.match(PlSqlParser.AFTER)
                self.state = 1268
                self.match(PlSqlParser.STATEMENT)
                self.state = 1269
                self.match(PlSqlParser.IS)
                self.state = 1270
                self.trigger_block()
                self.state = 1271
                self.match(PlSqlParser.AFTER)
                self.state = 1272
                self.match(PlSqlParser.STATEMENT)
                self.state = 1273
                self.match(PlSqlParser.SEMICOLON)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1275
                localctx.ak = self.match(PlSqlParser.AFTER)
                self.state = 1276
                self.match(PlSqlParser.EACH)
                self.state = 1277
                self.match(PlSqlParser.ROW)
                self.state = 1278
                self.match(PlSqlParser.IS)
                self.state = 1279
                self.trigger_block()
                self.state = 1280
                self.match(PlSqlParser.AFTER)
                self.state = 1281
                self.match(PlSqlParser.EACH)
                self.state = 1282
                self.match(PlSqlParser.ROW)
                self.state = 1283
                self.match(PlSqlParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Non_dml_eventContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PlSqlParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(PlSqlParser.ANALYZE, 0)

        def ASSOCIATE(self):
            return self.getToken(PlSqlParser.ASSOCIATE, 0)

        def STATISTICS(self):
            return self.getToken(PlSqlParser.STATISTICS, 0)

        def AUDIT(self):
            return self.getToken(PlSqlParser.AUDIT, 0)

        def COMMENT(self):
            return self.getToken(PlSqlParser.COMMENT, 0)

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def DISASSOCIATE(self):
            return self.getToken(PlSqlParser.DISASSOCIATE, 0)

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def GRANT(self):
            return self.getToken(PlSqlParser.GRANT, 0)

        def NOAUDIT(self):
            return self.getToken(PlSqlParser.NOAUDIT, 0)

        def RENAME(self):
            return self.getToken(PlSqlParser.RENAME, 0)

        def REVOKE(self):
            return self.getToken(PlSqlParser.REVOKE, 0)

        def TRUNCATE(self):
            return self.getToken(PlSqlParser.TRUNCATE, 0)

        def DDL(self):
            return self.getToken(PlSqlParser.DDL, 0)

        def STARTUP(self):
            return self.getToken(PlSqlParser.STARTUP, 0)

        def SHUTDOWN(self):
            return self.getToken(PlSqlParser.SHUTDOWN, 0)

        def DB_ROLE_CHANGE(self):
            return self.getToken(PlSqlParser.DB_ROLE_CHANGE, 0)

        def LOGON(self):
            return self.getToken(PlSqlParser.LOGON, 0)

        def LOGOFF(self):
            return self.getToken(PlSqlParser.LOGOFF, 0)

        def SERVERERROR(self):
            return self.getToken(PlSqlParser.SERVERERROR, 0)

        def SUSPEND(self):
            return self.getToken(PlSqlParser.SUSPEND, 0)

        def DATABASE(self):
            return self.getToken(PlSqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(PlSqlParser.SCHEMA, 0)

        def FOLLOWS(self):
            return self.getToken(PlSqlParser.FOLLOWS, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_non_dml_event

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_dml_event" ):
                listener.enterNon_dml_event(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_dml_event" ):
                listener.exitNon_dml_event(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNon_dml_event" ):
                return visitor.visitNon_dml_event(self)
            else:
                return visitor.visitChildren(self)




    def non_dml_event(self):

        localctx = PlSqlParser.Non_dml_eventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_non_dml_event)
        try:
            self.state = 1313
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ALTER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1287
                self.match(PlSqlParser.ALTER)
                pass
            elif token in [PlSqlParser.ANALYZE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1288
                self.match(PlSqlParser.ANALYZE)
                pass
            elif token in [PlSqlParser.ASSOCIATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1289
                self.match(PlSqlParser.ASSOCIATE)
                self.state = 1290
                self.match(PlSqlParser.STATISTICS)
                pass
            elif token in [PlSqlParser.AUDIT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1291
                self.match(PlSqlParser.AUDIT)
                pass
            elif token in [PlSqlParser.COMMENT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1292
                self.match(PlSqlParser.COMMENT)
                pass
            elif token in [PlSqlParser.CREATE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1293
                self.match(PlSqlParser.CREATE)
                pass
            elif token in [PlSqlParser.DISASSOCIATE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1294
                self.match(PlSqlParser.DISASSOCIATE)
                self.state = 1295
                self.match(PlSqlParser.STATISTICS)
                pass
            elif token in [PlSqlParser.DROP]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1296
                self.match(PlSqlParser.DROP)
                pass
            elif token in [PlSqlParser.GRANT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1297
                self.match(PlSqlParser.GRANT)
                pass
            elif token in [PlSqlParser.NOAUDIT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1298
                self.match(PlSqlParser.NOAUDIT)
                pass
            elif token in [PlSqlParser.RENAME]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1299
                self.match(PlSqlParser.RENAME)
                pass
            elif token in [PlSqlParser.REVOKE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1300
                self.match(PlSqlParser.REVOKE)
                pass
            elif token in [PlSqlParser.TRUNCATE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1301
                self.match(PlSqlParser.TRUNCATE)
                pass
            elif token in [PlSqlParser.DDL]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1302
                self.match(PlSqlParser.DDL)
                pass
            elif token in [PlSqlParser.STARTUP]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1303
                self.match(PlSqlParser.STARTUP)
                pass
            elif token in [PlSqlParser.SHUTDOWN]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1304
                self.match(PlSqlParser.SHUTDOWN)
                pass
            elif token in [PlSqlParser.DB_ROLE_CHANGE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1305
                self.match(PlSqlParser.DB_ROLE_CHANGE)
                pass
            elif token in [PlSqlParser.LOGON]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1306
                self.match(PlSqlParser.LOGON)
                pass
            elif token in [PlSqlParser.LOGOFF]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1307
                self.match(PlSqlParser.LOGOFF)
                pass
            elif token in [PlSqlParser.SERVERERROR]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1308
                self.match(PlSqlParser.SERVERERROR)
                pass
            elif token in [PlSqlParser.SUSPEND]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1309
                self.match(PlSqlParser.SUSPEND)
                pass
            elif token in [PlSqlParser.DATABASE]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1310
                self.match(PlSqlParser.DATABASE)
                pass
            elif token in [PlSqlParser.SCHEMA]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1311
                self.match(PlSqlParser.SCHEMA)
                pass
            elif token in [PlSqlParser.FOLLOWS]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1312
                self.match(PlSqlParser.FOLLOWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_event_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_event_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Dml_event_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Dml_event_elementContext,i)


        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.OR)
            else:
                return self.getToken(PlSqlParser.OR, i)

        def dml_event_nested_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Dml_event_nested_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_dml_event_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_event_clause" ):
                listener.enterDml_event_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_event_clause" ):
                listener.exitDml_event_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_event_clause" ):
                return visitor.visitDml_event_clause(self)
            else:
                return visitor.visitChildren(self)




    def dml_event_clause(self):

        localctx = PlSqlParser.Dml_event_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_dml_event_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1315
            self.dml_event_element()
            self.state = 1320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.OR:
                self.state = 1316
                self.match(PlSqlParser.OR)
                self.state = 1317
                self.dml_event_element()
                self.state = 1322
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1323
            self.match(PlSqlParser.ON)
            self.state = 1325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 1324
                self.dml_event_nested_clause()


            self.state = 1327
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_event_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(PlSqlParser.DELETE, 0)

        def INSERT(self):
            return self.getToken(PlSqlParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(PlSqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_dml_event_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_event_element" ):
                listener.enterDml_event_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_event_element" ):
                listener.exitDml_event_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_event_element" ):
                return visitor.visitDml_event_element(self)
            else:
                return visitor.visitChildren(self)




    def dml_event_element(self):

        localctx = PlSqlParser.Dml_event_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_dml_event_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.DELETE or _la==PlSqlParser.INSERT or _la==PlSqlParser.UPDATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.OF:
                self.state = 1330
                self.match(PlSqlParser.OF)
                self.state = 1331
                self.column_name()
                self.state = 1336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 1332
                    self.match(PlSqlParser.COMMA)
                    self.state = 1333
                    self.column_name()
                    self.state = 1338
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_event_nested_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NESTED(self):
            return self.getToken(PlSqlParser.NESTED, 0)

        def TABLE(self):
            return self.getToken(PlSqlParser.TABLE, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_dml_event_nested_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_event_nested_clause" ):
                listener.enterDml_event_nested_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_event_nested_clause" ):
                listener.exitDml_event_nested_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_event_nested_clause" ):
                return visitor.visitDml_event_nested_clause(self)
            else:
                return visitor.visitChildren(self)




    def dml_event_nested_clause(self):

        localctx = PlSqlParser.Dml_event_nested_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_dml_event_nested_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self.match(PlSqlParser.NESTED)
            self.state = 1342
            self.match(PlSqlParser.TABLE)
            self.state = 1343
            self.tableview_name()
            self.state = 1344
            self.match(PlSqlParser.OF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Referencing_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCING(self):
            return self.getToken(PlSqlParser.REFERENCING, 0)

        def referencing_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Referencing_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Referencing_elementContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_referencing_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferencing_clause" ):
                listener.enterReferencing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferencing_clause" ):
                listener.exitReferencing_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferencing_clause" ):
                return visitor.visitReferencing_clause(self)
            else:
                return visitor.visitChildren(self)




    def referencing_clause(self):

        localctx = PlSqlParser.Referencing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_referencing_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1346
            self.match(PlSqlParser.REFERENCING)
            self.state = 1348 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1347
                    self.referencing_element()

                else:
                    raise NoViableAltException(self)
                self.state = 1350 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Referencing_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_alias(self):
            return self.getTypedRuleContext(PlSqlParser.Column_aliasContext,0)


        def NEW(self):
            return self.getToken(PlSqlParser.NEW, 0)

        def OLD(self):
            return self.getToken(PlSqlParser.OLD, 0)

        def PARENT(self):
            return self.getToken(PlSqlParser.PARENT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_referencing_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferencing_element" ):
                listener.enterReferencing_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferencing_element" ):
                listener.exitReferencing_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferencing_element" ):
                return visitor.visitReferencing_element(self)
            else:
                return visitor.visitChildren(self)




    def referencing_element(self):

        localctx = PlSqlParser.Referencing_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_referencing_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1352
            _la = self._input.LA(1)
            if not(((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & ((1 << (PlSqlParser.NEW - 240)) | (1 << (PlSqlParser.OLD - 240)) | (1 << (PlSqlParser.PARENT - 240)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1353
            self.column_alias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def TYPE(self):
            return self.getToken(PlSqlParser.TYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Type_nameContext,0)


        def BODY(self):
            return self.getToken(PlSqlParser.BODY, 0)

        def FORCE(self):
            return self.getToken(PlSqlParser.FORCE, 0)

        def VALIDATE(self):
            return self.getToken(PlSqlParser.VALIDATE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_drop_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_type" ):
                listener.enterDrop_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_type" ):
                listener.exitDrop_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_type" ):
                return visitor.visitDrop_type(self)
            else:
                return visitor.visitChildren(self)




    def drop_type(self):

        localctx = PlSqlParser.Drop_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_drop_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1355
            self.match(PlSqlParser.DROP)
            self.state = 1356
            self.match(PlSqlParser.TYPE)
            self.state = 1358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 1357
                self.match(PlSqlParser.BODY)


            self.state = 1360
            self.type_name()
            self.state = 1362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FORCE or _la==PlSqlParser.VALIDATE:
                self.state = 1361
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.FORCE or _la==PlSqlParser.VALIDATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PlSqlParser.ALTER, 0)

        def TYPE(self):
            return self.getToken(PlSqlParser.TYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Type_nameContext,0)


        def compile_type_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Compile_type_clauseContext,0)


        def replace_type_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Replace_type_clauseContext,0)


        def alter_method_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_method_specContext,0)


        def alter_collection_clauses(self):
            return self.getTypedRuleContext(PlSqlParser.Alter_collection_clausesContext,0)


        def modifier_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Modifier_clauseContext,0)


        def dependent_handling_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Dependent_handling_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_type" ):
                listener.enterAlter_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_type" ):
                listener.exitAlter_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_type" ):
                return visitor.visitAlter_type(self)
            else:
                return visitor.visitChildren(self)




    def alter_type(self):

        localctx = PlSqlParser.Alter_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_alter_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self.match(PlSqlParser.ALTER)
            self.state = 1365
            self.match(PlSqlParser.TYPE)
            self.state = 1366
            self.type_name()
            self.state = 1372
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.COMPILE]:
                self.state = 1367
                self.compile_type_clause()
                pass
            elif token in [PlSqlParser.REPLACE]:
                self.state = 1368
                self.replace_type_clause()
                pass
            elif token in [PlSqlParser.ADD, PlSqlParser.DROP]:
                self.state = 1369
                self.alter_method_spec()
                pass
            elif token in [PlSqlParser.MODIFY]:
                self.state = 1370
                self.alter_collection_clauses()
                pass
            elif token in [PlSqlParser.FINAL, PlSqlParser.INSTANTIABLE, PlSqlParser.NOT, PlSqlParser.OVERRIDING]:
                self.state = 1371
                self.modifier_clause()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.CASCADE or _la==PlSqlParser.INVALIDATE:
                self.state = 1374
                self.dependent_handling_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compile_type_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPILE(self):
            return self.getToken(PlSqlParser.COMPILE, 0)

        def DEBUG(self):
            return self.getToken(PlSqlParser.DEBUG, 0)

        def compiler_parameters_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Compiler_parameters_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Compiler_parameters_clauseContext,i)


        def REUSE(self):
            return self.getToken(PlSqlParser.REUSE, 0)

        def SETTINGS(self):
            return self.getToken(PlSqlParser.SETTINGS, 0)

        def SPECIFICATION(self):
            return self.getToken(PlSqlParser.SPECIFICATION, 0)

        def BODY(self):
            return self.getToken(PlSqlParser.BODY, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_compile_type_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompile_type_clause" ):
                listener.enterCompile_type_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompile_type_clause" ):
                listener.exitCompile_type_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompile_type_clause" ):
                return visitor.visitCompile_type_clause(self)
            else:
                return visitor.visitChildren(self)




    def compile_type_clause(self):

        localctx = PlSqlParser.Compile_type_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_compile_type_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1377
            self.match(PlSqlParser.COMPILE)
            self.state = 1379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 1378
                self.match(PlSqlParser.DEBUG)


            self.state = 1382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 1381
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.BODY or _la==PlSqlParser.SPECIFICATION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1387
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1384
                    self.compiler_parameters_clause() 
                self.state = 1389
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

            self.state = 1392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.REUSE:
                self.state = 1390
                self.match(PlSqlParser.REUSE)
                self.state = 1391
                self.match(PlSqlParser.SETTINGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Replace_type_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(PlSqlParser.REPLACE, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def OBJECT(self):
            return self.getToken(PlSqlParser.OBJECT, 0)

        def object_member_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Object_member_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Object_member_specContext,i)


        def invoker_rights_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Invoker_rights_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_replace_type_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplace_type_clause" ):
                listener.enterReplace_type_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplace_type_clause" ):
                listener.exitReplace_type_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplace_type_clause" ):
                return visitor.visitReplace_type_clause(self)
            else:
                return visitor.visitChildren(self)




    def replace_type_clause(self):

        localctx = PlSqlParser.Replace_type_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_replace_type_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1394
            self.match(PlSqlParser.REPLACE)
            self.state = 1396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AUTHID:
                self.state = 1395
                self.invoker_rights_clause()


            self.state = 1398
            self.match(PlSqlParser.AS)
            self.state = 1399
            self.match(PlSqlParser.OBJECT)
            self.state = 1400
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 1401
            self.object_member_spec()
            self.state = 1406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 1402
                self.match(PlSqlParser.COMMA)
                self.state = 1403
                self.object_member_spec()
                self.state = 1408
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1409
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_method_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_method_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Alter_method_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Alter_method_elementContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_method_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_method_spec" ):
                listener.enterAlter_method_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_method_spec" ):
                listener.exitAlter_method_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_method_spec" ):
                return visitor.visitAlter_method_spec(self)
            else:
                return visitor.visitChildren(self)




    def alter_method_spec(self):

        localctx = PlSqlParser.Alter_method_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_alter_method_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1411
            self.alter_method_element()
            self.state = 1416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 1412
                self.match(PlSqlParser.COMMA)
                self.state = 1413
                self.alter_method_element()
                self.state = 1418
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_method_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(PlSqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def map_order_function_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Map_order_function_specContext,0)


        def subprogram_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Subprogram_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_method_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_method_element" ):
                listener.enterAlter_method_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_method_element" ):
                listener.exitAlter_method_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_method_element" ):
                return visitor.visitAlter_method_element(self)
            else:
                return visitor.visitChildren(self)




    def alter_method_element(self):

        localctx = PlSqlParser.Alter_method_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_alter_method_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1419
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.ADD or _la==PlSqlParser.DROP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1422
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.MAP, PlSqlParser.ORDER]:
                self.state = 1420
                self.map_order_function_spec()
                pass
            elif token in [PlSqlParser.MEMBER, PlSqlParser.STATIC]:
                self.state = 1421
                self.subprogram_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_attribute_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(PlSqlParser.ATTRIBUTE, 0)

        def ADD(self):
            return self.getToken(PlSqlParser.ADD, 0)

        def MODIFY(self):
            return self.getToken(PlSqlParser.MODIFY, 0)

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def attribute_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Attribute_definitionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Attribute_definitionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_attribute_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_attribute_definition" ):
                listener.enterAlter_attribute_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_attribute_definition" ):
                listener.exitAlter_attribute_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_attribute_definition" ):
                return visitor.visitAlter_attribute_definition(self)
            else:
                return visitor.visitChildren(self)




    def alter_attribute_definition(self):

        localctx = PlSqlParser.Alter_attribute_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_alter_attribute_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1424
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.ADD or _la==PlSqlParser.DROP or _la==PlSqlParser.MODIFY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1425
            self.match(PlSqlParser.ATTRIBUTE)
            self.state = 1438
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                self.state = 1426
                self.attribute_definition()
                pass
            elif token in [PlSqlParser.LEFT_PAREN]:
                self.state = 1427
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 1428
                self.attribute_definition()
                self.state = 1433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 1429
                    self.match(PlSqlParser.COMMA)
                    self.state = 1430
                    self.attribute_definition()
                    self.state = 1435
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1436
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_name(self):
            return self.getTypedRuleContext(PlSqlParser.Attribute_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_attribute_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_definition" ):
                listener.enterAttribute_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_definition" ):
                listener.exitAttribute_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute_definition" ):
                return visitor.visitAttribute_definition(self)
            else:
                return visitor.visitChildren(self)




    def attribute_definition(self):

        localctx = PlSqlParser.Attribute_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_attribute_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1440
            self.attribute_name()
            self.state = 1442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 1441
                self.type_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_collection_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(PlSqlParser.MODIFY, 0)

        def LIMIT(self):
            return self.getToken(PlSqlParser.LIMIT, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def ELEMENT(self):
            return self.getToken(PlSqlParser.ELEMENT, 0)

        def TYPE(self):
            return self.getToken(PlSqlParser.TYPE, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_collection_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_collection_clauses" ):
                listener.enterAlter_collection_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_collection_clauses" ):
                listener.exitAlter_collection_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_collection_clauses" ):
                return visitor.visitAlter_collection_clauses(self)
            else:
                return visitor.visitChildren(self)




    def alter_collection_clauses(self):

        localctx = PlSqlParser.Alter_collection_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_alter_collection_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1444
            self.match(PlSqlParser.MODIFY)
            self.state = 1450
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.LIMIT]:
                self.state = 1445
                self.match(PlSqlParser.LIMIT)
                self.state = 1446
                self.expression(0)
                pass
            elif token in [PlSqlParser.ELEMENT]:
                self.state = 1447
                self.match(PlSqlParser.ELEMENT)
                self.state = 1448
                self.match(PlSqlParser.TYPE)
                self.state = 1449
                self.type_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dependent_handling_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INVALIDATE(self):
            return self.getToken(PlSqlParser.INVALIDATE, 0)

        def CASCADE(self):
            return self.getToken(PlSqlParser.CASCADE, 0)

        def CONVERT(self):
            return self.getToken(PlSqlParser.CONVERT, 0)

        def TO(self):
            return self.getToken(PlSqlParser.TO, 0)

        def SUBSTITUTABLE(self):
            return self.getToken(PlSqlParser.SUBSTITUTABLE, 0)

        def INCLUDING(self):
            return self.getToken(PlSqlParser.INCLUDING, 0)

        def TABLE(self):
            return self.getToken(PlSqlParser.TABLE, 0)

        def DATA(self):
            return self.getToken(PlSqlParser.DATA, 0)

        def dependent_exceptions_part(self):
            return self.getTypedRuleContext(PlSqlParser.Dependent_exceptions_partContext,0)


        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_dependent_handling_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDependent_handling_clause" ):
                listener.enterDependent_handling_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDependent_handling_clause" ):
                listener.exitDependent_handling_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDependent_handling_clause" ):
                return visitor.visitDependent_handling_clause(self)
            else:
                return visitor.visitChildren(self)




    def dependent_handling_clause(self):

        localctx = PlSqlParser.Dependent_handling_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_dependent_handling_clause)
        self._la = 0 # Token type
        try:
            self.state = 1468
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.INVALIDATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1452
                self.match(PlSqlParser.INVALIDATE)
                pass
            elif token in [PlSqlParser.CASCADE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1453
                self.match(PlSqlParser.CASCADE)
                self.state = 1463
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.CONVERT]:
                    self.state = 1454
                    self.match(PlSqlParser.CONVERT)
                    self.state = 1455
                    self.match(PlSqlParser.TO)
                    self.state = 1456
                    self.match(PlSqlParser.SUBSTITUTABLE)
                    pass
                elif token in [PlSqlParser.INCLUDING, PlSqlParser.NOT]:
                    self.state = 1458
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.NOT:
                        self.state = 1457
                        self.match(PlSqlParser.NOT)


                    self.state = 1460
                    self.match(PlSqlParser.INCLUDING)
                    self.state = 1461
                    self.match(PlSqlParser.TABLE)
                    self.state = 1462
                    self.match(PlSqlParser.DATA)
                    pass
                elif token in [PlSqlParser.EOF, PlSqlParser.EXCEPTIONS, PlSqlParser.FORCE, PlSqlParser.SEMICOLON]:
                    pass
                else:
                    pass
                self.state = 1466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.EXCEPTIONS or _la==PlSqlParser.FORCE:
                    self.state = 1465
                    self.dependent_exceptions_part()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dependent_exceptions_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPTIONS(self):
            return self.getToken(PlSqlParser.EXCEPTIONS, 0)

        def INTO(self):
            return self.getToken(PlSqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def FORCE(self):
            return self.getToken(PlSqlParser.FORCE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_dependent_exceptions_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDependent_exceptions_part" ):
                listener.enterDependent_exceptions_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDependent_exceptions_part" ):
                listener.exitDependent_exceptions_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDependent_exceptions_part" ):
                return visitor.visitDependent_exceptions_part(self)
            else:
                return visitor.visitChildren(self)




    def dependent_exceptions_part(self):

        localctx = PlSqlParser.Dependent_exceptions_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_dependent_exceptions_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FORCE:
                self.state = 1470
                self.match(PlSqlParser.FORCE)


            self.state = 1473
            self.match(PlSqlParser.EXCEPTIONS)
            self.state = 1474
            self.match(PlSqlParser.INTO)
            self.state = 1475
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(PlSqlParser.TYPE, 0)

        def type_definition(self):
            return self.getTypedRuleContext(PlSqlParser.Type_definitionContext,0)


        def type_body(self):
            return self.getTypedRuleContext(PlSqlParser.Type_bodyContext,0)


        def OR(self):
            return self.getToken(PlSqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(PlSqlParser.REPLACE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_create_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type" ):
                listener.enterCreate_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type" ):
                listener.exitCreate_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_type" ):
                return visitor.visitCreate_type(self)
            else:
                return visitor.visitChildren(self)




    def create_type(self):

        localctx = PlSqlParser.Create_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_create_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1477
            self.match(PlSqlParser.CREATE)
            self.state = 1480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.OR:
                self.state = 1478
                self.match(PlSqlParser.OR)
                self.state = 1479
                self.match(PlSqlParser.REPLACE)


            self.state = 1482
            self.match(PlSqlParser.TYPE)
            self.state = 1485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 1483
                self.type_definition()
                pass

            elif la_ == 2:
                self.state = 1484
                self.type_body()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Type_nameContext,0)


        def OID(self):
            return self.getToken(PlSqlParser.OID, 0)

        def CHAR_STRING(self):
            return self.getToken(PlSqlParser.CHAR_STRING, 0)

        def object_type_def(self):
            return self.getTypedRuleContext(PlSqlParser.Object_type_defContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_definition" ):
                listener.enterType_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_definition" ):
                listener.exitType_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_definition" ):
                return visitor.visitType_definition(self)
            else:
                return visitor.visitChildren(self)




    def type_definition(self):

        localctx = PlSqlParser.Type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_type_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1487
            self.type_name()
            self.state = 1490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.OID:
                self.state = 1488
                self.match(PlSqlParser.OID)
                self.state = 1489
                self.match(PlSqlParser.CHAR_STRING)


            self.state = 1493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AS or _la==PlSqlParser.AUTHID or _la==PlSqlParser.IS or _la==PlSqlParser.UNDER:
                self.state = 1492
                self.object_type_def()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_as_part(self):
            return self.getTypedRuleContext(PlSqlParser.Object_as_partContext,0)


        def object_under_part(self):
            return self.getTypedRuleContext(PlSqlParser.Object_under_partContext,0)


        def invoker_rights_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Invoker_rights_clauseContext,0)


        def sqlj_object_type(self):
            return self.getTypedRuleContext(PlSqlParser.Sqlj_object_typeContext,0)


        def object_member_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Object_member_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Object_member_specContext,i)


        def modifier_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Modifier_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Modifier_clauseContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_object_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_type_def" ):
                listener.enterObject_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_type_def" ):
                listener.exitObject_type_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_type_def" ):
                return visitor.visitObject_type_def(self)
            else:
                return visitor.visitChildren(self)




    def object_type_def(self):

        localctx = PlSqlParser.Object_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_object_type_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AUTHID:
                self.state = 1495
                self.invoker_rights_clause()


            self.state = 1500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.AS, PlSqlParser.IS]:
                self.state = 1498
                self.object_as_part()
                pass
            elif token in [PlSqlParser.UNDER]:
                self.state = 1499
                self.object_under_part()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.EXTERNAL:
                self.state = 1502
                self.sqlj_object_type()


            self.state = 1516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 1505
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 1506
                self.object_member_spec()
                self.state = 1511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 1507
                    self.match(PlSqlParser.COMMA)
                    self.state = 1508
                    self.object_member_spec()
                    self.state = 1513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1514
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 1521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.FINAL or _la==PlSqlParser.INSTANTIABLE or _la==PlSqlParser.NOT or _la==PlSqlParser.OVERRIDING:
                self.state = 1518
                self.modifier_clause()
                self.state = 1523
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_as_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def OBJECT(self):
            return self.getToken(PlSqlParser.OBJECT, 0)

        def varray_type_def(self):
            return self.getTypedRuleContext(PlSqlParser.Varray_type_defContext,0)


        def nested_table_type_def(self):
            return self.getTypedRuleContext(PlSqlParser.Nested_table_type_defContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_object_as_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_as_part" ):
                listener.enterObject_as_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_as_part" ):
                listener.exitObject_as_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_as_part" ):
                return visitor.visitObject_as_part(self)
            else:
                return visitor.visitChildren(self)




    def object_as_part(self):

        localctx = PlSqlParser.Object_as_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_object_as_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1528
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.OBJECT]:
                self.state = 1525
                self.match(PlSqlParser.OBJECT)
                pass
            elif token in [PlSqlParser.VARRAY, PlSqlParser.VARYING]:
                self.state = 1526
                self.varray_type_def()
                pass
            elif token in [PlSqlParser.TABLE]:
                self.state = 1527
                self.nested_table_type_def()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_under_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDER(self):
            return self.getToken(PlSqlParser.UNDER, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_object_under_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_under_part" ):
                listener.enterObject_under_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_under_part" ):
                listener.exitObject_under_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_under_part" ):
                return visitor.visitObject_under_part(self)
            else:
                return visitor.visitChildren(self)




    def object_under_part(self):

        localctx = PlSqlParser.Object_under_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_object_under_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1530
            self.match(PlSqlParser.UNDER)
            self.state = 1531
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nested_table_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(PlSqlParser.TABLE, 0)

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_nested_table_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNested_table_type_def" ):
                listener.enterNested_table_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNested_table_type_def" ):
                listener.exitNested_table_type_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNested_table_type_def" ):
                return visitor.visitNested_table_type_def(self)
            else:
                return visitor.visitChildren(self)




    def nested_table_type_def(self):

        localctx = PlSqlParser.Nested_table_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_nested_table_type_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1533
            self.match(PlSqlParser.TABLE)
            self.state = 1534
            self.match(PlSqlParser.OF)
            self.state = 1535
            self.type_spec()
            self.state = 1538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1536
                self.match(PlSqlParser.NOT)
                self.state = 1537
                self.match(PlSqlParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sqlj_object_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL(self):
            return self.getToken(PlSqlParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(PlSqlParser.NAME, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def LANGUAGE(self):
            return self.getToken(PlSqlParser.LANGUAGE, 0)

        def JAVA(self):
            return self.getToken(PlSqlParser.JAVA, 0)

        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def SQLDATA(self):
            return self.getToken(PlSqlParser.SQLDATA, 0)

        def CUSTOMDATUM(self):
            return self.getToken(PlSqlParser.CUSTOMDATUM, 0)

        def ORADATA(self):
            return self.getToken(PlSqlParser.ORADATA, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_sqlj_object_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlj_object_type" ):
                listener.enterSqlj_object_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlj_object_type" ):
                listener.exitSqlj_object_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlj_object_type" ):
                return visitor.visitSqlj_object_type(self)
            else:
                return visitor.visitChildren(self)




    def sqlj_object_type(self):

        localctx = PlSqlParser.Sqlj_object_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_sqlj_object_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1540
            self.match(PlSqlParser.EXTERNAL)
            self.state = 1541
            self.match(PlSqlParser.NAME)
            self.state = 1542
            self.expression(0)
            self.state = 1543
            self.match(PlSqlParser.LANGUAGE)
            self.state = 1544
            self.match(PlSqlParser.JAVA)
            self.state = 1545
            self.match(PlSqlParser.USING)
            self.state = 1546
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.CUSTOMDATUM or _la==PlSqlParser.ORADATA or _la==PlSqlParser.SQLDATA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BODY(self):
            return self.getToken(PlSqlParser.BODY, 0)

        def type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Type_nameContext,0)


        def END(self):
            return self.getToken(PlSqlParser.END, 0)

        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def type_body_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Type_body_elementsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Type_body_elementsContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_type_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_body" ):
                listener.enterType_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_body" ):
                listener.exitType_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_body" ):
                return visitor.visitType_body(self)
            else:
                return visitor.visitChildren(self)




    def type_body(self):

        localctx = PlSqlParser.Type_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_type_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1548
            self.match(PlSqlParser.BODY)
            self.state = 1549
            self.type_name()
            self.state = 1550
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1552 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1551
                self.type_body_elements()
                self.state = 1554 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 216)) & ~0x3f) == 0 and ((1 << (_la - 216)) & ((1 << (PlSqlParser.MAP - 216)) | (1 << (PlSqlParser.MEMBER - 216)) | (1 << (PlSqlParser.ORDER - 216)))) != 0) or _la==PlSqlParser.STATIC):
                    break

            self.state = 1556
            self.match(PlSqlParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_body_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def map_order_func_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Map_order_func_declarationContext,0)


        def subprog_decl_in_type(self):
            return self.getTypedRuleContext(PlSqlParser.Subprog_decl_in_typeContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_type_body_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_body_elements" ):
                listener.enterType_body_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_body_elements" ):
                listener.exitType_body_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_body_elements" ):
                return visitor.visitType_body_elements(self)
            else:
                return visitor.visitChildren(self)




    def type_body_elements(self):

        localctx = PlSqlParser.Type_body_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_type_body_elements)
        try:
            self.state = 1560
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.MAP, PlSqlParser.ORDER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1558
                self.map_order_func_declaration()
                pass
            elif token in [PlSqlParser.MEMBER, PlSqlParser.STATIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1559
                self.subprog_decl_in_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Map_order_func_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(PlSqlParser.MEMBER, 0)

        def func_decl_in_type(self):
            return self.getTypedRuleContext(PlSqlParser.Func_decl_in_typeContext,0)


        def MAP(self):
            return self.getToken(PlSqlParser.MAP, 0)

        def ORDER(self):
            return self.getToken(PlSqlParser.ORDER, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_map_order_func_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_order_func_declaration" ):
                listener.enterMap_order_func_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_order_func_declaration" ):
                listener.exitMap_order_func_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMap_order_func_declaration" ):
                return visitor.visitMap_order_func_declaration(self)
            else:
                return visitor.visitChildren(self)




    def map_order_func_declaration(self):

        localctx = PlSqlParser.Map_order_func_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_map_order_func_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1562
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.MAP or _la==PlSqlParser.ORDER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1563
            self.match(PlSqlParser.MEMBER)
            self.state = 1564
            self.func_decl_in_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subprog_decl_in_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(PlSqlParser.MEMBER, 0)

        def STATIC(self):
            return self.getToken(PlSqlParser.STATIC, 0)

        def proc_decl_in_type(self):
            return self.getTypedRuleContext(PlSqlParser.Proc_decl_in_typeContext,0)


        def func_decl_in_type(self):
            return self.getTypedRuleContext(PlSqlParser.Func_decl_in_typeContext,0)


        def constructor_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Constructor_declarationContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_subprog_decl_in_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubprog_decl_in_type" ):
                listener.enterSubprog_decl_in_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubprog_decl_in_type" ):
                listener.exitSubprog_decl_in_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubprog_decl_in_type" ):
                return visitor.visitSubprog_decl_in_type(self)
            else:
                return visitor.visitChildren(self)




    def subprog_decl_in_type(self):

        localctx = PlSqlParser.Subprog_decl_in_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_subprog_decl_in_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.MEMBER or _la==PlSqlParser.STATIC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1570
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.PROCEDURE]:
                self.state = 1567
                self.proc_decl_in_type()
                pass
            elif token in [PlSqlParser.FUNCTION]:
                self.state = 1568
                self.func_decl_in_type()
                pass
            elif token in [PlSqlParser.CONSTRUCTOR, PlSqlParser.FINAL, PlSqlParser.INSTANTIABLE]:
                self.state = 1569
                self.constructor_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Proc_decl_in_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(PlSqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(PlSqlParser.Procedure_nameContext,0)


        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Type_elements_parameterContext,i)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def call_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Call_specContext,0)


        def body(self):
            return self.getTypedRuleContext(PlSqlParser.BodyContext,0)


        def DECLARE(self):
            return self.getToken(PlSqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_proc_decl_in_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_decl_in_type" ):
                listener.enterProc_decl_in_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_decl_in_type" ):
                listener.exitProc_decl_in_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_decl_in_type" ):
                return visitor.visitProc_decl_in_type(self)
            else:
                return visitor.visitChildren(self)




    def proc_decl_in_type(self):

        localctx = PlSqlParser.Proc_decl_in_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_proc_decl_in_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1572
            self.match(PlSqlParser.PROCEDURE)
            self.state = 1573
            self.procedure_name()
            self.state = 1574
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 1575
            self.type_elements_parameter()
            self.state = 1580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 1576
                self.match(PlSqlParser.COMMA)
                self.state = 1577
                self.type_elements_parameter()
                self.state = 1582
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1583
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 1584
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1585
                self.call_spec()
                pass

            elif la_ == 2:
                self.state = 1587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.DECLARE:
                    self.state = 1586
                    self.match(PlSqlParser.DECLARE)


                self.state = 1592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CREATE - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.PROCEDURE - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)) | (1 << (PlSqlParser.BINDVAR - 448)) | (1 << (PlSqlParser.COLON - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                    self.state = 1589
                    self.declare_spec()
                    self.state = 1594
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1595
                self.body()
                self.state = 1596
                self.match(PlSqlParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_decl_in_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(PlSqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(PlSqlParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def call_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Call_specContext,0)


        def body(self):
            return self.getTypedRuleContext(PlSqlParser.BodyContext,0)


        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Type_elements_parameterContext,i)


        def DECLARE(self):
            return self.getToken(PlSqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_func_decl_in_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_decl_in_type" ):
                listener.enterFunc_decl_in_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_decl_in_type" ):
                listener.exitFunc_decl_in_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_decl_in_type" ):
                return visitor.visitFunc_decl_in_type(self)
            else:
                return visitor.visitChildren(self)




    def func_decl_in_type(self):

        localctx = PlSqlParser.Func_decl_in_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_func_decl_in_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1600
            self.match(PlSqlParser.FUNCTION)
            self.state = 1601
            self.function_name()
            self.state = 1613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 1602
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 1603
                self.type_elements_parameter()
                self.state = 1608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 1604
                    self.match(PlSqlParser.COMMA)
                    self.state = 1605
                    self.type_elements_parameter()
                    self.state = 1610
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1611
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 1615
            self.match(PlSqlParser.RETURN)
            self.state = 1616
            self.type_spec()
            self.state = 1617
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 1618
                self.call_spec()
                pass

            elif la_ == 2:
                self.state = 1620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.DECLARE:
                    self.state = 1619
                    self.match(PlSqlParser.DECLARE)


                self.state = 1625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CREATE - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.PROCEDURE - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)) | (1 << (PlSqlParser.BINDVAR - 448)) | (1 << (PlSqlParser.COLON - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                    self.state = 1622
                    self.declare_spec()
                    self.state = 1627
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1628
                self.body()
                self.state = 1629
                self.match(PlSqlParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(PlSqlParser.CONSTRUCTOR, 0)

        def FUNCTION(self):
            return self.getToken(PlSqlParser.FUNCTION, 0)

        def type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Type_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Type_specContext,i)


        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def SELF(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.SELF)
            else:
                return self.getToken(PlSqlParser.SELF, i)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.AS)
            else:
                return self.getToken(PlSqlParser.AS, i)

        def RESULT(self):
            return self.getToken(PlSqlParser.RESULT, 0)

        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def call_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Call_specContext,0)


        def body(self):
            return self.getTypedRuleContext(PlSqlParser.BodyContext,0)


        def FINAL(self):
            return self.getToken(PlSqlParser.FINAL, 0)

        def INSTANTIABLE(self):
            return self.getToken(PlSqlParser.INSTANTIABLE, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Type_elements_parameterContext,i)


        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def OUT(self):
            return self.getToken(PlSqlParser.OUT, 0)

        def DECLARE(self):
            return self.getToken(PlSqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_constructor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_declaration" ):
                listener.enterConstructor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_declaration" ):
                listener.exitConstructor_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructor_declaration" ):
                return visitor.visitConstructor_declaration(self)
            else:
                return visitor.visitChildren(self)




    def constructor_declaration(self):

        localctx = PlSqlParser.Constructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_constructor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FINAL:
                self.state = 1633
                self.match(PlSqlParser.FINAL)


            self.state = 1637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.INSTANTIABLE:
                self.state = 1636
                self.match(PlSqlParser.INSTANTIABLE)


            self.state = 1639
            self.match(PlSqlParser.CONSTRUCTOR)
            self.state = 1640
            self.match(PlSqlParser.FUNCTION)
            self.state = 1641
            self.type_spec()
            self.state = 1659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 1642
                self.match(PlSqlParser.LEFT_PAREN)

                self.state = 1643
                self.match(PlSqlParser.SELF)
                self.state = 1644
                self.match(PlSqlParser.IN)
                self.state = 1645
                self.match(PlSqlParser.OUT)
                self.state = 1646
                self.type_spec()
                self.state = 1647
                self.match(PlSqlParser.COMMA)
                self.state = 1649
                self.type_elements_parameter()
                self.state = 1654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 1650
                    self.match(PlSqlParser.COMMA)
                    self.state = 1651
                    self.type_elements_parameter()
                    self.state = 1656
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1657
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 1661
            self.match(PlSqlParser.RETURN)
            self.state = 1662
            self.match(PlSqlParser.SELF)
            self.state = 1663
            self.match(PlSqlParser.AS)
            self.state = 1664
            self.match(PlSqlParser.RESULT)
            self.state = 1665
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1679
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1666
                self.call_spec()
                pass

            elif la_ == 2:
                self.state = 1668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.DECLARE:
                    self.state = 1667
                    self.match(PlSqlParser.DECLARE)


                self.state = 1673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CREATE - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.PROCEDURE - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)) | (1 << (PlSqlParser.BINDVAR - 448)) | (1 << (PlSqlParser.COLON - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                    self.state = 1670
                    self.declare_spec()
                    self.state = 1675
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1676
                self.body()
                self.state = 1677
                self.match(PlSqlParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Modifier_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTANTIABLE(self):
            return self.getToken(PlSqlParser.INSTANTIABLE, 0)

        def FINAL(self):
            return self.getToken(PlSqlParser.FINAL, 0)

        def OVERRIDING(self):
            return self.getToken(PlSqlParser.OVERRIDING, 0)

        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_modifier_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier_clause" ):
                listener.enterModifier_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier_clause" ):
                listener.exitModifier_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier_clause" ):
                return visitor.visitModifier_clause(self)
            else:
                return visitor.visitChildren(self)




    def modifier_clause(self):

        localctx = PlSqlParser.Modifier_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_modifier_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOT:
                self.state = 1681
                self.match(PlSqlParser.NOT)


            self.state = 1684
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.FINAL or _la==PlSqlParser.INSTANTIABLE or _la==PlSqlParser.OVERRIDING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_member_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def sqlj_object_type_attr(self):
            return self.getTypedRuleContext(PlSqlParser.Sqlj_object_type_attrContext,0)


        def element_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Element_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_object_member_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_member_spec" ):
                listener.enterObject_member_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_member_spec" ):
                listener.exitObject_member_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_member_spec" ):
                return visitor.visitObject_member_spec(self)
            else:
                return visitor.visitChildren(self)




    def object_member_spec(self):

        localctx = PlSqlParser.Object_member_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_object_member_spec)
        self._la = 0 # Token type
        try:
            self.state = 1692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1686
                self.r_id()
                self.state = 1687
                self.type_spec()
                self.state = 1689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.EXTERNAL:
                    self.state = 1688
                    self.sqlj_object_type_attr()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1691
                self.element_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sqlj_object_type_attrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL(self):
            return self.getToken(PlSqlParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(PlSqlParser.NAME, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_sqlj_object_type_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlj_object_type_attr" ):
                listener.enterSqlj_object_type_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlj_object_type_attr" ):
                listener.exitSqlj_object_type_attr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlj_object_type_attr" ):
                return visitor.visitSqlj_object_type_attr(self)
            else:
                return visitor.visitChildren(self)




    def sqlj_object_type_attr(self):

        localctx = PlSqlParser.Sqlj_object_type_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_sqlj_object_type_attr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1694
            self.match(PlSqlParser.EXTERNAL)
            self.state = 1695
            self.match(PlSqlParser.NAME)
            self.state = 1696
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifier_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Modifier_clauseContext,0)


        def element_spec_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Element_spec_optionsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Element_spec_optionsContext,i)


        def pragma_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Pragma_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_element_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_spec" ):
                listener.enterElement_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_spec" ):
                listener.exitElement_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement_spec" ):
                return visitor.visitElement_spec(self)
            else:
                return visitor.visitChildren(self)




    def element_spec(self):

        localctx = PlSqlParser.Element_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_element_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1699
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1698
                self.modifier_clause()


            self.state = 1702 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1701
                self.element_spec_options()
                self.state = 1704 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.CONSTRUCTOR or _la==PlSqlParser.FINAL or _la==PlSqlParser.INSTANTIABLE or ((((_la - 216)) & ~0x3f) == 0 and ((1 << (_la - 216)) & ((1 << (PlSqlParser.MAP - 216)) | (1 << (PlSqlParser.MEMBER - 216)) | (1 << (PlSqlParser.ORDER - 216)))) != 0) or _la==PlSqlParser.STATIC):
                    break

            self.state = 1708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1706
                self.match(PlSqlParser.COMMA)
                self.state = 1707
                self.pragma_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_spec_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subprogram_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Subprogram_specContext,0)


        def constructor_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Constructor_specContext,0)


        def map_order_function_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Map_order_function_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_element_spec_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_spec_options" ):
                listener.enterElement_spec_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_spec_options" ):
                listener.exitElement_spec_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement_spec_options" ):
                return visitor.visitElement_spec_options(self)
            else:
                return visitor.visitChildren(self)




    def element_spec_options(self):

        localctx = PlSqlParser.Element_spec_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_element_spec_options)
        try:
            self.state = 1713
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.MEMBER, PlSqlParser.STATIC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1710
                self.subprogram_spec()
                pass
            elif token in [PlSqlParser.CONSTRUCTOR, PlSqlParser.FINAL, PlSqlParser.INSTANTIABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1711
                self.constructor_spec()
                pass
            elif token in [PlSqlParser.MAP, PlSqlParser.ORDER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1712
                self.map_order_function_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subprogram_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(PlSqlParser.MEMBER, 0)

        def STATIC(self):
            return self.getToken(PlSqlParser.STATIC, 0)

        def type_procedure_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_procedure_specContext,0)


        def type_function_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_function_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_subprogram_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubprogram_spec" ):
                listener.enterSubprogram_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubprogram_spec" ):
                listener.exitSubprogram_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubprogram_spec" ):
                return visitor.visitSubprogram_spec(self)
            else:
                return visitor.visitChildren(self)




    def subprogram_spec(self):

        localctx = PlSqlParser.Subprogram_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_subprogram_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1715
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.MEMBER or _la==PlSqlParser.STATIC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1718
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.PROCEDURE]:
                self.state = 1716
                self.type_procedure_spec()
                pass
            elif token in [PlSqlParser.FUNCTION]:
                self.state = 1717
                self.type_function_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_procedure_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(PlSqlParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(PlSqlParser.Procedure_nameContext,0)


        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Type_elements_parameterContext,i)


        def call_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Call_specContext,0)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_type_procedure_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_procedure_spec" ):
                listener.enterType_procedure_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_procedure_spec" ):
                listener.exitType_procedure_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_procedure_spec" ):
                return visitor.visitType_procedure_spec(self)
            else:
                return visitor.visitChildren(self)




    def type_procedure_spec(self):

        localctx = PlSqlParser.Type_procedure_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_type_procedure_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1720
            self.match(PlSqlParser.PROCEDURE)
            self.state = 1721
            self.procedure_name()
            self.state = 1722
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 1723
            self.type_elements_parameter()
            self.state = 1728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 1724
                self.match(PlSqlParser.COMMA)
                self.state = 1725
                self.type_elements_parameter()
                self.state = 1730
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1731
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 1734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AS or _la==PlSqlParser.IS:
                self.state = 1732
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1733
                self.call_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_function_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(PlSqlParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(PlSqlParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def SELF(self):
            return self.getToken(PlSqlParser.SELF, 0)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.AS)
            else:
                return self.getToken(PlSqlParser.AS, i)

        def RESULT(self):
            return self.getToken(PlSqlParser.RESULT, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Type_elements_parameterContext,i)


        def call_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Call_specContext,0)


        def EXTERNAL(self):
            return self.getToken(PlSqlParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(PlSqlParser.NAME, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def VARIABLE(self):
            return self.getToken(PlSqlParser.VARIABLE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_type_function_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_function_spec" ):
                listener.enterType_function_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_function_spec" ):
                listener.exitType_function_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_function_spec" ):
                return visitor.visitType_function_spec(self)
            else:
                return visitor.visitChildren(self)




    def type_function_spec(self):

        localctx = PlSqlParser.Type_function_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_type_function_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1736
            self.match(PlSqlParser.FUNCTION)
            self.state = 1737
            self.function_name()
            self.state = 1749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 1738
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 1739
                self.type_elements_parameter()
                self.state = 1744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 1740
                    self.match(PlSqlParser.COMMA)
                    self.state = 1741
                    self.type_elements_parameter()
                    self.state = 1746
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1747
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 1751
            self.match(PlSqlParser.RETURN)
            self.state = 1756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.state = 1752
                self.type_spec()
                pass

            elif la_ == 2:
                self.state = 1753
                self.match(PlSqlParser.SELF)
                self.state = 1754
                self.match(PlSqlParser.AS)
                self.state = 1755
                self.match(PlSqlParser.RESULT)
                pass


            self.state = 1766
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.AS, PlSqlParser.IS]:
                self.state = 1758
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1759
                self.call_spec()
                pass
            elif token in [PlSqlParser.EXTERNAL]:
                self.state = 1760
                self.match(PlSqlParser.EXTERNAL)
                self.state = 1762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.VARIABLE:
                    self.state = 1761
                    self.match(PlSqlParser.VARIABLE)


                self.state = 1764
                self.match(PlSqlParser.NAME)
                self.state = 1765
                self.expression(0)
                pass
            elif token in [PlSqlParser.EOF, PlSqlParser.CASCADE, PlSqlParser.CONSTRUCTOR, PlSqlParser.FINAL, PlSqlParser.INSTANTIABLE, PlSqlParser.INVALIDATE, PlSqlParser.MAP, PlSqlParser.MEMBER, PlSqlParser.ORDER, PlSqlParser.STATIC, PlSqlParser.RIGHT_PAREN, PlSqlParser.COMMA, PlSqlParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(PlSqlParser.CONSTRUCTOR, 0)

        def FUNCTION(self):
            return self.getToken(PlSqlParser.FUNCTION, 0)

        def type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Type_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Type_specContext,i)


        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def SELF(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.SELF)
            else:
                return self.getToken(PlSqlParser.SELF, i)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.AS)
            else:
                return self.getToken(PlSqlParser.AS, i)

        def RESULT(self):
            return self.getToken(PlSqlParser.RESULT, 0)

        def FINAL(self):
            return self.getToken(PlSqlParser.FINAL, 0)

        def INSTANTIABLE(self):
            return self.getToken(PlSqlParser.INSTANTIABLE, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Type_elements_parameterContext,i)


        def call_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Call_specContext,0)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def OUT(self):
            return self.getToken(PlSqlParser.OUT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_constructor_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_spec" ):
                listener.enterConstructor_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_spec" ):
                listener.exitConstructor_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructor_spec" ):
                return visitor.visitConstructor_spec(self)
            else:
                return visitor.visitChildren(self)




    def constructor_spec(self):

        localctx = PlSqlParser.Constructor_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_constructor_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FINAL:
                self.state = 1768
                self.match(PlSqlParser.FINAL)


            self.state = 1772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.INSTANTIABLE:
                self.state = 1771
                self.match(PlSqlParser.INSTANTIABLE)


            self.state = 1774
            self.match(PlSqlParser.CONSTRUCTOR)
            self.state = 1775
            self.match(PlSqlParser.FUNCTION)
            self.state = 1776
            self.type_spec()
            self.state = 1794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 1777
                self.match(PlSqlParser.LEFT_PAREN)

                self.state = 1778
                self.match(PlSqlParser.SELF)
                self.state = 1779
                self.match(PlSqlParser.IN)
                self.state = 1780
                self.match(PlSqlParser.OUT)
                self.state = 1781
                self.type_spec()
                self.state = 1782
                self.match(PlSqlParser.COMMA)
                self.state = 1784
                self.type_elements_parameter()
                self.state = 1789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 1785
                    self.match(PlSqlParser.COMMA)
                    self.state = 1786
                    self.type_elements_parameter()
                    self.state = 1791
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1792
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 1796
            self.match(PlSqlParser.RETURN)
            self.state = 1797
            self.match(PlSqlParser.SELF)
            self.state = 1798
            self.match(PlSqlParser.AS)
            self.state = 1799
            self.match(PlSqlParser.RESULT)
            self.state = 1802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AS or _la==PlSqlParser.IS:
                self.state = 1800
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.AS or _la==PlSqlParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1801
                self.call_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Map_order_function_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(PlSqlParser.MEMBER, 0)

        def type_function_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_function_specContext,0)


        def MAP(self):
            return self.getToken(PlSqlParser.MAP, 0)

        def ORDER(self):
            return self.getToken(PlSqlParser.ORDER, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_map_order_function_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_order_function_spec" ):
                listener.enterMap_order_function_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_order_function_spec" ):
                listener.exitMap_order_function_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMap_order_function_spec" ):
                return visitor.visitMap_order_function_spec(self)
            else:
                return visitor.visitChildren(self)




    def map_order_function_spec(self):

        localctx = PlSqlParser.Map_order_function_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_map_order_function_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1804
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.MAP or _la==PlSqlParser.ORDER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1805
            self.match(PlSqlParser.MEMBER)
            self.state = 1806
            self.type_function_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA(self):
            return self.getToken(PlSqlParser.PRAGMA, 0)

        def RESTRICT_REFERENCES(self):
            return self.getToken(PlSqlParser.RESTRICT_REFERENCES, 0)

        def pragma_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Pragma_elementsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Pragma_elementsContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_pragma_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_clause" ):
                listener.enterPragma_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_clause" ):
                listener.exitPragma_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma_clause" ):
                return visitor.visitPragma_clause(self)
            else:
                return visitor.visitChildren(self)




    def pragma_clause(self):

        localctx = PlSqlParser.Pragma_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_pragma_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1808
            self.match(PlSqlParser.PRAGMA)
            self.state = 1809
            self.match(PlSqlParser.RESTRICT_REFERENCES)
            self.state = 1810
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 1811
            self.pragma_elements()
            self.state = 1816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 1812
                self.match(PlSqlParser.COMMA)
                self.state = 1813
                self.pragma_elements()
                self.state = 1818
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1819
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_pragma_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_elements" ):
                listener.enterPragma_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_elements" ):
                listener.exitPragma_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma_elements" ):
                return visitor.visitPragma_elements(self)
            else:
                return visitor.visitChildren(self)




    def pragma_elements(self):

        localctx = PlSqlParser.Pragma_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_pragma_elements)
        try:
            self.state = 1823
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1821
                self.r_id()
                pass
            elif token in [PlSqlParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1822
                self.match(PlSqlParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_elements_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(PlSqlParser.Parameter_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_type_elements_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_elements_parameter" ):
                listener.enterType_elements_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_elements_parameter" ):
                listener.exitType_elements_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_elements_parameter" ):
                return visitor.visitType_elements_parameter(self)
            else:
                return visitor.visitChildren(self)




    def type_elements_parameter(self):

        localctx = PlSqlParser.Type_elements_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_type_elements_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1825
            self.parameter_name()
            self.state = 1826
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_sequenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PlSqlParser.DROP, 0)

        def SEQUENCE(self):
            return self.getToken(PlSqlParser.SEQUENCE, 0)

        def sequence_name(self):
            return self.getTypedRuleContext(PlSqlParser.Sequence_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_drop_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_sequence" ):
                listener.enterDrop_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_sequence" ):
                listener.exitDrop_sequence(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_sequence" ):
                return visitor.visitDrop_sequence(self)
            else:
                return visitor.visitChildren(self)




    def drop_sequence(self):

        localctx = PlSqlParser.Drop_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_drop_sequence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1828
            self.match(PlSqlParser.DROP)
            self.state = 1829
            self.match(PlSqlParser.SEQUENCE)
            self.state = 1830
            self.sequence_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_sequenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PlSqlParser.ALTER, 0)

        def SEQUENCE(self):
            return self.getToken(PlSqlParser.SEQUENCE, 0)

        def sequence_name(self):
            return self.getTypedRuleContext(PlSqlParser.Sequence_nameContext,0)


        def sequence_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Sequence_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Sequence_specContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_alter_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_sequence" ):
                listener.enterAlter_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_sequence" ):
                listener.exitAlter_sequence(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_sequence" ):
                return visitor.visitAlter_sequence(self)
            else:
                return visitor.visitChildren(self)




    def alter_sequence(self):

        localctx = PlSqlParser.Alter_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_alter_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1832
            self.match(PlSqlParser.ALTER)
            self.state = 1833
            self.match(PlSqlParser.SEQUENCE)
            self.state = 1834
            self.sequence_name()
            self.state = 1836 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1835
                self.sequence_spec()
                self.state = 1838 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.CACHE or _la==PlSqlParser.CYCLE or ((((_la - 170)) & ~0x3f) == 0 and ((1 << (_la - 170)) & ((1 << (PlSqlParser.INCREMENT - 170)) | (1 << (PlSqlParser.MAXVALUE - 170)) | (1 << (PlSqlParser.MINVALUE - 170)))) != 0) or ((((_la - 243)) & ~0x3f) == 0 and ((1 << (_la - 243)) & ((1 << (PlSqlParser.NOCACHE - 243)) | (1 << (PlSqlParser.NOCYCLE - 243)) | (1 << (PlSqlParser.NOMAXVALUE - 243)) | (1 << (PlSqlParser.NOMINVALUE - 243)) | (1 << (PlSqlParser.NOORDER - 243)) | (1 << (PlSqlParser.ORDER - 243)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_sequenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def SEQUENCE(self):
            return self.getToken(PlSqlParser.SEQUENCE, 0)

        def sequence_name(self):
            return self.getTypedRuleContext(PlSqlParser.Sequence_nameContext,0)


        def sequence_start_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Sequence_start_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Sequence_start_clauseContext,i)


        def sequence_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Sequence_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Sequence_specContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_create_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_sequence" ):
                listener.enterCreate_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_sequence" ):
                listener.exitCreate_sequence(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_sequence" ):
                return visitor.visitCreate_sequence(self)
            else:
                return visitor.visitChildren(self)




    def create_sequence(self):

        localctx = PlSqlParser.Create_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_create_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1840
            self.match(PlSqlParser.CREATE)
            self.state = 1841
            self.match(PlSqlParser.SEQUENCE)
            self.state = 1842
            self.sequence_name()
            self.state = 1847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.CACHE or _la==PlSqlParser.CYCLE or ((((_la - 170)) & ~0x3f) == 0 and ((1 << (_la - 170)) & ((1 << (PlSqlParser.INCREMENT - 170)) | (1 << (PlSqlParser.MAXVALUE - 170)) | (1 << (PlSqlParser.MINVALUE - 170)))) != 0) or ((((_la - 243)) & ~0x3f) == 0 and ((1 << (_la - 243)) & ((1 << (PlSqlParser.NOCACHE - 243)) | (1 << (PlSqlParser.NOCYCLE - 243)) | (1 << (PlSqlParser.NOMAXVALUE - 243)) | (1 << (PlSqlParser.NOMINVALUE - 243)) | (1 << (PlSqlParser.NOORDER - 243)) | (1 << (PlSqlParser.ORDER - 243)))) != 0) or _la==PlSqlParser.START:
                self.state = 1845
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.START]:
                    self.state = 1843
                    self.sequence_start_clause()
                    pass
                elif token in [PlSqlParser.CACHE, PlSqlParser.CYCLE, PlSqlParser.INCREMENT, PlSqlParser.MAXVALUE, PlSqlParser.MINVALUE, PlSqlParser.NOCACHE, PlSqlParser.NOCYCLE, PlSqlParser.NOMAXVALUE, PlSqlParser.NOMINVALUE, PlSqlParser.NOORDER, PlSqlParser.ORDER]:
                    self.state = 1844
                    self.sequence_spec()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1849
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sequence_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCREMENT(self):
            return self.getToken(PlSqlParser.INCREMENT, 0)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(PlSqlParser.UNSIGNED_INTEGER, 0)

        def MAXVALUE(self):
            return self.getToken(PlSqlParser.MAXVALUE, 0)

        def NOMAXVALUE(self):
            return self.getToken(PlSqlParser.NOMAXVALUE, 0)

        def MINVALUE(self):
            return self.getToken(PlSqlParser.MINVALUE, 0)

        def NOMINVALUE(self):
            return self.getToken(PlSqlParser.NOMINVALUE, 0)

        def CYCLE(self):
            return self.getToken(PlSqlParser.CYCLE, 0)

        def NOCYCLE(self):
            return self.getToken(PlSqlParser.NOCYCLE, 0)

        def CACHE(self):
            return self.getToken(PlSqlParser.CACHE, 0)

        def NOCACHE(self):
            return self.getToken(PlSqlParser.NOCACHE, 0)

        def ORDER(self):
            return self.getToken(PlSqlParser.ORDER, 0)

        def NOORDER(self):
            return self.getToken(PlSqlParser.NOORDER, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_sequence_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_spec" ):
                listener.enterSequence_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_spec" ):
                listener.exitSequence_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_spec" ):
                return visitor.visitSequence_spec(self)
            else:
                return visitor.visitChildren(self)




    def sequence_spec(self):

        localctx = PlSqlParser.Sequence_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_sequence_spec)
        try:
            self.state = 1866
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.INCREMENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1850
                self.match(PlSqlParser.INCREMENT)
                self.state = 1851
                self.match(PlSqlParser.BY)
                self.state = 1852
                self.match(PlSqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [PlSqlParser.MAXVALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1853
                self.match(PlSqlParser.MAXVALUE)
                self.state = 1854
                self.match(PlSqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [PlSqlParser.NOMAXVALUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1855
                self.match(PlSqlParser.NOMAXVALUE)
                pass
            elif token in [PlSqlParser.MINVALUE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1856
                self.match(PlSqlParser.MINVALUE)
                self.state = 1857
                self.match(PlSqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [PlSqlParser.NOMINVALUE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1858
                self.match(PlSqlParser.NOMINVALUE)
                pass
            elif token in [PlSqlParser.CYCLE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1859
                self.match(PlSqlParser.CYCLE)
                pass
            elif token in [PlSqlParser.NOCYCLE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1860
                self.match(PlSqlParser.NOCYCLE)
                pass
            elif token in [PlSqlParser.CACHE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1861
                self.match(PlSqlParser.CACHE)
                self.state = 1862
                self.match(PlSqlParser.UNSIGNED_INTEGER)
                pass
            elif token in [PlSqlParser.NOCACHE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1863
                self.match(PlSqlParser.NOCACHE)
                pass
            elif token in [PlSqlParser.ORDER]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1864
                self.match(PlSqlParser.ORDER)
                pass
            elif token in [PlSqlParser.NOORDER]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1865
                self.match(PlSqlParser.NOORDER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sequence_start_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(PlSqlParser.START, 0)

        def WITH(self):
            return self.getToken(PlSqlParser.WITH, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(PlSqlParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_sequence_start_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_start_clause" ):
                listener.enterSequence_start_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_start_clause" ):
                listener.exitSequence_start_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_start_clause" ):
                return visitor.visitSequence_start_clause(self)
            else:
                return visitor.visitChildren(self)




    def sequence_start_clause(self):

        localctx = PlSqlParser.Sequence_start_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_sequence_start_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1868
            self.match(PlSqlParser.START)
            self.state = 1869
            self.match(PlSqlParser.WITH)
            self.state = 1870
            self.match(PlSqlParser.UNSIGNED_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Invoker_rights_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHID(self):
            return self.getToken(PlSqlParser.AUTHID, 0)

        def CURRENT_USER(self):
            return self.getToken(PlSqlParser.CURRENT_USER, 0)

        def DEFINER(self):
            return self.getToken(PlSqlParser.DEFINER, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_invoker_rights_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvoker_rights_clause" ):
                listener.enterInvoker_rights_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvoker_rights_clause" ):
                listener.exitInvoker_rights_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvoker_rights_clause" ):
                return visitor.visitInvoker_rights_clause(self)
            else:
                return visitor.visitChildren(self)




    def invoker_rights_clause(self):

        localctx = PlSqlParser.Invoker_rights_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_invoker_rights_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1872
            self.match(PlSqlParser.AUTHID)
            self.state = 1873
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.CURRENT_USER or _la==PlSqlParser.DEFINER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compiler_parameters_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_compiler_parameters_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompiler_parameters_clause" ):
                listener.enterCompiler_parameters_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompiler_parameters_clause" ):
                listener.exitCompiler_parameters_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompiler_parameters_clause" ):
                return visitor.visitCompiler_parameters_clause(self)
            else:
                return visitor.visitChildren(self)




    def compiler_parameters_clause(self):

        localctx = PlSqlParser.Compiler_parameters_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_compiler_parameters_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1875
            self.r_id()
            self.state = 1876
            self.match(PlSqlParser.EQUALS_OP)
            self.state = 1877
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Call_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGUAGE(self):
            return self.getToken(PlSqlParser.LANGUAGE, 0)

        def java_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Java_specContext,0)


        def c_spec(self):
            return self.getTypedRuleContext(PlSqlParser.C_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_call_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall_spec" ):
                listener.enterCall_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall_spec" ):
                listener.exitCall_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCall_spec" ):
                return visitor.visitCall_spec(self)
            else:
                return visitor.visitChildren(self)




    def call_spec(self):

        localctx = PlSqlParser.Call_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_call_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1879
            self.match(PlSqlParser.LANGUAGE)
            self.state = 1882
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.JAVA]:
                self.state = 1880
                self.java_spec()
                pass
            elif token in [PlSqlParser.C_LETTER]:
                self.state = 1881
                self.c_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JAVA(self):
            return self.getToken(PlSqlParser.JAVA, 0)

        def NAME(self):
            return self.getToken(PlSqlParser.NAME, 0)

        def CHAR_STRING(self):
            return self.getToken(PlSqlParser.CHAR_STRING, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_java_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_spec" ):
                listener.enterJava_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_spec" ):
                listener.exitJava_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJava_spec" ):
                return visitor.visitJava_spec(self)
            else:
                return visitor.visitChildren(self)




    def java_spec(self):

        localctx = PlSqlParser.Java_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_java_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1884
            self.match(PlSqlParser.JAVA)
            self.state = 1885
            self.match(PlSqlParser.NAME)
            self.state = 1886
            self.match(PlSqlParser.CHAR_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class C_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def C_LETTER(self):
            return self.getToken(PlSqlParser.C_LETTER, 0)

        def LIBRARY(self):
            return self.getToken(PlSqlParser.LIBRARY, 0)

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def NAME(self):
            return self.getToken(PlSqlParser.NAME, 0)

        def CHAR_STRING(self):
            return self.getToken(PlSqlParser.CHAR_STRING, 0)

        def c_agent_in_clause(self):
            return self.getTypedRuleContext(PlSqlParser.C_agent_in_clauseContext,0)


        def WITH(self):
            return self.getToken(PlSqlParser.WITH, 0)

        def CONTEXT(self):
            return self.getToken(PlSqlParser.CONTEXT, 0)

        def c_parameters_clause(self):
            return self.getTypedRuleContext(PlSqlParser.C_parameters_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_c_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_spec" ):
                listener.enterC_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_spec" ):
                listener.exitC_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitC_spec" ):
                return visitor.visitC_spec(self)
            else:
                return visitor.visitChildren(self)




    def c_spec(self):

        localctx = PlSqlParser.C_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_c_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1888
            self.match(PlSqlParser.C_LETTER)
            self.state = 1891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NAME:
                self.state = 1889
                self.match(PlSqlParser.NAME)
                self.state = 1890
                self.match(PlSqlParser.CHAR_STRING)


            self.state = 1893
            self.match(PlSqlParser.LIBRARY)
            self.state = 1894
            self.r_id()
            self.state = 1896
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.state = 1895
                self.c_agent_in_clause()


            self.state = 1900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WITH:
                self.state = 1898
                self.match(PlSqlParser.WITH)
                self.state = 1899
                self.match(PlSqlParser.CONTEXT)


            self.state = 1903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1902
                self.c_parameters_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class C_agent_in_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AGENT(self):
            return self.getToken(PlSqlParser.AGENT, 0)

        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_c_agent_in_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_agent_in_clause" ):
                listener.enterC_agent_in_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_agent_in_clause" ):
                listener.exitC_agent_in_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitC_agent_in_clause" ):
                return visitor.visitC_agent_in_clause(self)
            else:
                return visitor.visitChildren(self)




    def c_agent_in_clause(self):

        localctx = PlSqlParser.C_agent_in_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_c_agent_in_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1905
            self.match(PlSqlParser.AGENT)
            self.state = 1906
            self.match(PlSqlParser.IN)
            self.state = 1907
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 1908
            self.expression(0)
            self.state = 1913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 1909
                self.match(PlSqlParser.COMMA)
                self.state = 1910
                self.expression(0)
                self.state = 1915
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1916
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class C_parameters_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETERS(self):
            return self.getToken(PlSqlParser.PARAMETERS, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_c_parameters_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_parameters_clause" ):
                listener.enterC_parameters_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_parameters_clause" ):
                listener.exitC_parameters_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitC_parameters_clause" ):
                return visitor.visitC_parameters_clause(self)
            else:
                return visitor.visitChildren(self)




    def c_parameters_clause(self):

        localctx = PlSqlParser.C_parameters_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_c_parameters_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1918
            self.match(PlSqlParser.PARAMETERS)
            self.state = 1919
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 1931
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ALL, PlSqlParser.ANALYZE, PlSqlParser.ANY, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CASE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONNECT_BY_ROOT, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DISTINCT, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FALSE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NOT, PlSqlParser.NULL, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUE, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT, PlSqlParser.CHAR_STRING, PlSqlParser.DELIMITED_ID, PlSqlParser.LEFT_PAREN, PlSqlParser.PLUS_SIGN, PlSqlParser.MINUS_SIGN, PlSqlParser.BINDVAR, PlSqlParser.COLON, PlSqlParser.REGULAR_ID]:
                self.state = 1920
                self.expression(0)
                self.state = 1925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 1921
                    self.match(PlSqlParser.COMMA)
                    self.state = 1922
                    self.expression(0)
                    self.state = 1927
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [PlSqlParser.PERIOD]:
                self.state = 1928
                self.match(PlSqlParser.PERIOD)
                self.state = 1929
                self.match(PlSqlParser.PERIOD)
                self.state = 1930
                self.match(PlSqlParser.PERIOD)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1933
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(PlSqlParser.Parameter_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def default_value_part(self):
            return self.getTypedRuleContext(PlSqlParser.Default_value_partContext,0)


        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.IN)
            else:
                return self.getToken(PlSqlParser.IN, i)

        def OUT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.OUT)
            else:
                return self.getToken(PlSqlParser.OUT, i)

        def INOUT(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.INOUT)
            else:
                return self.getToken(PlSqlParser.INOUT, i)

        def NOCOPY(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.NOCOPY)
            else:
                return self.getToken(PlSqlParser.NOCOPY, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = PlSqlParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1935
            self.parameter_name()
            self.state = 1939
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,173,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1936
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.IN or _la==PlSqlParser.INOUT or _la==PlSqlParser.NOCOPY or _la==PlSqlParser.OUT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 1941
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

            self.state = 1943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 1942
                self.type_spec()


            self.state = 1946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DEFAULT or _la==PlSqlParser.ASSIGN_OP:
                self.state = 1945
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Default_value_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def ASSIGN_OP(self):
            return self.getToken(PlSqlParser.ASSIGN_OP, 0)

        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_default_value_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value_part" ):
                listener.enterDefault_value_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value_part" ):
                listener.exitDefault_value_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_value_part" ):
                return visitor.visitDefault_value_part(self)
            else:
                return visitor.visitChildren(self)




    def default_value_part(self):

        localctx = PlSqlParser.Default_value_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_default_value_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1948
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.DEFAULT or _la==PlSqlParser.ASSIGN_OP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1949
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Variable_declarationContext,0)


        def subtype_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Subtype_declarationContext,0)


        def cursor_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_declarationContext,0)


        def exception_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Exception_declarationContext,0)


        def pragma_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Pragma_declarationContext,0)


        def record_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Record_declarationContext,0)


        def table_declaration(self):
            return self.getTypedRuleContext(PlSqlParser.Table_declarationContext,0)


        def create_procedure_body(self):
            return self.getTypedRuleContext(PlSqlParser.Create_procedure_bodyContext,0)


        def create_function_body(self):
            return self.getTypedRuleContext(PlSqlParser.Create_function_bodyContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_declare_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_spec" ):
                listener.enterDeclare_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_spec" ):
                listener.exitDeclare_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_spec" ):
                return visitor.visitDeclare_spec(self)
            else:
                return visitor.visitChildren(self)




    def declare_spec(self):

        localctx = PlSqlParser.Declare_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_declare_spec)
        try:
            self.state = 1960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1951
                self.variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1952
                self.subtype_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1953
                self.cursor_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1954
                self.exception_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1955
                self.pragma_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1956
                self.record_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1957
                self.table_declaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1958
                self.create_procedure_body()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1959
                self.create_function_body()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_name(self):
            return self.getTypedRuleContext(PlSqlParser.Variable_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def CONSTANT(self):
            return self.getToken(PlSqlParser.CONSTANT, 0)

        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)

        def default_value_part(self):
            return self.getTypedRuleContext(PlSqlParser.Default_value_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_variable_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declaration" ):
                listener.enterVariable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declaration" ):
                listener.exitVariable_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_declaration" ):
                return visitor.visitVariable_declaration(self)
            else:
                return visitor.visitChildren(self)




    def variable_declaration(self):

        localctx = PlSqlParser.Variable_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_variable_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1962
            self.variable_name()
            self.state = 1964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.state = 1963
                self.match(PlSqlParser.CONSTANT)


            self.state = 1966
            self.type_spec()
            self.state = 1969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOT:
                self.state = 1967
                self.match(PlSqlParser.NOT)
                self.state = 1968
                self.match(PlSqlParser.NULL)


            self.state = 1972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DEFAULT or _la==PlSqlParser.ASSIGN_OP:
                self.state = 1971
                self.default_value_part()


            self.state = 1974
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subtype_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBTYPE(self):
            return self.getToken(PlSqlParser.SUBTYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Type_nameContext,0)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def RANGE(self):
            return self.getToken(PlSqlParser.RANGE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_subtype_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtype_declaration" ):
                listener.enterSubtype_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtype_declaration" ):
                listener.exitSubtype_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubtype_declaration" ):
                return visitor.visitSubtype_declaration(self)
            else:
                return visitor.visitChildren(self)




    def subtype_declaration(self):

        localctx = PlSqlParser.Subtype_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_subtype_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1976
            self.match(PlSqlParser.SUBTYPE)
            self.state = 1977
            self.type_name()
            self.state = 1978
            self.match(PlSqlParser.IS)
            self.state = 1979
            self.type_spec()
            self.state = 1985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.RANGE:
                self.state = 1980
                self.match(PlSqlParser.RANGE)
                self.state = 1981
                self.expression(0)
                self.state = 1982
                self.match(PlSqlParser.T__0)
                self.state = 1983
                self.expression(0)


            self.state = 1989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOT:
                self.state = 1987
                self.match(PlSqlParser.NOT)
                self.state = 1988
                self.match(PlSqlParser.NULL)


            self.state = 1991
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR(self):
            return self.getToken(PlSqlParser.CURSOR, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_nameContext,0)


        def parameter_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Parameter_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Parameter_specContext,i)


        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Select_statementContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_cursor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_declaration" ):
                listener.enterCursor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_declaration" ):
                listener.exitCursor_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_declaration" ):
                return visitor.visitCursor_declaration(self)
            else:
                return visitor.visitChildren(self)




    def cursor_declaration(self):

        localctx = PlSqlParser.Cursor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_cursor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1993
            self.match(PlSqlParser.CURSOR)
            self.state = 1994
            self.cursor_name()
            self.state = 2006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 1995
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 1996
                self.parameter_spec()
                self.state = 2001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 1997
                    self.match(PlSqlParser.COMMA)
                    self.state = 1998
                    self.parameter_spec()
                    self.state = 2003
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2004
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 2010
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.RETURN:
                self.state = 2008
                self.match(PlSqlParser.RETURN)
                self.state = 2009
                self.type_spec()


            self.state = 2014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.IS:
                self.state = 2012
                self.match(PlSqlParser.IS)
                self.state = 2013
                self.select_statement()


            self.state = 2016
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameter_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(PlSqlParser.Parameter_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def default_value_part(self):
            return self.getTypedRuleContext(PlSqlParser.Default_value_partContext,0)


        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_parameter_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_spec" ):
                listener.enterParameter_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_spec" ):
                listener.exitParameter_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_spec" ):
                return visitor.visitParameter_spec(self)
            else:
                return visitor.visitChildren(self)




    def parameter_spec(self):

        localctx = PlSqlParser.Parameter_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_parameter_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2018
            self.parameter_name()
            self.state = 2023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.IN - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 2020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.IN:
                    self.state = 2019
                    self.match(PlSqlParser.IN)


                self.state = 2022
                self.type_spec()


            self.state = 2026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DEFAULT or _la==PlSqlParser.ASSIGN_OP:
                self.state = 2025
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exception_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exception_name(self):
            return self.getTypedRuleContext(PlSqlParser.Exception_nameContext,0)


        def EXCEPTION(self):
            return self.getToken(PlSqlParser.EXCEPTION, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_exception_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_declaration" ):
                listener.enterException_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_declaration" ):
                listener.exitException_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitException_declaration" ):
                return visitor.visitException_declaration(self)
            else:
                return visitor.visitChildren(self)




    def exception_declaration(self):

        localctx = PlSqlParser.Exception_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_exception_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2028
            self.exception_name()
            self.state = 2029
            self.match(PlSqlParser.EXCEPTION)
            self.state = 2030
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.id1 = None # R_idContext

        def PRAGMA(self):
            return self.getToken(PlSqlParser.PRAGMA, 0)

        def SERIALLY_REUSABLE(self):
            return self.getToken(PlSqlParser.SERIALLY_REUSABLE, 0)

        def AUTONOMOUS_TRANSACTION(self):
            return self.getToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0)

        def EXCEPTION_INIT(self):
            return self.getToken(PlSqlParser.EXCEPTION_INIT, 0)

        def exception_name(self):
            return self.getTypedRuleContext(PlSqlParser.Exception_nameContext,0)


        def numeric_negative(self):
            return self.getTypedRuleContext(PlSqlParser.Numeric_negativeContext,0)


        def INLINE(self):
            return self.getToken(PlSqlParser.INLINE, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def RESTRICT_REFERENCES(self):
            return self.getToken(PlSqlParser.RESTRICT_REFERENCES, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.R_idContext,i)


        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_pragma_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_declaration" ):
                listener.enterPragma_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_declaration" ):
                listener.exitPragma_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma_declaration" ):
                return visitor.visitPragma_declaration(self)
            else:
                return visitor.visitChildren(self)




    def pragma_declaration(self):

        localctx = PlSqlParser.Pragma_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_pragma_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2032
            self.match(PlSqlParser.PRAGMA)
            self.state = 2063
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.SERIALLY_REUSABLE]:
                self.state = 2033
                self.match(PlSqlParser.SERIALLY_REUSABLE)
                pass
            elif token in [PlSqlParser.AUTONOMOUS_TRANSACTION]:
                self.state = 2034
                self.match(PlSqlParser.AUTONOMOUS_TRANSACTION)
                pass
            elif token in [PlSqlParser.EXCEPTION_INIT]:
                self.state = 2035
                self.match(PlSqlParser.EXCEPTION_INIT)
                self.state = 2036
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 2037
                self.exception_name()
                self.state = 2038
                self.match(PlSqlParser.COMMA)
                self.state = 2039
                self.numeric_negative()
                self.state = 2040
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.INLINE]:
                self.state = 2042
                self.match(PlSqlParser.INLINE)
                self.state = 2043
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 2044
                localctx.id1 = self.r_id()
                self.state = 2045
                self.match(PlSqlParser.COMMA)
                self.state = 2046
                self.expression(0)
                self.state = 2047
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.RESTRICT_REFERENCES]:
                self.state = 2049
                self.match(PlSqlParser.RESTRICT_REFERENCES)
                self.state = 2050
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 2053
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                    self.state = 2051
                    self.r_id()
                    pass
                elif token in [PlSqlParser.DEFAULT]:
                    self.state = 2052
                    self.match(PlSqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2057 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2055
                    self.match(PlSqlParser.COMMA)
                    self.state = 2056
                    self.r_id()
                    self.state = 2059 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PlSqlParser.COMMA):
                        break

                self.state = 2061
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2065
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Record_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def record_type_dec(self):
            return self.getTypedRuleContext(PlSqlParser.Record_type_decContext,0)


        def record_var_dec(self):
            return self.getTypedRuleContext(PlSqlParser.Record_var_decContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_record_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_declaration" ):
                listener.enterRecord_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_declaration" ):
                listener.exitRecord_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_declaration" ):
                return visitor.visitRecord_declaration(self)
            else:
                return visitor.visitChildren(self)




    def record_declaration(self):

        localctx = PlSqlParser.Record_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_record_declaration)
        try:
            self.state = 2069
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2067
                self.record_type_dec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2068
                self.record_var_dec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Record_type_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(PlSqlParser.TYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Type_nameContext,0)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def RECORD(self):
            return self.getToken(PlSqlParser.RECORD, 0)

        def field_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Field_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Field_specContext,i)


        def REF(self):
            return self.getToken(PlSqlParser.REF, 0)

        def CURSOR(self):
            return self.getToken(PlSqlParser.CURSOR, 0)

        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_record_type_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_type_dec" ):
                listener.enterRecord_type_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_type_dec" ):
                listener.exitRecord_type_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_type_dec" ):
                return visitor.visitRecord_type_dec(self)
            else:
                return visitor.visitChildren(self)




    def record_type_dec(self):

        localctx = PlSqlParser.Record_type_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_record_type_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2071
            self.match(PlSqlParser.TYPE)
            self.state = 2072
            self.type_name()
            self.state = 2073
            self.match(PlSqlParser.IS)
            self.state = 2092
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.RECORD]:
                self.state = 2074
                self.match(PlSqlParser.RECORD)
                self.state = 2075
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 2076
                self.field_spec()
                self.state = 2081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 2077
                    self.match(PlSqlParser.COMMA)
                    self.state = 2078
                    self.field_spec()
                    self.state = 2083
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2084
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.REF]:
                self.state = 2086
                self.match(PlSqlParser.REF)
                self.state = 2087
                self.match(PlSqlParser.CURSOR)
                self.state = 2090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.RETURN:
                    self.state = 2088
                    self.match(PlSqlParser.RETURN)
                    self.state = 2089
                    self.type_spec()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2094
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)

        def default_value_part(self):
            return self.getTypedRuleContext(PlSqlParser.Default_value_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_field_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_spec" ):
                listener.enterField_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_spec" ):
                listener.exitField_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField_spec" ):
                return visitor.visitField_spec(self)
            else:
                return visitor.visitChildren(self)




    def field_spec(self):

        localctx = PlSqlParser.Field_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_field_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2096
            self.column_name()
            self.state = 2098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 2097
                self.type_spec()


            self.state = 2102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOT:
                self.state = 2100
                self.match(PlSqlParser.NOT)
                self.state = 2101
                self.match(PlSqlParser.NULL)


            self.state = 2105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DEFAULT or _la==PlSqlParser.ASSIGN_OP:
                self.state = 2104
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Record_var_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def record_name(self):
            return self.getTypedRuleContext(PlSqlParser.Record_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Type_nameContext,0)


        def PERCENT_ROWTYPE(self):
            return self.getToken(PlSqlParser.PERCENT_ROWTYPE, 0)

        def PERCENT_TYPE(self):
            return self.getToken(PlSqlParser.PERCENT_TYPE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_record_var_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_var_dec" ):
                listener.enterRecord_var_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_var_dec" ):
                listener.exitRecord_var_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_var_dec" ):
                return visitor.visitRecord_var_dec(self)
            else:
                return visitor.visitChildren(self)




    def record_var_dec(self):

        localctx = PlSqlParser.Record_var_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_record_var_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2107
            self.record_name()
            self.state = 2108
            self.type_name()
            self.state = 2109
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.PERCENT_ROWTYPE or _la==PlSqlParser.PERCENT_TYPE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2110
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_type_dec(self):
            return self.getTypedRuleContext(PlSqlParser.Table_type_decContext,0)


        def table_var_dec(self):
            return self.getTypedRuleContext(PlSqlParser.Table_var_decContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_table_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_declaration" ):
                listener.enterTable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_declaration" ):
                listener.exitTable_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_declaration" ):
                return visitor.visitTable_declaration(self)
            else:
                return visitor.visitChildren(self)




    def table_declaration(self):

        localctx = PlSqlParser.Table_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_table_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2114
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                self.state = 2112
                self.table_type_dec()
                pass

            elif la_ == 2:
                self.state = 2113
                self.table_var_dec()
                pass


            self.state = 2116
            self.match(PlSqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_type_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(PlSqlParser.TYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Type_nameContext,0)


        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)

        def TABLE(self):
            return self.getToken(PlSqlParser.TABLE, 0)

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def varray_type_def(self):
            return self.getTypedRuleContext(PlSqlParser.Varray_type_defContext,0)


        def table_indexed_by_part(self):
            return self.getTypedRuleContext(PlSqlParser.Table_indexed_by_partContext,0)


        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_table_type_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_type_dec" ):
                listener.enterTable_type_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_type_dec" ):
                listener.exitTable_type_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_type_dec" ):
                return visitor.visitTable_type_dec(self)
            else:
                return visitor.visitChildren(self)




    def table_type_dec(self):

        localctx = PlSqlParser.Table_type_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_table_type_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2118
            self.match(PlSqlParser.TYPE)
            self.state = 2119
            self.type_name()
            self.state = 2120
            self.match(PlSqlParser.IS)
            self.state = 2132
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.TABLE]:
                self.state = 2121
                self.match(PlSqlParser.TABLE)
                self.state = 2122
                self.match(PlSqlParser.OF)
                self.state = 2123
                self.type_spec()
                self.state = 2125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.INDEX or _la==PlSqlParser.INDEXED:
                    self.state = 2124
                    self.table_indexed_by_part()


                self.state = 2129
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.NOT:
                    self.state = 2127
                    self.match(PlSqlParser.NOT)
                    self.state = 2128
                    self.match(PlSqlParser.NULL)


                pass
            elif token in [PlSqlParser.VARRAY, PlSqlParser.VARYING]:
                self.state = 2131
                self.varray_type_def()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_indexed_by_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.idx1 = None # Token
            self.idx2 = None # Token

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def INDEXED(self):
            return self.getToken(PlSqlParser.INDEXED, 0)

        def INDEX(self):
            return self.getToken(PlSqlParser.INDEX, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_table_indexed_by_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_indexed_by_part" ):
                listener.enterTable_indexed_by_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_indexed_by_part" ):
                listener.exitTable_indexed_by_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_indexed_by_part" ):
                return visitor.visitTable_indexed_by_part(self)
            else:
                return visitor.visitChildren(self)




    def table_indexed_by_part(self):

        localctx = PlSqlParser.Table_indexed_by_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_table_indexed_by_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2136
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.INDEXED]:
                self.state = 2134
                localctx.idx1 = self.match(PlSqlParser.INDEXED)
                pass
            elif token in [PlSqlParser.INDEX]:
                self.state = 2135
                localctx.idx2 = self.match(PlSqlParser.INDEX)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2138
            self.match(PlSqlParser.BY)
            self.state = 2139
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Varray_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def VARRAY(self):
            return self.getToken(PlSqlParser.VARRAY, 0)

        def VARYING(self):
            return self.getToken(PlSqlParser.VARYING, 0)

        def ARRAY(self):
            return self.getToken(PlSqlParser.ARRAY, 0)

        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_varray_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarray_type_def" ):
                listener.enterVarray_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarray_type_def" ):
                listener.exitVarray_type_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarray_type_def" ):
                return visitor.visitVarray_type_def(self)
            else:
                return visitor.visitChildren(self)




    def varray_type_def(self):

        localctx = PlSqlParser.Varray_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_varray_type_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2144
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.VARRAY]:
                self.state = 2141
                self.match(PlSqlParser.VARRAY)
                pass
            elif token in [PlSqlParser.VARYING]:
                self.state = 2142
                self.match(PlSqlParser.VARYING)
                self.state = 2143
                self.match(PlSqlParser.ARRAY)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2146
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 2147
            self.expression(0)
            self.state = 2148
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 2149
            self.match(PlSqlParser.OF)
            self.state = 2150
            self.type_spec()
            self.state = 2153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.state = 2151
                self.match(PlSqlParser.NOT)
                self.state = 2152
                self.match(PlSqlParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_var_decContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_var_name(self):
            return self.getTypedRuleContext(PlSqlParser.Table_var_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_table_var_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_var_dec" ):
                listener.enterTable_var_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_var_dec" ):
                listener.exitTable_var_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_var_dec" ):
                return visitor.visitTable_var_dec(self)
            else:
                return visitor.visitChildren(self)




    def table_var_dec(self):

        localctx = PlSqlParser.Table_var_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_table_var_dec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2155
            self.table_var_name()
            self.state = 2156
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Seq_of_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.StatementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.StatementContext,i)


        def label_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Label_declarationContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Label_declarationContext,i)


        def EOF(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.EOF)
            else:
                return self.getToken(PlSqlParser.EOF, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_seq_of_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeq_of_statements" ):
                listener.enterSeq_of_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeq_of_statements" ):
                listener.exitSeq_of_statements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeq_of_statements" ):
                return visitor.visitSeq_of_statements(self)
            else:
                return visitor.visitChildren(self)




    def seq_of_statements(self):

        localctx = PlSqlParser.Seq_of_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_seq_of_statements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2162 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2162
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ALTER, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BEGIN, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CASE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CREATE, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECLARE, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DELETE, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FETCH, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FOR, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GOTO, PlSqlParser.GRANT, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IF, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSERT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCK, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULL, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PROCEDURE, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELECT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATE, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITH, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.DELIMITED_ID, PlSqlParser.LEFT_PAREN, PlSqlParser.BINDVAR, PlSqlParser.COLON, PlSqlParser.REGULAR_ID]:
                        self.state = 2158
                        self.statement()
                        self.state = 2159
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.EOF or _la==PlSqlParser.SEMICOLON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [PlSqlParser.LESS_THAN_OP]:
                        self.state = 2161
                        self.label_declaration()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 2164 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,207,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Label_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ltp1 = None # Token

        def label_name(self):
            return self.getTypedRuleContext(PlSqlParser.Label_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_label_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_declaration" ):
                listener.enterLabel_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_declaration" ):
                listener.exitLabel_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel_declaration" ):
                return visitor.visitLabel_declaration(self)
            else:
                return visitor.visitChildren(self)




    def label_declaration(self):

        localctx = PlSqlParser.Label_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_label_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2166
            localctx.ltp1 = self.match(PlSqlParser.LESS_THAN_OP)
            self.state = 2167
            self.match(PlSqlParser.LESS_THAN_OP)
            self.state = 2168
            self.label_name()
            self.state = 2169
            self.match(PlSqlParser.GREATER_THAN_OP)
            self.state = 2170
            self.match(PlSqlParser.GREATER_THAN_OP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PlSqlParser.CREATE, 0)

        def swallow_to_semi(self):
            return self.getTypedRuleContext(PlSqlParser.Swallow_to_semiContext,0)


        def ALTER(self):
            return self.getToken(PlSqlParser.ALTER, 0)

        def GRANT(self):
            return self.getToken(PlSqlParser.GRANT, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def TRUNCATE(self):
            return self.getToken(PlSqlParser.TRUNCATE, 0)

        def body(self):
            return self.getTypedRuleContext(PlSqlParser.BodyContext,0)


        def block(self):
            return self.getTypedRuleContext(PlSqlParser.BlockContext,0)


        def assignment_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Assignment_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Continue_statementContext,0)


        def exit_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Exit_statementContext,0)


        def goto_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Goto_statementContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(PlSqlParser.If_statementContext,0)


        def loop_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Loop_statementContext,0)


        def forall_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Forall_statementContext,0)


        def null_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Null_statementContext,0)


        def raise_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Raise_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Return_statementContext,0)


        def case_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Case_statementContext,0)


        def sql_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Sql_statementContext,0)


        def function_call(self):
            return self.getTypedRuleContext(PlSqlParser.Function_callContext,0)


        def assume_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Assume_statementContext,0)


        def assert_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Assert_statementContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = PlSqlParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_statement)
        try:
            self.state = 2200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2172
                self.match(PlSqlParser.CREATE)
                self.state = 2173
                self.swallow_to_semi()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2174
                self.match(PlSqlParser.ALTER)
                self.state = 2175
                self.swallow_to_semi()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2176
                self.match(PlSqlParser.GRANT)
                self.state = 2178
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
                if la_ == 1:
                    self.state = 2177
                    self.match(PlSqlParser.ALL)


                self.state = 2180
                self.swallow_to_semi()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2181
                self.match(PlSqlParser.TRUNCATE)
                self.state = 2182
                self.swallow_to_semi()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2183
                self.body()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2184
                self.block()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2185
                self.assignment_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2186
                self.continue_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2187
                self.exit_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2188
                self.goto_statement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2189
                self.if_statement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2190
                self.loop_statement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2191
                self.forall_statement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2192
                self.null_statement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2193
                self.raise_statement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2194
                self.return_statement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2195
                self.case_statement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2196
                self.sql_statement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2197
                self.function_call()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2198
                self.assume_statement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2199
                self.assert_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assume_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSUME(self):
            return self.getToken(PlSqlParser.ASSUME, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_assume_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssume_statement" ):
                listener.enterAssume_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssume_statement" ):
                listener.exitAssume_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssume_statement" ):
                return visitor.visitAssume_statement(self)
            else:
                return visitor.visitChildren(self)




    def assume_statement(self):

        localctx = PlSqlParser.Assume_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_assume_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2202
            self.match(PlSqlParser.ASSUME)
            self.state = 2203
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(PlSqlParser.ASSERT, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_assert_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_statement" ):
                listener.enterAssert_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_statement" ):
                listener.exitAssert_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_statement" ):
                return visitor.visitAssert_statement(self)
            else:
                return visitor.visitChildren(self)




    def assert_statement(self):

        localctx = PlSqlParser.Assert_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_assert_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2205
            self.match(PlSqlParser.ASSERT)
            self.state = 2206
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assignment_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN_OP(self):
            return self.getToken(PlSqlParser.ASSIGN_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def general_element(self):
            return self.getTypedRuleContext(PlSqlParser.General_elementContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(PlSqlParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_assignment_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_statement" ):
                listener.enterAssignment_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_statement" ):
                listener.exitAssignment_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment_statement" ):
                return visitor.visitAssignment_statement(self)
            else:
                return visitor.visitChildren(self)




    def assignment_statement(self):

        localctx = PlSqlParser.Assignment_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_assignment_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2210
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                self.state = 2208
                self.general_element()
                pass
            elif token in [PlSqlParser.BINDVAR, PlSqlParser.COLON]:
                self.state = 2209
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2212
            self.match(PlSqlParser.ASSIGN_OP)
            self.state = 2213
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(PlSqlParser.CONTINUE, 0)

        def label_name(self):
            return self.getTypedRuleContext(PlSqlParser.Label_nameContext,0)


        def WHEN(self):
            return self.getToken(PlSqlParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_continue_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_statement" ):
                listener.enterContinue_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_statement" ):
                listener.exitContinue_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_statement" ):
                return visitor.visitContinue_statement(self)
            else:
                return visitor.visitChildren(self)




    def continue_statement(self):

        localctx = PlSqlParser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_continue_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2215
            self.match(PlSqlParser.CONTINUE)
            self.state = 2217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 2216
                self.label_name()


            self.state = 2221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WHEN:
                self.state = 2219
                self.match(PlSqlParser.WHEN)
                self.state = 2220
                self.condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exit_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(PlSqlParser.EXIT, 0)

        def label_name(self):
            return self.getTypedRuleContext(PlSqlParser.Label_nameContext,0)


        def WHEN(self):
            return self.getToken(PlSqlParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_exit_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit_statement" ):
                listener.enterExit_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit_statement" ):
                listener.exitExit_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExit_statement" ):
                return visitor.visitExit_statement(self)
            else:
                return visitor.visitChildren(self)




    def exit_statement(self):

        localctx = PlSqlParser.Exit_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_exit_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2223
            self.match(PlSqlParser.EXIT)
            self.state = 2225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 2224
                self.label_name()


            self.state = 2229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WHEN:
                self.state = 2227
                self.match(PlSqlParser.WHEN)
                self.state = 2228
                self.condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Goto_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(PlSqlParser.GOTO, 0)

        def label_name(self):
            return self.getTypedRuleContext(PlSqlParser.Label_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_goto_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoto_statement" ):
                listener.enterGoto_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoto_statement" ):
                listener.exitGoto_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoto_statement" ):
                return visitor.visitGoto_statement(self)
            else:
                return visitor.visitChildren(self)




    def goto_statement(self):

        localctx = PlSqlParser.Goto_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_goto_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2231
            self.match(PlSqlParser.GOTO)
            self.state = 2232
            self.label_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.IF)
            else:
                return self.getToken(PlSqlParser.IF, i)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(PlSqlParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(PlSqlParser.END, 0)

        def elsif_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Elsif_partContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Elsif_partContext,i)


        def else_part(self):
            return self.getTypedRuleContext(PlSqlParser.Else_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_statement" ):
                return visitor.visitIf_statement(self)
            else:
                return visitor.visitChildren(self)




    def if_statement(self):

        localctx = PlSqlParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_if_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2234
            self.match(PlSqlParser.IF)
            self.state = 2235
            self.condition()
            self.state = 2236
            self.match(PlSqlParser.THEN)
            self.state = 2237
            self.seq_of_statements()
            self.state = 2241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.ELSIF:
                self.state = 2238
                self.elsif_part()
                self.state = 2243
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ELSE:
                self.state = 2244
                self.else_part()


            self.state = 2247
            self.match(PlSqlParser.END)
            self.state = 2248
            self.match(PlSqlParser.IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Elsif_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSIF(self):
            return self.getToken(PlSqlParser.ELSIF, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(PlSqlParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_elsif_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElsif_part" ):
                listener.enterElsif_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElsif_part" ):
                listener.exitElsif_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElsif_part" ):
                return visitor.visitElsif_part(self)
            else:
                return visitor.visitChildren(self)




    def elsif_part(self):

        localctx = PlSqlParser.Elsif_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_elsif_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2250
            self.match(PlSqlParser.ELSIF)
            self.state = 2251
            self.condition()
            self.state = 2252
            self.match(PlSqlParser.THEN)
            self.state = 2253
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(PlSqlParser.ELSE, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_else_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_part" ):
                listener.enterElse_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_part" ):
                listener.exitElse_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_part" ):
                return visitor.visitElse_part(self)
            else:
                return visitor.visitChildren(self)




    def else_part(self):

        localctx = PlSqlParser.Else_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_else_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2255
            self.match(PlSqlParser.ELSE)
            self.state = 2256
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Loop_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.LOOP)
            else:
                return self.getToken(PlSqlParser.LOOP, i)

        def seq_of_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(PlSqlParser.END, 0)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Label_nameContext,i)


        def WHILE(self):
            return self.getToken(PlSqlParser.WHILE, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def cursor_loop_param(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_loop_paramContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_loop_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop_statement" ):
                listener.enterLoop_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop_statement" ):
                listener.exitLoop_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop_statement" ):
                return visitor.visitLoop_statement(self)
            else:
                return visitor.visitChildren(self)




    def loop_statement(self):

        localctx = PlSqlParser.Loop_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_loop_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2259
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 2258
                self.label_name()


            self.state = 2265
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.WHILE]:
                self.state = 2261
                self.match(PlSqlParser.WHILE)
                self.state = 2262
                self.condition()
                pass
            elif token in [PlSqlParser.FOR]:
                self.state = 2263
                self.match(PlSqlParser.FOR)
                self.state = 2264
                self.cursor_loop_param()
                pass
            elif token in [PlSqlParser.LOOP]:
                pass
            else:
                pass
            self.state = 2267
            self.match(PlSqlParser.LOOP)
            self.state = 2268
            self.seq_of_statements()
            self.state = 2269
            self.match(PlSqlParser.END)
            self.state = 2270
            self.match(PlSqlParser.LOOP)
            self.state = 2272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 2271
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_loop_paramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_name(self):
            return self.getTypedRuleContext(PlSqlParser.Index_nameContext,0)


        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def lower_bound(self):
            return self.getTypedRuleContext(PlSqlParser.Lower_boundContext,0)


        def upper_bound(self):
            return self.getTypedRuleContext(PlSqlParser.Upper_boundContext,0)


        def REVERSE(self):
            return self.getToken(PlSqlParser.REVERSE, 0)

        def record_name(self):
            return self.getTypedRuleContext(PlSqlParser.Record_nameContext,0)


        def cursor_name(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_nameContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Select_statementContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(PlSqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_cursor_loop_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_loop_param" ):
                listener.enterCursor_loop_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_loop_param" ):
                listener.exitCursor_loop_param(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_loop_param" ):
                return visitor.visitCursor_loop_param(self)
            else:
                return visitor.visitChildren(self)




    def cursor_loop_param(self):

        localctx = PlSqlParser.Cursor_loop_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_cursor_loop_param)
        self._la = 0 # Token type
        try:
            self.state = 2295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2274
                self.index_name()
                self.state = 2275
                self.match(PlSqlParser.IN)
                self.state = 2277
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                if la_ == 1:
                    self.state = 2276
                    self.match(PlSqlParser.REVERSE)


                self.state = 2279
                self.lower_bound()
                self.state = 2280
                self.match(PlSqlParser.T__0)
                self.state = 2281
                self.upper_bound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2283
                self.record_name()
                self.state = 2284
                self.match(PlSqlParser.IN)
                self.state = 2293
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.DELIMITED_ID, PlSqlParser.BINDVAR, PlSqlParser.COLON, PlSqlParser.REGULAR_ID]:
                    self.state = 2285
                    self.cursor_name()
                    self.state = 2287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.LEFT_PAREN:
                        self.state = 2286
                        self.expression_list()


                    pass
                elif token in [PlSqlParser.LEFT_PAREN]:
                    self.state = 2289
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 2290
                    self.select_statement()
                    self.state = 2291
                    self.match(PlSqlParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Forall_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORALL(self):
            return self.getToken(PlSqlParser.FORALL, 0)

        def index_name(self):
            return self.getTypedRuleContext(PlSqlParser.Index_nameContext,0)


        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def bounds_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Bounds_clauseContext,0)


        def sql_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Sql_statementContext,0)


        def SAVE(self):
            return self.getToken(PlSqlParser.SAVE, 0)

        def EXCEPTIONS(self):
            return self.getToken(PlSqlParser.EXCEPTIONS, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_forall_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForall_statement" ):
                listener.enterForall_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForall_statement" ):
                listener.exitForall_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForall_statement" ):
                return visitor.visitForall_statement(self)
            else:
                return visitor.visitChildren(self)




    def forall_statement(self):

        localctx = PlSqlParser.Forall_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_forall_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2297
            self.match(PlSqlParser.FORALL)
            self.state = 2298
            self.index_name()
            self.state = 2299
            self.match(PlSqlParser.IN)
            self.state = 2300
            self.bounds_clause()
            self.state = 2301
            self.sql_statement()
            self.state = 2304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.SAVE:
                self.state = 2302
                self.match(PlSqlParser.SAVE)
                self.state = 2303
                self.match(PlSqlParser.EXCEPTIONS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bounds_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lower_bound(self):
            return self.getTypedRuleContext(PlSqlParser.Lower_boundContext,0)


        def upper_bound(self):
            return self.getTypedRuleContext(PlSqlParser.Upper_boundContext,0)


        def INDICES(self):
            return self.getToken(PlSqlParser.INDICES, 0)

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def collection_name(self):
            return self.getTypedRuleContext(PlSqlParser.Collection_nameContext,0)


        def between_bound(self):
            return self.getTypedRuleContext(PlSqlParser.Between_boundContext,0)


        def VALUES(self):
            return self.getToken(PlSqlParser.VALUES, 0)

        def index_name(self):
            return self.getTypedRuleContext(PlSqlParser.Index_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_bounds_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBounds_clause" ):
                listener.enterBounds_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBounds_clause" ):
                listener.exitBounds_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBounds_clause" ):
                return visitor.visitBounds_clause(self)
            else:
                return visitor.visitChildren(self)




    def bounds_clause(self):

        localctx = PlSqlParser.Bounds_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_bounds_clause)
        self._la = 0 # Token type
        try:
            self.state = 2319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2306
                self.lower_bound()
                self.state = 2307
                self.match(PlSqlParser.T__0)
                self.state = 2308
                self.upper_bound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2310
                self.match(PlSqlParser.INDICES)
                self.state = 2311
                self.match(PlSqlParser.OF)
                self.state = 2312
                self.collection_name()
                self.state = 2314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.BETWEEN:
                    self.state = 2313
                    self.between_bound()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2316
                self.match(PlSqlParser.VALUES)
                self.state = 2317
                self.match(PlSqlParser.OF)
                self.state = 2318
                self.index_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Between_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(PlSqlParser.BETWEEN, 0)

        def lower_bound(self):
            return self.getTypedRuleContext(PlSqlParser.Lower_boundContext,0)


        def AND(self):
            return self.getToken(PlSqlParser.AND, 0)

        def upper_bound(self):
            return self.getTypedRuleContext(PlSqlParser.Upper_boundContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_between_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween_bound" ):
                listener.enterBetween_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween_bound" ):
                listener.exitBetween_bound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetween_bound" ):
                return visitor.visitBetween_bound(self)
            else:
                return visitor.visitChildren(self)




    def between_bound(self):

        localctx = PlSqlParser.Between_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_between_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2321
            self.match(PlSqlParser.BETWEEN)
            self.state = 2322
            self.lower_bound()
            self.state = 2323
            self.match(PlSqlParser.AND)
            self.state = 2324
            self.upper_bound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lower_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_lower_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLower_bound" ):
                listener.enterLower_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLower_bound" ):
                listener.exitLower_bound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLower_bound" ):
                return visitor.visitLower_bound(self)
            else:
                return visitor.visitChildren(self)




    def lower_bound(self):

        localctx = PlSqlParser.Lower_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_lower_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2326
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Upper_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_upper_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpper_bound" ):
                listener.enterUpper_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpper_bound" ):
                listener.exitUpper_bound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpper_bound" ):
                return visitor.visitUpper_bound(self)
            else:
                return visitor.visitChildren(self)




    def upper_bound(self):

        localctx = PlSqlParser.Upper_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_upper_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2328
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Null_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_null_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_statement" ):
                listener.enterNull_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_statement" ):
                listener.exitNull_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNull_statement" ):
                return visitor.visitNull_statement(self)
            else:
                return visitor.visitChildren(self)




    def null_statement(self):

        localctx = PlSqlParser.Null_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_null_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2330
            self.match(PlSqlParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(PlSqlParser.RAISE, 0)

        def exception_name(self):
            return self.getTypedRuleContext(PlSqlParser.Exception_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_raise_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_statement" ):
                listener.enterRaise_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_statement" ):
                listener.exitRaise_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_statement" ):
                return visitor.visitRaise_statement(self)
            else:
                return visitor.visitChildren(self)




    def raise_statement(self):

        localctx = PlSqlParser.Raise_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_raise_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2332
            self.match(PlSqlParser.RAISE)
            self.state = 2334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 2333
                self.exception_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_return_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_statement" ):
                return visitor.visitReturn_statement(self)
            else:
                return visitor.visitChildren(self)




    def return_statement(self):

        localctx = PlSqlParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_return_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2336
            self.match(PlSqlParser.RETURN)
            self.state = 2338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CASE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DISTINCT - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXISTS - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FALSE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NOT - 192)) | (1 << (PlSqlParser.NULL - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.PRIOR - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUE - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 448)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 448)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 448)) | (1 << (PlSqlParser.CHAR_STRING - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)) | (1 << (PlSqlParser.LEFT_PAREN - 448)) | (1 << (PlSqlParser.PLUS_SIGN - 448)) | (1 << (PlSqlParser.MINUS_SIGN - 448)) | (1 << (PlSqlParser.BINDVAR - 448)) | (1 << (PlSqlParser.COLON - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 2337
                self.condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def routine_name(self):
            return self.getTypedRuleContext(PlSqlParser.Routine_nameContext,0)


        def CALL(self):
            return self.getToken(PlSqlParser.CALL, 0)

        def function_argument(self):
            return self.getTypedRuleContext(PlSqlParser.Function_argumentContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_call" ):
                return visitor.visitFunction_call(self)
            else:
                return visitor.visitChildren(self)




    def function_call(self):

        localctx = PlSqlParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.state = 2340
                self.match(PlSqlParser.CALL)


            self.state = 2343
            self.routine_name()
            self.state = 2345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 2344
                self.function_argument()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(PlSqlParser.BEGIN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(PlSqlParser.END, 0)

        def EXCEPTION(self):
            return self.getToken(PlSqlParser.EXCEPTION, 0)

        def label_name(self):
            return self.getTypedRuleContext(PlSqlParser.Label_nameContext,0)


        def exception_handler(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Exception_handlerContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Exception_handlerContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody" ):
                return visitor.visitBody(self)
            else:
                return visitor.visitChildren(self)




    def body(self):

        localctx = PlSqlParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2347
            self.match(PlSqlParser.BEGIN)
            self.state = 2348
            self.seq_of_statements()
            self.state = 2355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.EXCEPTION:
                self.state = 2349
                self.match(PlSqlParser.EXCEPTION)
                self.state = 2351 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2350
                    self.exception_handler()
                    self.state = 2353 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PlSqlParser.WHEN):
                        break



            self.state = 2357
            self.match(PlSqlParser.END)
            self.state = 2359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.state = 2358
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exception_handlerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PlSqlParser.WHEN, 0)

        def exception_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Exception_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Exception_nameContext,i)


        def THEN(self):
            return self.getToken(PlSqlParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_statementsContext,0)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.OR)
            else:
                return self.getToken(PlSqlParser.OR, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_exception_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_handler" ):
                listener.enterException_handler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_handler" ):
                listener.exitException_handler(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitException_handler" ):
                return visitor.visitException_handler(self)
            else:
                return visitor.visitChildren(self)




    def exception_handler(self):

        localctx = PlSqlParser.Exception_handlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_exception_handler)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2361
            self.match(PlSqlParser.WHEN)
            self.state = 2362
            self.exception_name()
            self.state = 2367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.OR:
                self.state = 2363
                self.match(PlSqlParser.OR)
                self.state = 2364
                self.exception_name()
                self.state = 2369
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2370
            self.match(PlSqlParser.THEN)
            self.state = 2371
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def body(self):
            return self.getTypedRuleContext(PlSqlParser.BodyContext,0)


        def DECLARE(self):
            return self.getToken(PlSqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_trigger_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_block" ):
                listener.enterTrigger_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_block" ):
                listener.exitTrigger_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_block" ):
                return visitor.visitTrigger_block(self)
            else:
                return visitor.visitChildren(self)




    def trigger_block(self):

        localctx = PlSqlParser.Trigger_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_trigger_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CREATE - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECLARE - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.PROCEDURE - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)) | (1 << (PlSqlParser.BINDVAR - 448)) | (1 << (PlSqlParser.COLON - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 2374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.DECLARE:
                    self.state = 2373
                    self.match(PlSqlParser.DECLARE)


                self.state = 2377 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2376
                    self.declare_spec()
                    self.state = 2379 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CREATE - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.PROCEDURE - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)) | (1 << (PlSqlParser.BINDVAR - 448)) | (1 << (PlSqlParser.COLON - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID):
                        break



            self.state = 2383
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def body(self):
            return self.getTypedRuleContext(PlSqlParser.BodyContext,0)


        def DECLARE(self):
            return self.getToken(PlSqlParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Declare_specContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = PlSqlParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DECLARE:
                self.state = 2385
                self.match(PlSqlParser.DECLARE)


            self.state = 2389 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2388
                self.declare_spec()
                self.state = 2391 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CREATE - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.PROCEDURE - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)) | (1 << (PlSqlParser.BINDVAR - 448)) | (1 << (PlSqlParser.COLON - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID):
                    break

            self.state = 2393
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def execute_immediate(self):
            return self.getTypedRuleContext(PlSqlParser.Execute_immediateContext,0)


        def data_manipulation_language_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Data_manipulation_language_statementsContext,0)


        def cursor_manipulation_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_manipulation_statementsContext,0)


        def transaction_control_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Transaction_control_statementsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_sql_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_statement" ):
                listener.enterSql_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_statement" ):
                listener.exitSql_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_statement" ):
                return visitor.visitSql_statement(self)
            else:
                return visitor.visitChildren(self)




    def sql_statement(self):

        localctx = PlSqlParser.Sql_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_sql_statement)
        try:
            self.state = 2399
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2395
                self.execute_immediate()
                pass
            elif token in [PlSqlParser.DELETE, PlSqlParser.EXPLAIN, PlSqlParser.INSERT, PlSqlParser.LOCK, PlSqlParser.MERGE, PlSqlParser.SELECT, PlSqlParser.UPDATE, PlSqlParser.WITH, PlSqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2396
                self.data_manipulation_language_statements()
                pass
            elif token in [PlSqlParser.CLOSE, PlSqlParser.FETCH, PlSqlParser.OPEN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2397
                self.cursor_manipulation_statements()
                pass
            elif token in [PlSqlParser.COMMIT, PlSqlParser.ROLLBACK, PlSqlParser.SAVEPOINT, PlSqlParser.SET]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2398
                self.transaction_control_statements()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_immediateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(PlSqlParser.EXECUTE, 0)

        def IMMEDIATE(self):
            return self.getToken(PlSqlParser.IMMEDIATE, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def into_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Into_clauseContext,0)


        def using_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Using_clauseContext,0)


        def dynamic_returning_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Dynamic_returning_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_execute_immediate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_immediate" ):
                listener.enterExecute_immediate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_immediate" ):
                listener.exitExecute_immediate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_immediate" ):
                return visitor.visitExecute_immediate(self)
            else:
                return visitor.visitChildren(self)




    def execute_immediate(self):

        localctx = PlSqlParser.Execute_immediateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_execute_immediate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2401
            self.match(PlSqlParser.EXECUTE)
            self.state = 2402
            self.match(PlSqlParser.IMMEDIATE)
            self.state = 2403
            self.expression(0)
            self.state = 2413
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.BULK, PlSqlParser.INTO]:
                self.state = 2404
                self.into_clause()
                self.state = 2406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.USING:
                    self.state = 2405
                    self.using_clause()


                pass
            elif token in [PlSqlParser.USING]:
                self.state = 2408
                self.using_clause()
                self.state = 2410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.RETURN or _la==PlSqlParser.RETURNING:
                    self.state = 2409
                    self.dynamic_returning_clause()


                pass
            elif token in [PlSqlParser.RETURN, PlSqlParser.RETURNING]:
                self.state = 2412
                self.dynamic_returning_clause()
                pass
            elif token in [PlSqlParser.EOF, PlSqlParser.SAVE, PlSqlParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dynamic_returning_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def into_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Into_clauseContext,0)


        def RETURNING(self):
            return self.getToken(PlSqlParser.RETURNING, 0)

        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_dynamic_returning_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamic_returning_clause" ):
                listener.enterDynamic_returning_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamic_returning_clause" ):
                listener.exitDynamic_returning_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamic_returning_clause" ):
                return visitor.visitDynamic_returning_clause(self)
            else:
                return visitor.visitChildren(self)




    def dynamic_returning_clause(self):

        localctx = PlSqlParser.Dynamic_returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_dynamic_returning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2415
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.RETURN or _la==PlSqlParser.RETURNING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2416
            self.into_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Data_manipulation_language_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def merge_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Merge_statementContext,0)


        def lock_table_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Lock_table_statementContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Update_statementContext,0)


        def delete_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Insert_statementContext,0)


        def explain_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Explain_statementContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_data_manipulation_language_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_manipulation_language_statements" ):
                listener.enterData_manipulation_language_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_manipulation_language_statements" ):
                listener.exitData_manipulation_language_statements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData_manipulation_language_statements" ):
                return visitor.visitData_manipulation_language_statements(self)
            else:
                return visitor.visitChildren(self)




    def data_manipulation_language_statements(self):

        localctx = PlSqlParser.Data_manipulation_language_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_data_manipulation_language_statements)
        try:
            self.state = 2425
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.MERGE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2418
                self.merge_statement()
                pass
            elif token in [PlSqlParser.LOCK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2419
                self.lock_table_statement()
                pass
            elif token in [PlSqlParser.SELECT, PlSqlParser.WITH, PlSqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2420
                self.select_statement()
                pass
            elif token in [PlSqlParser.UPDATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2421
                self.update_statement()
                pass
            elif token in [PlSqlParser.DELETE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2422
                self.delete_statement()
                pass
            elif token in [PlSqlParser.INSERT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2423
                self.insert_statement()
                pass
            elif token in [PlSqlParser.EXPLAIN]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2424
                self.explain_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_manipulation_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def close_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Close_statementContext,0)


        def open_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Open_statementContext,0)


        def fetch_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Fetch_statementContext,0)


        def open_for_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Open_for_statementContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_cursor_manipulation_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_manipulation_statements" ):
                listener.enterCursor_manipulation_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_manipulation_statements" ):
                listener.exitCursor_manipulation_statements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_manipulation_statements" ):
                return visitor.visitCursor_manipulation_statements(self)
            else:
                return visitor.visitChildren(self)




    def cursor_manipulation_statements(self):

        localctx = PlSqlParser.Cursor_manipulation_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_cursor_manipulation_statements)
        try:
            self.state = 2431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2427
                self.close_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2428
                self.open_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2429
                self.fetch_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2430
                self.open_for_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Close_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(PlSqlParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_close_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClose_statement" ):
                listener.enterClose_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClose_statement" ):
                listener.exitClose_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClose_statement" ):
                return visitor.visitClose_statement(self)
            else:
                return visitor.visitChildren(self)




    def close_statement(self):

        localctx = PlSqlParser.Close_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_close_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2433
            self.match(PlSqlParser.CLOSE)
            self.state = 2434
            self.cursor_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Open_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(PlSqlParser.OPEN, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_nameContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(PlSqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_open_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_statement" ):
                listener.enterOpen_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_statement" ):
                listener.exitOpen_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_statement" ):
                return visitor.visitOpen_statement(self)
            else:
                return visitor.visitChildren(self)




    def open_statement(self):

        localctx = PlSqlParser.Open_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_open_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2436
            self.match(PlSqlParser.OPEN)
            self.state = 2437
            self.cursor_name()
            self.state = 2439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 2438
                self.expression_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.it1 = None # Token

        def FETCH(self):
            return self.getToken(PlSqlParser.FETCH, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_nameContext,0)


        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Variable_nameContext,i)


        def BULK(self):
            return self.getToken(PlSqlParser.BULK, 0)

        def COLLECT(self):
            return self.getToken(PlSqlParser.COLLECT, 0)

        def INTO(self):
            return self.getToken(PlSqlParser.INTO, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_fetch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch_statement" ):
                listener.enterFetch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch_statement" ):
                listener.exitFetch_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFetch_statement" ):
                return visitor.visitFetch_statement(self)
            else:
                return visitor.visitChildren(self)




    def fetch_statement(self):

        localctx = PlSqlParser.Fetch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_fetch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2441
            self.match(PlSqlParser.FETCH)
            self.state = 2442
            self.cursor_name()
            self.state = 2463
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.INTO]:
                self.state = 2443
                localctx.it1 = self.match(PlSqlParser.INTO)
                self.state = 2444
                self.variable_name()
                self.state = 2449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 2445
                    self.match(PlSqlParser.COMMA)
                    self.state = 2446
                    self.variable_name()
                    self.state = 2451
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [PlSqlParser.BULK]:
                self.state = 2452
                self.match(PlSqlParser.BULK)
                self.state = 2453
                self.match(PlSqlParser.COLLECT)
                self.state = 2454
                self.match(PlSqlParser.INTO)
                self.state = 2455
                self.variable_name()
                self.state = 2460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 2456
                    self.match(PlSqlParser.COMMA)
                    self.state = 2457
                    self.variable_name()
                    self.state = 2462
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Open_for_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(PlSqlParser.OPEN, 0)

        def variable_name(self):
            return self.getTypedRuleContext(PlSqlParser.Variable_nameContext,0)


        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Select_statementContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def using_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Using_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_open_for_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_for_statement" ):
                listener.enterOpen_for_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_for_statement" ):
                listener.exitOpen_for_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_for_statement" ):
                return visitor.visitOpen_for_statement(self)
            else:
                return visitor.visitChildren(self)




    def open_for_statement(self):

        localctx = PlSqlParser.Open_for_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_open_for_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2465
            self.match(PlSqlParser.OPEN)
            self.state = 2466
            self.variable_name()
            self.state = 2467
            self.match(PlSqlParser.FOR)
            self.state = 2470
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.state = 2468
                self.select_statement()
                pass

            elif la_ == 2:
                self.state = 2469
                self.expression(0)
                pass


            self.state = 2473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.USING:
                self.state = 2472
                self.using_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transaction_control_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_transaction_command(self):
            return self.getTypedRuleContext(PlSqlParser.Set_transaction_commandContext,0)


        def set_constraint_command(self):
            return self.getTypedRuleContext(PlSqlParser.Set_constraint_commandContext,0)


        def commit_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Commit_statementContext,0)


        def rollback_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Rollback_statementContext,0)


        def savepoint_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Savepoint_statementContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_transaction_control_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_control_statements" ):
                listener.enterTransaction_control_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_control_statements" ):
                listener.exitTransaction_control_statements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransaction_control_statements" ):
                return visitor.visitTransaction_control_statements(self)
            else:
                return visitor.visitChildren(self)




    def transaction_control_statements(self):

        localctx = PlSqlParser.Transaction_control_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_transaction_control_statements)
        try:
            self.state = 2480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2475
                self.set_transaction_command()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2476
                self.set_constraint_command()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2477
                self.commit_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2478
                self.rollback_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2479
                self.savepoint_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_transaction_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def TRANSACTION(self):
            return self.getToken(PlSqlParser.TRANSACTION, 0)

        def READ(self):
            return self.getToken(PlSqlParser.READ, 0)

        def ISOLATION(self):
            return self.getToken(PlSqlParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(PlSqlParser.LEVEL, 0)

        def USE(self):
            return self.getToken(PlSqlParser.USE, 0)

        def ROLLBACK(self):
            return self.getToken(PlSqlParser.ROLLBACK, 0)

        def SEGMENT(self):
            return self.getToken(PlSqlParser.SEGMENT, 0)

        def rollback_segment_name(self):
            return self.getTypedRuleContext(PlSqlParser.Rollback_segment_nameContext,0)


        def NAME(self):
            return self.getToken(PlSqlParser.NAME, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(PlSqlParser.Quoted_stringContext,0)


        def ONLY(self):
            return self.getToken(PlSqlParser.ONLY, 0)

        def WRITE(self):
            return self.getToken(PlSqlParser.WRITE, 0)

        def SERIALIZABLE(self):
            return self.getToken(PlSqlParser.SERIALIZABLE, 0)

        def COMMITTED(self):
            return self.getToken(PlSqlParser.COMMITTED, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_set_transaction_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_transaction_command" ):
                listener.enterSet_transaction_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_transaction_command" ):
                listener.exitSet_transaction_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_transaction_command" ):
                return visitor.visitSet_transaction_command(self)
            else:
                return visitor.visitChildren(self)




    def set_transaction_command(self):

        localctx = PlSqlParser.Set_transaction_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_set_transaction_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2482
            self.match(PlSqlParser.SET)
            self.state = 2483
            self.match(PlSqlParser.TRANSACTION)
            self.state = 2497
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.READ]:
                self.state = 2484
                self.match(PlSqlParser.READ)
                self.state = 2485
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ONLY or _la==PlSqlParser.WRITE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [PlSqlParser.ISOLATION]:
                self.state = 2486
                self.match(PlSqlParser.ISOLATION)
                self.state = 2487
                self.match(PlSqlParser.LEVEL)
                self.state = 2491
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.SERIALIZABLE]:
                    self.state = 2488
                    self.match(PlSqlParser.SERIALIZABLE)
                    pass
                elif token in [PlSqlParser.READ]:
                    self.state = 2489
                    self.match(PlSqlParser.READ)
                    self.state = 2490
                    self.match(PlSqlParser.COMMITTED)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [PlSqlParser.USE]:
                self.state = 2493
                self.match(PlSqlParser.USE)
                self.state = 2494
                self.match(PlSqlParser.ROLLBACK)
                self.state = 2495
                self.match(PlSqlParser.SEGMENT)
                self.state = 2496
                self.rollback_segment_name()
                pass
            elif token in [PlSqlParser.EOF, PlSqlParser.NAME, PlSqlParser.SAVE, PlSqlParser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 2501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NAME:
                self.state = 2499
                self.match(PlSqlParser.NAME)
                self.state = 2500
                self.quoted_string()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_constraint_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def CONSTRAINT(self):
            return self.getToken(PlSqlParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(PlSqlParser.CONSTRAINTS, 0)

        def IMMEDIATE(self):
            return self.getToken(PlSqlParser.IMMEDIATE, 0)

        def DEFERRED(self):
            return self.getToken(PlSqlParser.DEFERRED, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def constraint_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Constraint_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Constraint_nameContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_set_constraint_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_constraint_command" ):
                listener.enterSet_constraint_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_constraint_command" ):
                listener.exitSet_constraint_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_constraint_command" ):
                return visitor.visitSet_constraint_command(self)
            else:
                return visitor.visitChildren(self)




    def set_constraint_command(self):

        localctx = PlSqlParser.Set_constraint_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_set_constraint_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2503
            self.match(PlSqlParser.SET)
            self.state = 2504
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.CONSTRAINT or _la==PlSqlParser.CONSTRAINTS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2514
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.ALL]:
                self.state = 2505
                self.match(PlSqlParser.ALL)
                pass
            elif token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                self.state = 2506
                self.constraint_name()
                self.state = 2511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 2507
                    self.match(PlSqlParser.COMMA)
                    self.state = 2508
                    self.constraint_name()
                    self.state = 2513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 2516
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.DEFERRED or _la==PlSqlParser.IMMEDIATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Commit_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT(self):
            return self.getToken(PlSqlParser.COMMIT, 0)

        def WORK(self):
            return self.getToken(PlSqlParser.WORK, 0)

        def COMMENT(self):
            return self.getToken(PlSqlParser.COMMENT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def FORCE(self):
            return self.getToken(PlSqlParser.FORCE, 0)

        def write_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Write_clauseContext,0)


        def CORRUPT_XID(self):
            return self.getToken(PlSqlParser.CORRUPT_XID, 0)

        def CORRUPT_XID_ALL(self):
            return self.getToken(PlSqlParser.CORRUPT_XID_ALL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_commit_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_statement" ):
                listener.enterCommit_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_statement" ):
                listener.exitCommit_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommit_statement" ):
                return visitor.visitCommit_statement(self)
            else:
                return visitor.visitChildren(self)




    def commit_statement(self):

        localctx = PlSqlParser.Commit_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_commit_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2518
            self.match(PlSqlParser.COMMIT)
            self.state = 2520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WORK:
                self.state = 2519
                self.match(PlSqlParser.WORK)


            self.state = 2535
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.COMMENT]:
                self.state = 2522
                self.match(PlSqlParser.COMMENT)
                self.state = 2523
                self.expression(0)
                pass
            elif token in [PlSqlParser.FORCE]:
                self.state = 2524
                self.match(PlSqlParser.FORCE)
                self.state = 2533
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                if la_ == 1:
                    self.state = 2525
                    self.match(PlSqlParser.CORRUPT_XID)
                    self.state = 2526
                    self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 2527
                    self.match(PlSqlParser.CORRUPT_XID_ALL)
                    pass

                elif la_ == 3:
                    self.state = 2528
                    self.expression(0)
                    self.state = 2531
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 2529
                        self.match(PlSqlParser.COMMA)
                        self.state = 2530
                        self.expression(0)


                    pass


                pass
            elif token in [PlSqlParser.EOF, PlSqlParser.SAVE, PlSqlParser.WRITE, PlSqlParser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 2538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WRITE:
                self.state = 2537
                self.write_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Write_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(PlSqlParser.WRITE, 0)

        def WAIT(self):
            return self.getToken(PlSqlParser.WAIT, 0)

        def NOWAIT(self):
            return self.getToken(PlSqlParser.NOWAIT, 0)

        def IMMEDIATE(self):
            return self.getToken(PlSqlParser.IMMEDIATE, 0)

        def BATCH(self):
            return self.getToken(PlSqlParser.BATCH, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_write_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_clause" ):
                listener.enterWrite_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_clause" ):
                listener.exitWrite_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWrite_clause" ):
                return visitor.visitWrite_clause(self)
            else:
                return visitor.visitChildren(self)




    def write_clause(self):

        localctx = PlSqlParser.Write_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_write_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2540
            self.match(PlSqlParser.WRITE)
            self.state = 2542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOWAIT or _la==PlSqlParser.WAIT:
                self.state = 2541
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.NOWAIT or _la==PlSqlParser.WAIT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.BATCH or _la==PlSqlParser.IMMEDIATE:
                self.state = 2544
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.BATCH or _la==PlSqlParser.IMMEDIATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rollback_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(PlSqlParser.ROLLBACK, 0)

        def WORK(self):
            return self.getToken(PlSqlParser.WORK, 0)

        def TO(self):
            return self.getToken(PlSqlParser.TO, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(PlSqlParser.Savepoint_nameContext,0)


        def FORCE(self):
            return self.getToken(PlSqlParser.FORCE, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(PlSqlParser.Quoted_stringContext,0)


        def SAVEPOINT(self):
            return self.getToken(PlSqlParser.SAVEPOINT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_rollback_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_statement" ):
                listener.enterRollback_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_statement" ):
                listener.exitRollback_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollback_statement" ):
                return visitor.visitRollback_statement(self)
            else:
                return visitor.visitChildren(self)




    def rollback_statement(self):

        localctx = PlSqlParser.Rollback_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_rollback_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2547
            self.match(PlSqlParser.ROLLBACK)
            self.state = 2549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WORK:
                self.state = 2548
                self.match(PlSqlParser.WORK)


            self.state = 2558
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.TO]:
                self.state = 2551
                self.match(PlSqlParser.TO)
                self.state = 2553
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                if la_ == 1:
                    self.state = 2552
                    self.match(PlSqlParser.SAVEPOINT)


                self.state = 2555
                self.savepoint_name()
                pass
            elif token in [PlSqlParser.FORCE]:
                self.state = 2556
                self.match(PlSqlParser.FORCE)
                self.state = 2557
                self.quoted_string()
                pass
            elif token in [PlSqlParser.EOF, PlSqlParser.SAVE, PlSqlParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Savepoint_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT(self):
            return self.getToken(PlSqlParser.SAVEPOINT, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(PlSqlParser.Savepoint_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_savepoint_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_statement" ):
                listener.enterSavepoint_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_statement" ):
                listener.exitSavepoint_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSavepoint_statement" ):
                return visitor.visitSavepoint_statement(self)
            else:
                return visitor.visitChildren(self)




    def savepoint_statement(self):

        localctx = PlSqlParser.Savepoint_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_savepoint_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2560
            self.match(PlSqlParser.SAVEPOINT)
            self.state = 2561
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Explain_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLAIN(self):
            return self.getToken(PlSqlParser.EXPLAIN, 0)

        def PLAN(self):
            return self.getToken(PlSqlParser.PLAN, 0)

        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Update_statementContext,0)


        def delete_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Insert_statementContext,0)


        def merge_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Merge_statementContext,0)


        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def STATEMENT_ID(self):
            return self.getToken(PlSqlParser.STATEMENT_ID, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(PlSqlParser.Quoted_stringContext,0)


        def INTO(self):
            return self.getToken(PlSqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_explain_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain_statement" ):
                listener.enterExplain_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain_statement" ):
                listener.exitExplain_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplain_statement" ):
                return visitor.visitExplain_statement(self)
            else:
                return visitor.visitChildren(self)




    def explain_statement(self):

        localctx = PlSqlParser.Explain_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_explain_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2563
            self.match(PlSqlParser.EXPLAIN)
            self.state = 2564
            self.match(PlSqlParser.PLAN)
            self.state = 2569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.SET:
                self.state = 2565
                self.match(PlSqlParser.SET)
                self.state = 2566
                self.match(PlSqlParser.STATEMENT_ID)
                self.state = 2567
                self.match(PlSqlParser.EQUALS_OP)
                self.state = 2568
                self.quoted_string()


            self.state = 2573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.INTO:
                self.state = 2571
                self.match(PlSqlParser.INTO)
                self.state = 2572
                self.tableview_name()


            self.state = 2575
            self.match(PlSqlParser.FOR)
            self.state = 2581
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.SELECT, PlSqlParser.WITH, PlSqlParser.LEFT_PAREN]:
                self.state = 2576
                self.select_statement()
                pass
            elif token in [PlSqlParser.UPDATE]:
                self.state = 2577
                self.update_statement()
                pass
            elif token in [PlSqlParser.DELETE]:
                self.state = 2578
                self.delete_statement()
                pass
            elif token in [PlSqlParser.INSERT]:
                self.state = 2579
                self.insert_statement()
                pass
            elif token in [PlSqlParser.MERGE]:
                self.state = 2580
                self.merge_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def subquery_factoring_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Subquery_factoring_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_statement" ):
                return visitor.visitSelect_statement(self)
            else:
                return visitor.visitChildren(self)




    def select_statement(self):

        localctx = PlSqlParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WITH:
                self.state = 2583
                self.subquery_factoring_clause()


            self.state = 2586
            self.subquery(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subquery_factoring_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PlSqlParser.WITH, 0)

        def factoring_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Factoring_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Factoring_elementContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_subquery_factoring_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_factoring_clause" ):
                listener.enterSubquery_factoring_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_factoring_clause" ):
                listener.exitSubquery_factoring_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery_factoring_clause" ):
                return visitor.visitSubquery_factoring_clause(self)
            else:
                return visitor.visitChildren(self)




    def subquery_factoring_clause(self):

        localctx = PlSqlParser.Subquery_factoring_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_subquery_factoring_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2588
            self.match(PlSqlParser.WITH)
            self.state = 2589
            self.factoring_element()
            self.state = 2594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 2590
                self.match(PlSqlParser.COMMA)
                self.state = 2591
                self.factoring_element()
                self.state = 2596
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factoring_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_name(self):
            return self.getTypedRuleContext(PlSqlParser.Query_nameContext,0)


        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def order_by_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Order_by_clauseContext,0)


        def search_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Search_clauseContext,0)


        def cycle_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Cycle_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_factoring_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactoring_element" ):
                listener.enterFactoring_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactoring_element" ):
                listener.exitFactoring_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactoring_element" ):
                return visitor.visitFactoring_element(self)
            else:
                return visitor.visitChildren(self)




    def factoring_element(self):

        localctx = PlSqlParser.Factoring_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_factoring_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2597
            self.query_name()
            self.state = 2609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 2598
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 2599
                self.column_name()
                self.state = 2604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 2600
                    self.match(PlSqlParser.COMMA)
                    self.state = 2601
                    self.column_name()
                    self.state = 2606
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2607
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 2611
            self.match(PlSqlParser.AS)
            self.state = 2612
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 2613
            self.subquery(0)
            self.state = 2615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ORDER:
                self.state = 2614
                self.order_by_clause()


            self.state = 2617
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 2619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.SEARCH:
                self.state = 2618
                self.search_clause()


            self.state = 2622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.CYCLE:
                self.state = 2621
                self.cycle_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Search_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEARCH(self):
            return self.getToken(PlSqlParser.SEARCH, 0)

        def FIRST(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.FIRST)
            else:
                return self.getToken(PlSqlParser.FIRST, i)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def DEPTH(self):
            return self.getToken(PlSqlParser.DEPTH, 0)

        def BREADTH(self):
            return self.getToken(PlSqlParser.BREADTH, 0)

        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ASC)
            else:
                return self.getToken(PlSqlParser.ASC, i)

        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.DESC)
            else:
                return self.getToken(PlSqlParser.DESC, i)

        def NULLS(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.NULLS)
            else:
                return self.getToken(PlSqlParser.NULLS, i)

        def LAST(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.LAST)
            else:
                return self.getToken(PlSqlParser.LAST, i)

        def getRuleIndex(self):
            return PlSqlParser.RULE_search_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_clause" ):
                listener.enterSearch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_clause" ):
                listener.exitSearch_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_clause" ):
                return visitor.visitSearch_clause(self)
            else:
                return visitor.visitChildren(self)




    def search_clause(self):

        localctx = PlSqlParser.Search_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_search_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2624
            self.match(PlSqlParser.SEARCH)
            self.state = 2625
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.BREADTH or _la==PlSqlParser.DEPTH):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2626
            self.match(PlSqlParser.FIRST)
            self.state = 2627
            self.match(PlSqlParser.BY)
            self.state = 2628
            self.column_name()
            self.state = 2630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ASC:
                self.state = 2629
                self.match(PlSqlParser.ASC)


            self.state = 2633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DESC:
                self.state = 2632
                self.match(PlSqlParser.DESC)


            self.state = 2637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.state = 2635
                self.match(PlSqlParser.NULLS)
                self.state = 2636
                self.match(PlSqlParser.FIRST)


            self.state = 2641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NULLS:
                self.state = 2639
                self.match(PlSqlParser.NULLS)
                self.state = 2640
                self.match(PlSqlParser.LAST)


            self.state = 2661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 2643
                self.match(PlSqlParser.COMMA)
                self.state = 2644
                self.column_name()
                self.state = 2646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ASC:
                    self.state = 2645
                    self.match(PlSqlParser.ASC)


                self.state = 2649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.DESC:
                    self.state = 2648
                    self.match(PlSqlParser.DESC)


                self.state = 2653
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
                if la_ == 1:
                    self.state = 2651
                    self.match(PlSqlParser.NULLS)
                    self.state = 2652
                    self.match(PlSqlParser.FIRST)


                self.state = 2657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.NULLS:
                    self.state = 2655
                    self.match(PlSqlParser.NULLS)
                    self.state = 2656
                    self.match(PlSqlParser.LAST)


                self.state = 2663
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2664
            self.match(PlSqlParser.SET)
            self.state = 2665
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cycle_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CYCLE(self):
            return self.getToken(PlSqlParser.CYCLE, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def TO(self):
            return self.getToken(PlSqlParser.TO, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_cycle_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCycle_clause" ):
                listener.enterCycle_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCycle_clause" ):
                listener.exitCycle_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCycle_clause" ):
                return visitor.visitCycle_clause(self)
            else:
                return visitor.visitChildren(self)




    def cycle_clause(self):

        localctx = PlSqlParser.Cycle_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_cycle_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2667
            self.match(PlSqlParser.CYCLE)
            self.state = 2668
            self.column_name()
            self.state = 2673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 2669
                self.match(PlSqlParser.COMMA)
                self.state = 2670
                self.column_name()
                self.state = 2675
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2676
            self.match(PlSqlParser.SET)
            self.state = 2677
            self.column_name()
            self.state = 2678
            self.match(PlSqlParser.TO)
            self.state = 2679
            self.expression(0)
            self.state = 2680
            self.match(PlSqlParser.DEFAULT)
            self.state = 2681
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlSqlParser.RULE_subquery

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SubqueryParenContext(SubqueryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.SubqueryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryParen" ):
                listener.enterSubqueryParen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryParen" ):
                listener.exitSubqueryParen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryParen" ):
                return visitor.visitSubqueryParen(self)
            else:
                return visitor.visitChildren(self)


    class IgnoreSubqueryContext(SubqueryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.SubqueryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query_block(self):
            return self.getTypedRuleContext(PlSqlParser.Query_blockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreSubquery" ):
                listener.enterIgnoreSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreSubquery" ):
                listener.exitIgnoreSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreSubquery" ):
                return visitor.visitIgnoreSubquery(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryCompoundContext(SubqueryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.SubqueryContext
            super().__init__(parser)
            self.left = None # SubqueryContext
            self.op = None # Subquery_operation_partContext
            self.right = None # SubqueryContext
            self.copyFrom(ctx)

        def subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.SubqueryContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.SubqueryContext,i)

        def subquery_operation_part(self):
            return self.getTypedRuleContext(PlSqlParser.Subquery_operation_partContext,0)

        def order_by_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Order_by_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryCompound" ):
                listener.enterSubqueryCompound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryCompound" ):
                listener.exitSubqueryCompound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryCompound" ):
                return visitor.visitSubqueryCompound(self)
            else:
                return visitor.visitChildren(self)



    def subquery(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlSqlParser.SubqueryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 318
        self.enterRecursionRule(localctx, 318, self.RULE_subquery, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2689
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.LEFT_PAREN]:
                localctx = PlSqlParser.SubqueryParenContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2684
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 2685
                self.subquery(0)
                self.state = 2686
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.SELECT]:
                localctx = PlSqlParser.IgnoreSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2688
                self.query_block()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2699
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,290,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlSqlParser.SubqueryCompoundContext(self, PlSqlParser.SubqueryContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_subquery)
                    self.state = 2691
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2692
                    localctx.op = self.subquery_operation_part()
                    self.state = 2693
                    localctx.right = self.subquery(0)
                    self.state = 2695
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
                    if la_ == 1:
                        self.state = 2694
                        self.order_by_clause()

             
                self.state = 2701
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,290,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Subquery_operation_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(PlSqlParser.UNION, 0)

        def INTERSECT(self):
            return self.getToken(PlSqlParser.INTERSECT, 0)

        def EXCEPT(self):
            return self.getToken(PlSqlParser.EXCEPT, 0)

        def MINUS(self):
            return self.getToken(PlSqlParser.MINUS, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_subquery_operation_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_operation_part" ):
                listener.enterSubquery_operation_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_operation_part" ):
                listener.exitSubquery_operation_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery_operation_part" ):
                return visitor.visitSubquery_operation_part(self)
            else:
                return visitor.visitChildren(self)




    def subquery_operation_part(self):

        localctx = PlSqlParser.Subquery_operation_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_subquery_operation_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2702
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.EXCEPT or _la==PlSqlParser.INTERSECT or _la==PlSqlParser.MINUS or _la==PlSqlParser.UNION):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ALL:
                self.state = 2703
                self.match(PlSqlParser.ALL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pref = None # Token
            self._selected_element = None # Selected_elementContext
            self.target_list = list() # of Selected_elementContexts

        def SELECT(self):
            return self.getToken(PlSqlParser.SELECT, 0)

        def from_clause(self):
            return self.getTypedRuleContext(PlSqlParser.From_clauseContext,0)


        def selected_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Selected_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Selected_elementContext,i)


        def into_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Into_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Where_clauseContext,0)


        def hierarchical_query_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Hierarchical_query_clauseContext,0)


        def group_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Group_by_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Group_by_clauseContext,i)


        def having_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Having_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Having_clauseContext,i)


        def model_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Model_clauseContext,0)


        def for_update_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.For_update_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.For_update_clauseContext,i)


        def order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Order_by_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Order_by_clauseContext,i)


        def limit_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Limit_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Limit_clauseContext,i)


        def DISTINCT(self):
            return self.getToken(PlSqlParser.DISTINCT, 0)

        def UNIQUE(self):
            return self.getToken(PlSqlParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_query_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_block" ):
                listener.enterQuery_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_block" ):
                listener.exitQuery_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_block" ):
                return visitor.visitQuery_block(self)
            else:
                return visitor.visitChildren(self)




    def query_block(self):

        localctx = PlSqlParser.Query_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_query_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2706
            self.match(PlSqlParser.SELECT)
            self.state = 2708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.state = 2707
                localctx.pref = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALL or _la==PlSqlParser.DISTINCT or _la==PlSqlParser.UNIQUE):
                    localctx.pref = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2710
            localctx._selected_element = self.selected_element()
            localctx.target_list.append(localctx._selected_element)
            self.state = 2715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 2711
                self.match(PlSqlParser.COMMA)
                self.state = 2712
                localctx._selected_element = self.selected_element()
                localctx.target_list.append(localctx._selected_element)
                self.state = 2717
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.BULK or _la==PlSqlParser.INTO:
                self.state = 2718
                self.into_clause()


            self.state = 2721
            self.from_clause()
            self.state = 2723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 2722
                self.where_clause()


            self.state = 2726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.state = 2725
                self.hierarchical_query_clause()


            self.state = 2732
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,298,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2730
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.GROUP]:
                        self.state = 2728
                        self.group_by_clause()
                        pass
                    elif token in [PlSqlParser.HAVING]:
                        self.state = 2729
                        self.having_clause()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2734
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,298,self._ctx)

            self.state = 2736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.state = 2735
                self.model_clause()


            self.state = 2743
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,301,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2741
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.FOR]:
                        self.state = 2738
                        self.for_update_clause()
                        pass
                    elif token in [PlSqlParser.ORDER]:
                        self.state = 2739
                        self.order_by_clause()
                        pass
                    elif token in [PlSqlParser.LIMIT]:
                        self.state = 2740
                        self.limit_clause()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2745
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,301,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selected_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlSqlParser.RULE_selected_element

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Alias_exprContext(Selected_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.Selected_elementContext
            super().__init__(parser)
            self.expr = None # ExpressionContext
            self.alias = None # Column_aliasContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)

        def column_alias(self):
            return self.getTypedRuleContext(PlSqlParser.Column_aliasContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias_expr" ):
                listener.enterAlias_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias_expr" ):
                listener.exitAlias_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias_expr" ):
                return visitor.visitAlias_expr(self)
            else:
                return visitor.visitChildren(self)


    class IgnoreTableview_nameContext(Selected_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.Selected_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreTableview_name" ):
                listener.enterIgnoreTableview_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreTableview_name" ):
                listener.exitIgnoreTableview_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreTableview_name" ):
                return visitor.visitIgnoreTableview_name(self)
            else:
                return visitor.visitChildren(self)


    class StarTableContext(Selected_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.Selected_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dot_id(self):
            return self.getTypedRuleContext(PlSqlParser.Dot_idContext,0)

        def star(self):
            return self.getTypedRuleContext(PlSqlParser.StarContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStarTable" ):
                listener.enterStarTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStarTable" ):
                listener.exitStarTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStarTable" ):
                return visitor.visitStarTable(self)
            else:
                return visitor.visitChildren(self)


    class Star1Context(Selected_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.Selected_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def star(self):
            return self.getTypedRuleContext(PlSqlParser.StarContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar1" ):
                listener.enterStar1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar1" ):
                listener.exitStar1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar1" ):
                return visitor.visitStar1(self)
            else:
                return visitor.visitChildren(self)



    def selected_element(self):

        localctx = PlSqlParser.Selected_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_selected_element)
        try:
            self.state = 2756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
            if la_ == 1:
                localctx = PlSqlParser.Star1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2746
                self.star()
                pass

            elif la_ == 2:
                localctx = PlSqlParser.StarTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2747
                self.dot_id()
                self.state = 2748
                self.match(PlSqlParser.PERIOD)
                self.state = 2749
                self.star()
                pass

            elif la_ == 3:
                localctx = PlSqlParser.IgnoreTableview_nameContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2751
                self.tableview_name()
                pass

            elif la_ == 4:
                localctx = PlSqlParser.Alias_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2752
                localctx.expr = self.expression(0)
                self.state = 2754
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
                if la_ == 1:
                    self.state = 2753
                    localctx.alias = self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class From_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PlSqlParser.FROM, 0)

        def table_ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Table_refContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Table_refContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_clause" ):
                return visitor.visitFrom_clause(self)
            else:
                return visitor.visitChildren(self)




    def from_clause(self):

        localctx = PlSqlParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2758
            self.match(PlSqlParser.FROM)
            self.state = 2759
            self.table_ref(0)
            self.state = 2764
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,304,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2760
                    self.match(PlSqlParser.COMMA)
                    self.state = 2761
                    self.table_ref(0) 
                self.state = 2766
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,304,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_ref_pivotContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_ref(self):
            return self.getTypedRuleContext(PlSqlParser.Table_refContext,0)


        def pivot_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Pivot_clauseContext,0)


        def unpivot_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Unpivot_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_table_ref_pivot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref_pivot" ):
                listener.enterTable_ref_pivot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref_pivot" ):
                listener.exitTable_ref_pivot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_ref_pivot" ):
                return visitor.visitTable_ref_pivot(self)
            else:
                return visitor.visitChildren(self)




    def table_ref_pivot(self):

        localctx = PlSqlParser.Table_ref_pivotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_table_ref_pivot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2767
            self.table_ref(0)
            self.state = 2770
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.PIVOT]:
                self.state = 2768
                self.pivot_clause()
                pass
            elif token in [PlSqlParser.UNPIVOT]:
                self.state = 2769
                self.unpivot_clause()
                pass
            elif token in [PlSqlParser.EOF]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlSqlParser.RULE_table_ref

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JoinExprContext(Table_refContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.Table_refContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_ref(self):
            return self.getTypedRuleContext(PlSqlParser.Table_refContext,0)

        def join_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Join_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinExpr" ):
                listener.enterJoinExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinExpr" ):
                listener.exitJoinExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExpr" ):
                return visitor.visitJoinExpr(self)
            else:
                return visitor.visitChildren(self)


    class TableRefSimpleContext(Table_refContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.Table_refContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_ref_aux(self):
            return self.getTypedRuleContext(PlSqlParser.Table_ref_auxContext,0)

        def flashback_query_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Flashback_query_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Flashback_query_clauseContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRefSimple" ):
                listener.enterTableRefSimple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRefSimple" ):
                listener.exitTableRefSimple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableRefSimple" ):
                return visitor.visitTableRefSimple(self)
            else:
                return visitor.visitChildren(self)


    class TableRefAuxContext(Table_refContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.Table_refContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_ref_aux(self):
            return self.getTypedRuleContext(PlSqlParser.Table_ref_auxContext,0)

        def flashback_query_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Flashback_query_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Flashback_query_clauseContext,i)

        def table_alias(self):
            return self.getTypedRuleContext(PlSqlParser.Table_aliasContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRefAux" ):
                listener.enterTableRefAux(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRefAux" ):
                listener.exitTableRefAux(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableRefAux" ):
                return visitor.visitTableRefAux(self)
            else:
                return visitor.visitChildren(self)



    def table_ref(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlSqlParser.Table_refContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 330
        self.enterRecursionRule(localctx, 330, self.RULE_table_ref, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                localctx = PlSqlParser.TableRefSimpleContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2773
                self.table_ref_aux()
                self.state = 2777
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,306,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2774
                        self.flashback_query_clause() 
                    self.state = 2779
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,306,self._ctx)

                pass

            elif la_ == 2:
                localctx = PlSqlParser.TableRefAuxContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2780
                self.table_ref_aux()
                self.state = 2784
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,307,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2781
                        self.flashback_query_clause() 
                    self.state = 2786
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,307,self._ctx)

                self.state = 2788
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
                if la_ == 1:
                    self.state = 2787
                    self.table_alias()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2796
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,310,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlSqlParser.JoinExprContext(self, PlSqlParser.Table_refContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_table_ref)
                    self.state = 2792
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 2793
                    self.join_clause() 
                self.state = 2798
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,310,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Table_ref_auxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_table_expression_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Dml_table_expression_clauseContext,0)


        def pivot_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Pivot_clauseContext,0)


        def unpivot_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Unpivot_clauseContext,0)


        def ONLY(self):
            return self.getToken(PlSqlParser.ONLY, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_table_ref_aux

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref_aux" ):
                listener.enterTable_ref_aux(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref_aux" ):
                listener.exitTable_ref_aux(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_ref_aux" ):
                return visitor.visitTable_ref_aux(self)
            else:
                return visitor.visitChildren(self)




    def table_ref_aux(self):

        localctx = PlSqlParser.Table_ref_auxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_table_ref_aux)
        try:
            self.state = 2809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2799
                self.dml_table_expression_clause()
                self.state = 2802
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
                if la_ == 1:
                    self.state = 2800
                    self.pivot_clause()

                elif la_ == 2:
                    self.state = 2801
                    self.unpivot_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2804
                self.match(PlSqlParser.ONLY)
                self.state = 2805
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 2806
                self.dml_table_expression_clause()
                self.state = 2807
                self.match(PlSqlParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(PlSqlParser.JOIN, 0)

        def table_ref(self):
            return self.getTypedRuleContext(PlSqlParser.Table_refContext,0)


        def query_partition_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Query_partition_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Query_partition_clauseContext,i)


        def join_type(self):
            return self.getTypedRuleContext(PlSqlParser.Join_typeContext,0)


        def join_on_part(self):
            return self.getTypedRuleContext(PlSqlParser.Join_on_partContext,0)


        def join_using_part(self):
            return self.getTypedRuleContext(PlSqlParser.Join_using_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_clause" ):
                return visitor.visitJoin_clause(self)
            else:
                return visitor.visitChildren(self)




    def join_clause(self):

        localctx = PlSqlParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PARTITION:
                self.state = 2811
                self.query_partition_clause()


            self.state = 2815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.CROSS or ((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & ((1 << (PlSqlParser.FULL - 154)) | (1 << (PlSqlParser.INNER - 154)) | (1 << (PlSqlParser.LEFT - 154)))) != 0) or _la==PlSqlParser.NATURAL or _la==PlSqlParser.RIGHT:
                self.state = 2814
                self.join_type()


            self.state = 2817
            self.match(PlSqlParser.JOIN)
            self.state = 2818
            self.table_ref(0)
            self.state = 2820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                self.state = 2819
                self.query_partition_clause()


            self.state = 2824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                self.state = 2822
                self.join_on_part()

            elif la_ == 2:
                self.state = 2823
                self.join_using_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_on_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_join_on_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_on_part" ):
                listener.enterJoin_on_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_on_part" ):
                listener.exitJoin_on_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_on_part" ):
                return visitor.visitJoin_on_part(self)
            else:
                return visitor.visitChildren(self)




    def join_on_part(self):

        localctx = PlSqlParser.Join_on_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_join_on_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2826
            self.match(PlSqlParser.ON)
            self.state = 2827
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_using_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_join_using_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_using_part" ):
                listener.enterJoin_using_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_using_part" ):
                listener.exitJoin_using_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_using_part" ):
                return visitor.visitJoin_using_part(self)
            else:
                return visitor.visitChildren(self)




    def join_using_part(self):

        localctx = PlSqlParser.Join_using_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_join_using_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2829
            self.match(PlSqlParser.USING)
            self.state = 2830
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 2831
            self.column_name()
            self.state = 2836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 2832
                self.match(PlSqlParser.COMMA)
                self.state = 2833
                self.column_name()
                self.state = 2838
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2839
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(PlSqlParser.CROSS, 0)

        def INNER(self):
            return self.getToken(PlSqlParser.INNER, 0)

        def NATURAL(self):
            return self.getToken(PlSqlParser.NATURAL, 0)

        def FULL(self):
            return self.getToken(PlSqlParser.FULL, 0)

        def LEFT(self):
            return self.getToken(PlSqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(PlSqlParser.RIGHT, 0)

        def OUTER(self):
            return self.getToken(PlSqlParser.OUTER, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_type" ):
                listener.enterJoin_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_type" ):
                listener.exitJoin_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_type" ):
                return visitor.visitJoin_type(self)
            else:
                return visitor.visitChildren(self)




    def join_type(self):

        localctx = PlSqlParser.Join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_join_type)
        self._la = 0 # Token type
        try:
            self.state = 2852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.CROSS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2841
                self.match(PlSqlParser.CROSS)
                pass
            elif token in [PlSqlParser.FULL, PlSqlParser.INNER, PlSqlParser.LEFT, PlSqlParser.NATURAL, PlSqlParser.RIGHT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.NATURAL:
                    self.state = 2842
                    self.match(PlSqlParser.NATURAL)


                self.state = 2850
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.INNER]:
                    self.state = 2845
                    self.match(PlSqlParser.INNER)
                    pass
                elif token in [PlSqlParser.FULL, PlSqlParser.LEFT, PlSqlParser.RIGHT]:
                    self.state = 2846
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.FULL or _la==PlSqlParser.LEFT or _la==PlSqlParser.RIGHT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2848
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.OUTER:
                        self.state = 2847
                        self.match(PlSqlParser.OUTER)


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_partition_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(PlSqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(PlSqlParser.Expression_listContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_query_partition_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_partition_clause" ):
                listener.enterQuery_partition_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_partition_clause" ):
                listener.exitQuery_partition_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_partition_clause" ):
                return visitor.visitQuery_partition_clause(self)
            else:
                return visitor.visitChildren(self)




    def query_partition_clause(self):

        localctx = PlSqlParser.Query_partition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_query_partition_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2854
            self.match(PlSqlParser.PARTITION)
            self.state = 2855
            self.match(PlSqlParser.BY)
            self.state = 2869
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
            if la_ == 1:
                self.state = 2856
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 2857
                self.subquery(0)
                self.state = 2858
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 2860
                self.expression_list()
                pass

            elif la_ == 3:
                self.state = 2861
                self.expression(0)
                self.state = 2866
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,322,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2862
                        self.match(PlSqlParser.COMMA)
                        self.state = 2863
                        self.expression(0) 
                    self.state = 2868
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,322,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flashback_query_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSIONS(self):
            return self.getToken(PlSqlParser.VERSIONS, 0)

        def BETWEEN(self):
            return self.getToken(PlSqlParser.BETWEEN, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def SCN(self):
            return self.getToken(PlSqlParser.SCN, 0)

        def TIMESTAMP(self):
            return self.getToken(PlSqlParser.TIMESTAMP, 0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def SNAPSHOT(self):
            return self.getToken(PlSqlParser.SNAPSHOT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_flashback_query_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlashback_query_clause" ):
                listener.enterFlashback_query_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlashback_query_clause" ):
                listener.exitFlashback_query_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlashback_query_clause" ):
                return visitor.visitFlashback_query_clause(self)
            else:
                return visitor.visitChildren(self)




    def flashback_query_clause(self):

        localctx = PlSqlParser.Flashback_query_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_flashback_query_clause)
        self._la = 0 # Token type
        try:
            self.state = 2879
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.VERSIONS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2871
                self.match(PlSqlParser.VERSIONS)
                self.state = 2872
                self.match(PlSqlParser.BETWEEN)
                self.state = 2873
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.SCN or _la==PlSqlParser.TIMESTAMP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2874
                self.expression(0)
                pass
            elif token in [PlSqlParser.AS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2875
                self.match(PlSqlParser.AS)
                self.state = 2876
                self.match(PlSqlParser.OF)
                self.state = 2877
                _la = self._input.LA(1)
                if not(((((_la - 332)) & ~0x3f) == 0 and ((1 << (_la - 332)) & ((1 << (PlSqlParser.SCN - 332)) | (1 << (PlSqlParser.SNAPSHOT - 332)) | (1 << (PlSqlParser.TIMESTAMP - 332)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2878
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIVOT(self):
            return self.getToken(PlSqlParser.PIVOT, 0)

        def pivot_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Pivot_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Pivot_elementContext,i)


        def pivot_for_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Pivot_for_clauseContext,0)


        def pivot_in_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Pivot_in_clauseContext,0)


        def XML(self):
            return self.getToken(PlSqlParser.XML, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_pivot_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_clause" ):
                listener.enterPivot_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_clause" ):
                listener.exitPivot_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_clause" ):
                return visitor.visitPivot_clause(self)
            else:
                return visitor.visitChildren(self)




    def pivot_clause(self):

        localctx = PlSqlParser.Pivot_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_pivot_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2881
            self.match(PlSqlParser.PIVOT)
            self.state = 2883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.XML:
                self.state = 2882
                self.match(PlSqlParser.XML)


            self.state = 2885
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 2886
            self.pivot_element()
            self.state = 2891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 2887
                self.match(PlSqlParser.COMMA)
                self.state = 2888
                self.pivot_element()
                self.state = 2893
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2894
            self.pivot_for_clause()
            self.state = 2895
            self.pivot_in_clause()
            self.state = 2896
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function_name(self):
            return self.getTypedRuleContext(PlSqlParser.Aggregate_function_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(PlSqlParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_pivot_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_element" ):
                listener.enterPivot_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_element" ):
                listener.exitPivot_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_element" ):
                return visitor.visitPivot_element(self)
            else:
                return visitor.visitChildren(self)




    def pivot_element(self):

        localctx = PlSqlParser.Pivot_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_pivot_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2898
            self.aggregate_function_name()
            self.state = 2899
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 2900
            self.expression(0)
            self.state = 2901
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 2903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.AS) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 448)) | (1 << (PlSqlParser.CHAR_STRING - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 2902
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_for_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_pivot_for_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_for_clause" ):
                listener.enterPivot_for_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_for_clause" ):
                listener.exitPivot_for_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_for_clause" ):
                return visitor.visitPivot_for_clause(self)
            else:
                return visitor.visitChildren(self)




    def pivot_for_clause(self):

        localctx = PlSqlParser.Pivot_for_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_pivot_for_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2905
            self.match(PlSqlParser.FOR)
            self.state = 2918
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                self.state = 2906
                self.column_name()
                pass
            elif token in [PlSqlParser.LEFT_PAREN]:
                self.state = 2907
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 2908
                self.column_name()
                self.state = 2913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 2909
                    self.match(PlSqlParser.COMMA)
                    self.state = 2910
                    self.column_name()
                    self.state = 2915
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2916
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_in_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def ANY(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ANY)
            else:
                return self.getToken(PlSqlParser.ANY, i)

        def pivot_in_clause_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Pivot_in_clause_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Pivot_in_clause_elementContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_pivot_in_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_in_clause" ):
                listener.enterPivot_in_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_in_clause" ):
                listener.exitPivot_in_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_in_clause" ):
                return visitor.visitPivot_in_clause(self)
            else:
                return visitor.visitChildren(self)




    def pivot_in_clause(self):

        localctx = PlSqlParser.Pivot_in_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_pivot_in_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2920
            self.match(PlSqlParser.IN)
            self.state = 2921
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 2939
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
            if la_ == 1:
                self.state = 2922
                self.subquery(0)
                pass

            elif la_ == 2:
                self.state = 2923
                self.match(PlSqlParser.ANY)
                self.state = 2928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 2924
                    self.match(PlSqlParser.COMMA)
                    self.state = 2925
                    self.match(PlSqlParser.ANY)
                    self.state = 2930
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2931
                self.pivot_in_clause_element()
                self.state = 2936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 2932
                    self.match(PlSqlParser.COMMA)
                    self.state = 2933
                    self.pivot_in_clause_element()
                    self.state = 2938
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2941
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_in_clause_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pivot_in_clause_elements(self):
            return self.getTypedRuleContext(PlSqlParser.Pivot_in_clause_elementsContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(PlSqlParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_pivot_in_clause_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_in_clause_element" ):
                listener.enterPivot_in_clause_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_in_clause_element" ):
                listener.exitPivot_in_clause_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_in_clause_element" ):
                return visitor.visitPivot_in_clause_element(self)
            else:
                return visitor.visitChildren(self)




    def pivot_in_clause_element(self):

        localctx = PlSqlParser.Pivot_in_clause_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_pivot_in_clause_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2943
            self.pivot_in_clause_elements()
            self.state = 2945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.AS) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 448)) | (1 << (PlSqlParser.CHAR_STRING - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 2944
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_in_clause_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(PlSqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_pivot_in_clause_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_in_clause_elements" ):
                listener.enterPivot_in_clause_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_in_clause_elements" ):
                listener.exitPivot_in_clause_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_in_clause_elements" ):
                return visitor.visitPivot_in_clause_elements(self)
            else:
                return visitor.visitChildren(self)




    def pivot_in_clause_elements(self):

        localctx = PlSqlParser.Pivot_in_clause_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_pivot_in_clause_elements)
        try:
            self.state = 2949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2947
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2948
                self.expression_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unpivot_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNPIVOT(self):
            return self.getToken(PlSqlParser.UNPIVOT, 0)

        def pivot_for_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Pivot_for_clauseContext,0)


        def unpivot_in_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Unpivot_in_clauseContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def NULLS(self):
            return self.getToken(PlSqlParser.NULLS, 0)

        def INCLUDE(self):
            return self.getToken(PlSqlParser.INCLUDE, 0)

        def EXCLUDE(self):
            return self.getToken(PlSqlParser.EXCLUDE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_unpivot_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_clause" ):
                listener.enterUnpivot_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_clause" ):
                listener.exitUnpivot_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivot_clause" ):
                return visitor.visitUnpivot_clause(self)
            else:
                return visitor.visitChildren(self)




    def unpivot_clause(self):

        localctx = PlSqlParser.Unpivot_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_unpivot_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2951
            self.match(PlSqlParser.UNPIVOT)
            self.state = 2954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.EXCLUDE or _la==PlSqlParser.INCLUDE:
                self.state = 2952
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.EXCLUDE or _la==PlSqlParser.INCLUDE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2953
                self.match(PlSqlParser.NULLS)


            self.state = 2956
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 2969
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                self.state = 2957
                self.column_name()
                pass
            elif token in [PlSqlParser.LEFT_PAREN]:
                self.state = 2958
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 2959
                self.column_name()
                self.state = 2964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 2960
                    self.match(PlSqlParser.COMMA)
                    self.state = 2961
                    self.column_name()
                    self.state = 2966
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2967
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2971
            self.pivot_for_clause()
            self.state = 2972
            self.unpivot_in_clause()
            self.state = 2973
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unpivot_in_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def unpivot_in_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Unpivot_in_elementsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Unpivot_in_elementsContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_unpivot_in_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_in_clause" ):
                listener.enterUnpivot_in_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_in_clause" ):
                listener.exitUnpivot_in_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivot_in_clause" ):
                return visitor.visitUnpivot_in_clause(self)
            else:
                return visitor.visitChildren(self)




    def unpivot_in_clause(self):

        localctx = PlSqlParser.Unpivot_in_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_unpivot_in_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2975
            self.match(PlSqlParser.IN)
            self.state = 2976
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 2977
            self.unpivot_in_elements()
            self.state = 2982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 2978
                self.match(PlSqlParser.COMMA)
                self.state = 2979
                self.unpivot_in_elements()
                self.state = 2984
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2985
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unpivot_in_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ConstantContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_unpivot_in_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_in_elements" ):
                listener.enterUnpivot_in_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_in_elements" ):
                listener.exitUnpivot_in_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivot_in_elements" ):
                return visitor.visitUnpivot_in_elements(self)
            else:
                return visitor.visitChildren(self)




    def unpivot_in_elements(self):

        localctx = PlSqlParser.Unpivot_in_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_unpivot_in_elements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2999
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                self.state = 2987
                self.column_name()
                pass
            elif token in [PlSqlParser.LEFT_PAREN]:
                self.state = 2988
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 2989
                self.column_name()
                self.state = 2994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 2990
                    self.match(PlSqlParser.COMMA)
                    self.state = 2991
                    self.column_name()
                    self.state = 2996
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2997
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AS:
                self.state = 3001
                self.match(PlSqlParser.AS)
                self.state = 3014
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.DATE, PlSqlParser.DBTIMEZONE, PlSqlParser.DEFAULT, PlSqlParser.FALSE, PlSqlParser.INTERVAL, PlSqlParser.MAXVALUE, PlSqlParser.MINVALUE, PlSqlParser.NULL, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.TIMESTAMP, PlSqlParser.TRUE, PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT, PlSqlParser.CHAR_STRING]:
                    self.state = 3002
                    self.constant()
                    pass
                elif token in [PlSqlParser.LEFT_PAREN]:
                    self.state = 3003
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 3004
                    self.constant()
                    self.state = 3009
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PlSqlParser.COMMA:
                        self.state = 3005
                        self.match(PlSqlParser.COMMA)
                        self.state = 3006
                        self.constant()
                        self.state = 3011
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3012
                    self.match(PlSqlParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Hierarchical_query_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT(self):
            return self.getToken(PlSqlParser.CONNECT, 0)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def NOCYCLE(self):
            return self.getToken(PlSqlParser.NOCYCLE, 0)

        def start_part(self):
            return self.getTypedRuleContext(PlSqlParser.Start_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_hierarchical_query_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHierarchical_query_clause" ):
                listener.enterHierarchical_query_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHierarchical_query_clause" ):
                listener.exitHierarchical_query_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHierarchical_query_clause" ):
                return visitor.visitHierarchical_query_clause(self)
            else:
                return visitor.visitChildren(self)




    def hierarchical_query_clause(self):

        localctx = PlSqlParser.Hierarchical_query_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_hierarchical_query_clause)
        try:
            self.state = 3035
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.CONNECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3018
                self.match(PlSqlParser.CONNECT)
                self.state = 3019
                self.match(PlSqlParser.BY)
                self.state = 3021
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
                if la_ == 1:
                    self.state = 3020
                    self.match(PlSqlParser.NOCYCLE)


                self.state = 3023
                self.condition()
                self.state = 3025
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
                if la_ == 1:
                    self.state = 3024
                    self.start_part()


                pass
            elif token in [PlSqlParser.START]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3027
                self.start_part()
                self.state = 3028
                self.match(PlSqlParser.CONNECT)
                self.state = 3029
                self.match(PlSqlParser.BY)
                self.state = 3031
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
                if la_ == 1:
                    self.state = 3030
                    self.match(PlSqlParser.NOCYCLE)


                self.state = 3033
                self.condition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Start_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(PlSqlParser.START, 0)

        def WITH(self):
            return self.getToken(PlSqlParser.WITH, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_start_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_part" ):
                listener.enterStart_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_part" ):
                listener.exitStart_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStart_part" ):
                return visitor.visitStart_part(self)
            else:
                return visitor.visitChildren(self)




    def start_part(self):

        localctx = PlSqlParser.Start_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_start_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3037
            self.match(PlSqlParser.START)
            self.state = 3038
            self.match(PlSqlParser.WITH)
            self.state = 3039
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(PlSqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def group_by_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Group_by_elementsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Group_by_elementsContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_clause" ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_clause" ):
                listener.exitGroup_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_clause" ):
                return visitor.visitGroup_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def group_by_clause(self):

        localctx = PlSqlParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_group_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3041
            self.match(PlSqlParser.GROUP)
            self.state = 3042
            self.match(PlSqlParser.BY)
            self.state = 3043
            self.group_by_elements()
            self.state = 3048
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,348,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3044
                    self.match(PlSqlParser.COMMA)
                    self.state = 3045
                    self.group_by_elements() 
                self.state = 3050
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,348,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def grouping_sets_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Grouping_sets_clauseContext,0)


        def rollup_cube_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Rollup_cube_clauseContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_group_by_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_elements" ):
                listener.enterGroup_by_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_elements" ):
                listener.exitGroup_by_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_elements" ):
                return visitor.visitGroup_by_elements(self)
            else:
                return visitor.visitChildren(self)




    def group_by_elements(self):

        localctx = PlSqlParser.Group_by_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_group_by_elements)
        try:
            self.state = 3054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3051
                self.grouping_sets_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3052
                self.rollup_cube_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3053
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rollup_cube_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def grouping_sets_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Grouping_sets_elementsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Grouping_sets_elementsContext,i)


        def ROLLUP(self):
            return self.getToken(PlSqlParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(PlSqlParser.CUBE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_rollup_cube_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup_cube_clause" ):
                listener.enterRollup_cube_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup_cube_clause" ):
                listener.exitRollup_cube_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollup_cube_clause" ):
                return visitor.visitRollup_cube_clause(self)
            else:
                return visitor.visitChildren(self)




    def rollup_cube_clause(self):

        localctx = PlSqlParser.Rollup_cube_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_rollup_cube_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3056
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.CUBE or _la==PlSqlParser.ROLLUP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3057
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 3058
            self.grouping_sets_elements()
            self.state = 3063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 3059
                self.match(PlSqlParser.COMMA)
                self.state = 3060
                self.grouping_sets_elements()
                self.state = 3065
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3066
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grouping_sets_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUPING(self):
            return self.getToken(PlSqlParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(PlSqlParser.SETS, 0)

        def grouping_sets_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Grouping_sets_elementsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Grouping_sets_elementsContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_grouping_sets_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_clause" ):
                listener.enterGrouping_sets_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_clause" ):
                listener.exitGrouping_sets_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrouping_sets_clause" ):
                return visitor.visitGrouping_sets_clause(self)
            else:
                return visitor.visitChildren(self)




    def grouping_sets_clause(self):

        localctx = PlSqlParser.Grouping_sets_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_grouping_sets_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3068
            self.match(PlSqlParser.GROUPING)
            self.state = 3069
            self.match(PlSqlParser.SETS)
            self.state = 3070
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 3071
            self.grouping_sets_elements()
            self.state = 3076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 3072
                self.match(PlSqlParser.COMMA)
                self.state = 3073
                self.grouping_sets_elements()
                self.state = 3078
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3079
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grouping_sets_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rollup_cube_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Rollup_cube_clauseContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(PlSqlParser.Expression_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_grouping_sets_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_elements" ):
                listener.enterGrouping_sets_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_elements" ):
                listener.exitGrouping_sets_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrouping_sets_elements" ):
                return visitor.visitGrouping_sets_elements(self)
            else:
                return visitor.visitChildren(self)




    def grouping_sets_elements(self):

        localctx = PlSqlParser.Grouping_sets_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_grouping_sets_elements)
        try:
            self.state = 3084
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3081
                self.rollup_cube_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3082
                self.expression_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3083
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Having_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(PlSqlParser.HAVING, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHaving_clause" ):
                return visitor.visitHaving_clause(self)
            else:
                return visitor.visitChildren(self)




    def having_clause(self):

        localctx = PlSqlParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3086
            self.match(PlSqlParser.HAVING)
            self.state = 3087
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODEL(self):
            return self.getToken(PlSqlParser.MODEL, 0)

        def main_model(self):
            return self.getTypedRuleContext(PlSqlParser.Main_modelContext,0)


        def cell_reference_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Cell_reference_optionsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Cell_reference_optionsContext,i)


        def return_rows_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Return_rows_clauseContext,0)


        def reference_model(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Reference_modelContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Reference_modelContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_model_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_clause" ):
                listener.enterModel_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_clause" ):
                listener.exitModel_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_clause" ):
                return visitor.visitModel_clause(self)
            else:
                return visitor.visitChildren(self)




    def model_clause(self):

        localctx = PlSqlParser.Model_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_model_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3089
            self.match(PlSqlParser.MODEL)
            self.state = 3093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.IGNORE or _la==PlSqlParser.KEEP or _la==PlSqlParser.UNIQUE:
                self.state = 3090
                self.cell_reference_options()
                self.state = 3095
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.RETURN:
                self.state = 3096
                self.return_rows_clause()


            self.state = 3102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.REFERENCE:
                self.state = 3099
                self.reference_model()
                self.state = 3104
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3105
            self.main_model()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cell_reference_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAV(self):
            return self.getToken(PlSqlParser.NAV, 0)

        def IGNORE(self):
            return self.getToken(PlSqlParser.IGNORE, 0)

        def KEEP(self):
            return self.getToken(PlSqlParser.KEEP, 0)

        def UNIQUE(self):
            return self.getToken(PlSqlParser.UNIQUE, 0)

        def DIMENSION(self):
            return self.getToken(PlSqlParser.DIMENSION, 0)

        def SINGLE(self):
            return self.getToken(PlSqlParser.SINGLE, 0)

        def REFERENCE(self):
            return self.getToken(PlSqlParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_cell_reference_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCell_reference_options" ):
                listener.enterCell_reference_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCell_reference_options" ):
                listener.exitCell_reference_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCell_reference_options" ):
                return visitor.visitCell_reference_options(self)
            else:
                return visitor.visitChildren(self)




    def cell_reference_options(self):

        localctx = PlSqlParser.Cell_reference_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_cell_reference_options)
        self._la = 0 # Token type
        try:
            self.state = 3115
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.IGNORE, PlSqlParser.KEEP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3107
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.IGNORE or _la==PlSqlParser.KEEP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3108
                self.match(PlSqlParser.NAV)
                pass
            elif token in [PlSqlParser.UNIQUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3109
                self.match(PlSqlParser.UNIQUE)
                self.state = 3113
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.DIMENSION]:
                    self.state = 3110
                    self.match(PlSqlParser.DIMENSION)
                    pass
                elif token in [PlSqlParser.SINGLE]:
                    self.state = 3111
                    self.match(PlSqlParser.SINGLE)
                    self.state = 3112
                    self.match(PlSqlParser.REFERENCE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_rows_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def ROWS(self):
            return self.getToken(PlSqlParser.ROWS, 0)

        def UPDATED(self):
            return self.getToken(PlSqlParser.UPDATED, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_return_rows_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_rows_clause" ):
                listener.enterReturn_rows_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_rows_clause" ):
                listener.exitReturn_rows_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_rows_clause" ):
                return visitor.visitReturn_rows_clause(self)
            else:
                return visitor.visitChildren(self)




    def return_rows_clause(self):

        localctx = PlSqlParser.Return_rows_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_return_rows_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3117
            self.match(PlSqlParser.RETURN)
            self.state = 3118
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.ALL or _la==PlSqlParser.UPDATED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3119
            self.match(PlSqlParser.ROWS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reference_modelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PlSqlParser.REFERENCE, 0)

        def reference_model_name(self):
            return self.getTypedRuleContext(PlSqlParser.Reference_model_nameContext,0)


        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def model_column_clauses(self):
            return self.getTypedRuleContext(PlSqlParser.Model_column_clausesContext,0)


        def cell_reference_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Cell_reference_optionsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Cell_reference_optionsContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_reference_model

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_model" ):
                listener.enterReference_model(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_model" ):
                listener.exitReference_model(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReference_model" ):
                return visitor.visitReference_model(self)
            else:
                return visitor.visitChildren(self)




    def reference_model(self):

        localctx = PlSqlParser.Reference_modelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_reference_model)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3121
            self.match(PlSqlParser.REFERENCE)
            self.state = 3122
            self.reference_model_name()
            self.state = 3123
            self.match(PlSqlParser.ON)
            self.state = 3124
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 3125
            self.subquery(0)
            self.state = 3126
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 3127
            self.model_column_clauses()
            self.state = 3131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.IGNORE or _la==PlSqlParser.KEEP or _la==PlSqlParser.UNIQUE:
                self.state = 3128
                self.cell_reference_options()
                self.state = 3133
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Main_modelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_column_clauses(self):
            return self.getTypedRuleContext(PlSqlParser.Model_column_clausesContext,0)


        def model_rules_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Model_rules_clauseContext,0)


        def MAIN(self):
            return self.getToken(PlSqlParser.MAIN, 0)

        def main_model_name(self):
            return self.getTypedRuleContext(PlSqlParser.Main_model_nameContext,0)


        def cell_reference_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Cell_reference_optionsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Cell_reference_optionsContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_main_model

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain_model" ):
                listener.enterMain_model(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain_model" ):
                listener.exitMain_model(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMain_model" ):
                return visitor.visitMain_model(self)
            else:
                return visitor.visitChildren(self)




    def main_model(self):

        localctx = PlSqlParser.Main_modelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_main_model)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.MAIN:
                self.state = 3134
                self.match(PlSqlParser.MAIN)
                self.state = 3135
                self.main_model_name()


            self.state = 3138
            self.model_column_clauses()
            self.state = 3142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.IGNORE or _la==PlSqlParser.KEEP or _la==PlSqlParser.UNIQUE:
                self.state = 3139
                self.cell_reference_options()
                self.state = 3144
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3145
            self.model_rules_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_column_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIMENSION(self):
            return self.getToken(PlSqlParser.DIMENSION, 0)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def model_column_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Model_column_listContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Model_column_listContext,i)


        def MEASURES(self):
            return self.getToken(PlSqlParser.MEASURES, 0)

        def model_column_partition_part(self):
            return self.getTypedRuleContext(PlSqlParser.Model_column_partition_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_model_column_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column_clauses" ):
                listener.enterModel_column_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column_clauses" ):
                listener.exitModel_column_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_column_clauses" ):
                return visitor.visitModel_column_clauses(self)
            else:
                return visitor.visitChildren(self)




    def model_column_clauses(self):

        localctx = PlSqlParser.Model_column_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_model_column_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PARTITION:
                self.state = 3147
                self.model_column_partition_part()


            self.state = 3150
            self.match(PlSqlParser.DIMENSION)
            self.state = 3151
            self.match(PlSqlParser.BY)
            self.state = 3152
            self.model_column_list()
            self.state = 3153
            self.match(PlSqlParser.MEASURES)
            self.state = 3154
            self.model_column_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_column_partition_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(PlSqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def model_column_list(self):
            return self.getTypedRuleContext(PlSqlParser.Model_column_listContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_model_column_partition_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column_partition_part" ):
                listener.enterModel_column_partition_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column_partition_part" ):
                listener.exitModel_column_partition_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_column_partition_part" ):
                return visitor.visitModel_column_partition_part(self)
            else:
                return visitor.visitChildren(self)




    def model_column_partition_part(self):

        localctx = PlSqlParser.Model_column_partition_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_model_column_partition_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3156
            self.match(PlSqlParser.PARTITION)
            self.state = 3157
            self.match(PlSqlParser.BY)
            self.state = 3158
            self.model_column_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_column_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Model_columnContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Model_columnContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_model_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column_list" ):
                listener.enterModel_column_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column_list" ):
                listener.exitModel_column_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_column_list" ):
                return visitor.visitModel_column_list(self)
            else:
                return visitor.visitChildren(self)




    def model_column_list(self):

        localctx = PlSqlParser.Model_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_model_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3160
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 3161
            self.model_column()
            self.state = 3166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 3162
                self.match(PlSqlParser.COMMA)
                self.state = 3163
                self.model_column()
                self.state = 3168
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3169
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def table_alias(self):
            return self.getTypedRuleContext(PlSqlParser.Table_aliasContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_model_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column" ):
                listener.enterModel_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column" ):
                listener.exitModel_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_column" ):
                return visitor.visitModel_column(self)
            else:
                return visitor.visitChildren(self)




    def model_column(self):

        localctx = PlSqlParser.Model_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_model_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3171
            self.expression(0)
            self.state = 3173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.AS) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 448)) | (1 << (PlSqlParser.CHAR_STRING - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 3172
                self.table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_rules_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_rules_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Model_rules_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Model_rules_elementContext,i)


        def model_rules_part(self):
            return self.getTypedRuleContext(PlSqlParser.Model_rules_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_model_rules_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_rules_clause" ):
                listener.enterModel_rules_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_rules_clause" ):
                listener.exitModel_rules_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_rules_clause" ):
                return visitor.visitModel_rules_clause(self)
            else:
                return visitor.visitChildren(self)




    def model_rules_clause(self):

        localctx = PlSqlParser.Model_rules_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_model_rules_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.RULES:
                self.state = 3175
                self.model_rules_part()


            self.state = 3178
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 3179
            self.model_rules_element()
            self.state = 3184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 3180
                self.match(PlSqlParser.COMMA)
                self.state = 3181
                self.model_rules_element()
                self.state = 3186
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3187
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_rules_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULES(self):
            return self.getToken(PlSqlParser.RULES, 0)

        def UPDATE(self):
            return self.getToken(PlSqlParser.UPDATE, 0)

        def UPSERT(self):
            return self.getToken(PlSqlParser.UPSERT, 0)

        def ORDER(self):
            return self.getToken(PlSqlParser.ORDER, 0)

        def model_iterate_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Model_iterate_clauseContext,0)


        def AUTOMATIC(self):
            return self.getToken(PlSqlParser.AUTOMATIC, 0)

        def SEQUENTIAL(self):
            return self.getToken(PlSqlParser.SEQUENTIAL, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_model_rules_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_rules_part" ):
                listener.enterModel_rules_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_rules_part" ):
                listener.exitModel_rules_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_rules_part" ):
                return visitor.visitModel_rules_part(self)
            else:
                return visitor.visitChildren(self)




    def model_rules_part(self):

        localctx = PlSqlParser.Model_rules_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_model_rules_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3189
            self.match(PlSqlParser.RULES)
            self.state = 3195
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.UPDATE]:
                self.state = 3190
                self.match(PlSqlParser.UPDATE)
                pass
            elif token in [PlSqlParser.UPSERT]:
                self.state = 3191
                self.match(PlSqlParser.UPSERT)
                self.state = 3193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ALL:
                    self.state = 3192
                    self.match(PlSqlParser.ALL)


                pass
            elif token in [PlSqlParser.AUTOMATIC, PlSqlParser.ITERATE, PlSqlParser.SEQUENTIAL, PlSqlParser.LEFT_PAREN]:
                pass
            else:
                pass
            self.state = 3199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AUTOMATIC or _la==PlSqlParser.SEQUENTIAL:
                self.state = 3197
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.AUTOMATIC or _la==PlSqlParser.SEQUENTIAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3198
                self.match(PlSqlParser.ORDER)


            self.state = 3202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ITERATE:
                self.state = 3201
                self.model_iterate_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_rules_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cell_assignment(self):
            return self.getTypedRuleContext(PlSqlParser.Cell_assignmentContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def UPDATE(self):
            return self.getToken(PlSqlParser.UPDATE, 0)

        def UPSERT(self):
            return self.getToken(PlSqlParser.UPSERT, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Order_by_clauseContext,0)


        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_model_rules_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_rules_element" ):
                listener.enterModel_rules_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_rules_element" ):
                listener.exitModel_rules_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_rules_element" ):
                return visitor.visitModel_rules_element(self)
            else:
                return visitor.visitChildren(self)




    def model_rules_element(self):

        localctx = PlSqlParser.Model_rules_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_model_rules_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                self.state = 3204
                self.match(PlSqlParser.UPDATE)

            elif la_ == 2:
                self.state = 3205
                self.match(PlSqlParser.UPSERT)
                self.state = 3207
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
                if la_ == 1:
                    self.state = 3206
                    self.match(PlSqlParser.ALL)




            self.state = 3211
            self.cell_assignment()
            self.state = 3213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ORDER:
                self.state = 3212
                self.order_by_clause()


            self.state = 3215
            self.match(PlSqlParser.EQUALS_OP)
            self.state = 3216
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cell_assignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Model_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_cell_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCell_assignment" ):
                listener.enterCell_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCell_assignment" ):
                listener.exitCell_assignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCell_assignment" ):
                return visitor.visitCell_assignment(self)
            else:
                return visitor.visitChildren(self)




    def cell_assignment(self):

        localctx = PlSqlParser.Cell_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_cell_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3218
            self.model_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_iterate_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITERATE(self):
            return self.getToken(PlSqlParser.ITERATE, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def until_part(self):
            return self.getTypedRuleContext(PlSqlParser.Until_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_model_iterate_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_iterate_clause" ):
                listener.enterModel_iterate_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_iterate_clause" ):
                listener.exitModel_iterate_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_iterate_clause" ):
                return visitor.visitModel_iterate_clause(self)
            else:
                return visitor.visitChildren(self)




    def model_iterate_clause(self):

        localctx = PlSqlParser.Model_iterate_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_model_iterate_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3220
            self.match(PlSqlParser.ITERATE)
            self.state = 3221
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 3222
            self.expression(0)
            self.state = 3223
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 3225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.UNTIL:
                self.state = 3224
                self.until_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Until_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNTIL(self):
            return self.getToken(PlSqlParser.UNTIL, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_until_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntil_part" ):
                listener.enterUntil_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntil_part" ):
                listener.exitUntil_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntil_part" ):
                return visitor.visitUntil_part(self)
            else:
                return visitor.visitChildren(self)




    def until_part(self):

        localctx = PlSqlParser.Until_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_until_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3227
            self.match(PlSqlParser.UNTIL)
            self.state = 3228
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 3229
            self.condition()
            self.state = 3230
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(PlSqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def order_by_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Order_by_elementsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Order_by_elementsContext,i)


        def SIBLINGS(self):
            return self.getToken(PlSqlParser.SIBLINGS, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_clause" ):
                return visitor.visitOrder_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def order_by_clause(self):

        localctx = PlSqlParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3232
            self.match(PlSqlParser.ORDER)
            self.state = 3234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.SIBLINGS:
                self.state = 3233
                self.match(PlSqlParser.SIBLINGS)


            self.state = 3236
            self.match(PlSqlParser.BY)
            self.state = 3237
            self.order_by_elements()
            self.state = 3242
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,375,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3238
                    self.match(PlSqlParser.COMMA)
                    self.state = 3239
                    self.order_by_elements() 
                self.state = 3244
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,375,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.direction = None # Token
            self.nulls = None # Token

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(PlSqlParser.NULLS, 0)

        def ASC(self):
            return self.getToken(PlSqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(PlSqlParser.DESC, 0)

        def FIRST(self):
            return self.getToken(PlSqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(PlSqlParser.LAST, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_order_by_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_elements" ):
                listener.enterOrder_by_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_elements" ):
                listener.exitOrder_by_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_elements" ):
                return visitor.visitOrder_by_elements(self)
            else:
                return visitor.visitChildren(self)




    def order_by_elements(self):

        localctx = PlSqlParser.Order_by_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_order_by_elements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3245
            self.expression(0)
            self.state = 3247
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,376,self._ctx)
            if la_ == 1:
                self.state = 3246
                localctx.direction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ASC or _la==PlSqlParser.DESC):
                    localctx.direction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3251
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
            if la_ == 1:
                self.state = 3249
                self.match(PlSqlParser.NULLS)
                self.state = 3250
                localctx.nulls = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.FIRST or _la==PlSqlParser.LAST):
                    localctx.nulls = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_update_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def UPDATE(self):
            return self.getToken(PlSqlParser.UPDATE, 0)

        def for_update_of_part(self):
            return self.getTypedRuleContext(PlSqlParser.For_update_of_partContext,0)


        def for_update_options(self):
            return self.getTypedRuleContext(PlSqlParser.For_update_optionsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_for_update_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_update_clause" ):
                listener.enterFor_update_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_update_clause" ):
                listener.exitFor_update_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_update_clause" ):
                return visitor.visitFor_update_clause(self)
            else:
                return visitor.visitChildren(self)




    def for_update_clause(self):

        localctx = PlSqlParser.For_update_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_for_update_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3253
            self.match(PlSqlParser.FOR)
            self.state = 3254
            self.match(PlSqlParser.UPDATE)
            self.state = 3256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
            if la_ == 1:
                self.state = 3255
                self.for_update_of_part()


            self.state = 3259
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,379,self._ctx)
            if la_ == 1:
                self.state = 3258
                self.for_update_options()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_update_of_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_for_update_of_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_update_of_part" ):
                listener.enterFor_update_of_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_update_of_part" ):
                listener.exitFor_update_of_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_update_of_part" ):
                return visitor.visitFor_update_of_part(self)
            else:
                return visitor.visitChildren(self)




    def for_update_of_part(self):

        localctx = PlSqlParser.For_update_of_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_for_update_of_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3261
            self.match(PlSqlParser.OF)
            self.state = 3262
            self.column_name()
            self.state = 3267
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,380,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3263
                    self.match(PlSqlParser.COMMA)
                    self.state = 3264
                    self.column_name() 
                self.state = 3269
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,380,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_update_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKIP_(self):
            return self.getToken(PlSqlParser.SKIP_, 0)

        def LOCKED(self):
            return self.getToken(PlSqlParser.LOCKED, 0)

        def NOWAIT(self):
            return self.getToken(PlSqlParser.NOWAIT, 0)

        def WAIT(self):
            return self.getToken(PlSqlParser.WAIT, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_for_update_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_update_options" ):
                listener.enterFor_update_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_update_options" ):
                listener.exitFor_update_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_update_options" ):
                return visitor.visitFor_update_options(self)
            else:
                return visitor.visitChildren(self)




    def for_update_options(self):

        localctx = PlSqlParser.For_update_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_for_update_options)
        try:
            self.state = 3275
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.SKIP_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3270
                self.match(PlSqlParser.SKIP_)
                self.state = 3271
                self.match(PlSqlParser.LOCKED)
                pass
            elif token in [PlSqlParser.NOWAIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3272
                self.match(PlSqlParser.NOWAIT)
                pass
            elif token in [PlSqlParser.WAIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3273
                self.match(PlSqlParser.WAIT)
                self.state = 3274
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Limit_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(PlSqlParser.LIMIT, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_limit_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_clause" ):
                listener.enterLimit_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_clause" ):
                listener.exitLimit_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimit_clause" ):
                return visitor.visitLimit_clause(self)
            else:
                return visitor.visitChildren(self)




    def limit_clause(self):

        localctx = PlSqlParser.Limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_limit_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3277
            self.match(PlSqlParser.LIMIT)
            self.state = 3278
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(PlSqlParser.UPDATE, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(PlSqlParser.General_table_refContext,0)


        def update_set_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Update_set_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Where_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Static_returning_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_update_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statement" ):
                listener.enterUpdate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statement" ):
                listener.exitUpdate_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_statement" ):
                return visitor.visitUpdate_statement(self)
            else:
                return visitor.visitChildren(self)




    def update_statement(self):

        localctx = PlSqlParser.Update_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_update_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3280
            self.match(PlSqlParser.UPDATE)
            self.state = 3281
            self.general_table_ref()
            self.state = 3282
            self.update_set_clause()
            self.state = 3284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WHERE:
                self.state = 3283
                self.where_clause()


            self.state = 3287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.RETURN or _la==PlSqlParser.RETURNING:
                self.state = 3286
                self.static_returning_clause()


            self.state = 3290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LOG:
                self.state = 3289
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_set_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def column_based_update_set_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_based_update_set_clauseContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_based_update_set_clauseContext,i)


        def VALUE(self):
            return self.getToken(PlSqlParser.VALUE, 0)

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_update_set_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_set_clause" ):
                listener.enterUpdate_set_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_set_clause" ):
                listener.exitUpdate_set_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_set_clause" ):
                return visitor.visitUpdate_set_clause(self)
            else:
                return visitor.visitChildren(self)




    def update_set_clause(self):

        localctx = PlSqlParser.Update_set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_update_set_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3292
            self.match(PlSqlParser.SET)
            self.state = 3308
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,386,self._ctx)
            if la_ == 1:
                self.state = 3293
                self.column_based_update_set_clause()
                self.state = 3298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 3294
                    self.match(PlSqlParser.COMMA)
                    self.state = 3295
                    self.column_based_update_set_clause()
                    self.state = 3300
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 3301
                self.match(PlSqlParser.VALUE)
                self.state = 3302
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3303
                self.r_id()
                self.state = 3304
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 3305
                self.match(PlSqlParser.EQUALS_OP)
                self.state = 3306
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_based_update_set_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_column_based_update_set_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_based_update_set_clause" ):
                listener.enterColumn_based_update_set_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_based_update_set_clause" ):
                listener.exitColumn_based_update_set_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_based_update_set_clause" ):
                return visitor.visitColumn_based_update_set_clause(self)
            else:
                return visitor.visitChildren(self)




    def column_based_update_set_clause(self):

        localctx = PlSqlParser.Column_based_update_set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_column_based_update_set_clause)
        self._la = 0 # Token type
        try:
            self.state = 3327
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3310
                self.column_name()
                self.state = 3311
                self.match(PlSqlParser.EQUALS_OP)
                self.state = 3312
                self.expression(0)
                pass
            elif token in [PlSqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3314
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3315
                self.column_name()
                self.state = 3320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 3316
                    self.match(PlSqlParser.COMMA)
                    self.state = 3317
                    self.column_name()
                    self.state = 3322
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3323
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 3324
                self.match(PlSqlParser.EQUALS_OP)
                self.state = 3325
                self.subquery(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(PlSqlParser.DELETE, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(PlSqlParser.General_table_refContext,0)


        def FROM(self):
            return self.getToken(PlSqlParser.FROM, 0)

        def where_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Where_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Static_returning_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_delete_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement" ):
                listener.enterDelete_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement" ):
                listener.exitDelete_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_statement" ):
                return visitor.visitDelete_statement(self)
            else:
                return visitor.visitChildren(self)




    def delete_statement(self):

        localctx = PlSqlParser.Delete_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_delete_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3329
            self.match(PlSqlParser.DELETE)
            self.state = 3331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FROM:
                self.state = 3330
                self.match(PlSqlParser.FROM)


            self.state = 3333
            self.general_table_ref()
            self.state = 3335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WHERE:
                self.state = 3334
                self.where_clause()


            self.state = 3338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.RETURN or _la==PlSqlParser.RETURNING:
                self.state = 3337
                self.static_returning_clause()


            self.state = 3341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LOG:
                self.state = 3340
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(PlSqlParser.INSERT, 0)

        def single_table_insert(self):
            return self.getTypedRuleContext(PlSqlParser.Single_table_insertContext,0)


        def multi_table_insert(self):
            return self.getTypedRuleContext(PlSqlParser.Multi_table_insertContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_insert_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement" ):
                listener.enterInsert_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement" ):
                listener.exitInsert_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_statement" ):
                return visitor.visitInsert_statement(self)
            else:
                return visitor.visitChildren(self)




    def insert_statement(self):

        localctx = PlSqlParser.Insert_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_insert_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3343
            self.match(PlSqlParser.INSERT)
            self.state = 3346
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.INTO]:
                self.state = 3344
                self.single_table_insert()
                pass
            elif token in [PlSqlParser.ALL, PlSqlParser.FIRST, PlSqlParser.WHEN]:
                self.state = 3345
                self.multi_table_insert()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Single_table_insertContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_into_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Insert_into_clauseContext,0)


        def values_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Values_clauseContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Select_statementContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Error_logging_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Static_returning_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_single_table_insert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_table_insert" ):
                listener.enterSingle_table_insert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_table_insert" ):
                listener.exitSingle_table_insert(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_table_insert" ):
                return visitor.visitSingle_table_insert(self)
            else:
                return visitor.visitChildren(self)




    def single_table_insert(self):

        localctx = PlSqlParser.Single_table_insertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_single_table_insert)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3348
            self.insert_into_clause()
            self.state = 3354
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.VALUES]:
                self.state = 3349
                self.values_clause()
                self.state = 3351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.RETURN or _la==PlSqlParser.RETURNING:
                    self.state = 3350
                    self.static_returning_clause()


                pass
            elif token in [PlSqlParser.SELECT, PlSqlParser.WITH, PlSqlParser.LEFT_PAREN]:
                self.state = 3353
                self.select_statement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LOG:
                self.state = 3356
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multi_table_insertContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Select_statementContext,0)


        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def conditional_insert_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Conditional_insert_clauseContext,0)


        def multi_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Multi_table_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Multi_table_elementContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_multi_table_insert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_table_insert" ):
                listener.enterMulti_table_insert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_table_insert" ):
                listener.exitMulti_table_insert(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulti_table_insert" ):
                return visitor.visitMulti_table_insert(self)
            else:
                return visitor.visitChildren(self)




    def multi_table_insert(self):

        localctx = PlSqlParser.Multi_table_insertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_multi_table_insert)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,398,self._ctx)
            if la_ == 1:
                self.state = 3359
                self.match(PlSqlParser.ALL)
                self.state = 3361 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3360
                    self.multi_table_element()
                    self.state = 3363 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PlSqlParser.INTO):
                        break

                pass

            elif la_ == 2:
                self.state = 3365
                self.conditional_insert_clause()
                pass


            self.state = 3368
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multi_table_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_into_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Insert_into_clauseContext,0)


        def values_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Values_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_multi_table_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_table_element" ):
                listener.enterMulti_table_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_table_element" ):
                listener.exitMulti_table_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulti_table_element" ):
                return visitor.visitMulti_table_element(self)
            else:
                return visitor.visitChildren(self)




    def multi_table_element(self):

        localctx = PlSqlParser.Multi_table_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_multi_table_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3370
            self.insert_into_clause()
            self.state = 3372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.VALUES:
                self.state = 3371
                self.values_clause()


            self.state = 3375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LOG:
                self.state = 3374
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_insert_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_insert_when_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Conditional_insert_when_partContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Conditional_insert_when_partContext,i)


        def conditional_insert_else_part(self):
            return self.getTypedRuleContext(PlSqlParser.Conditional_insert_else_partContext,0)


        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def FIRST(self):
            return self.getToken(PlSqlParser.FIRST, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_conditional_insert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_insert_clause" ):
                listener.enterConditional_insert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_insert_clause" ):
                listener.exitConditional_insert_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_insert_clause" ):
                return visitor.visitConditional_insert_clause(self)
            else:
                return visitor.visitChildren(self)




    def conditional_insert_clause(self):

        localctx = PlSqlParser.Conditional_insert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_conditional_insert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ALL or _la==PlSqlParser.FIRST:
                self.state = 3377
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ALL or _la==PlSqlParser.FIRST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3381 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3380
                self.conditional_insert_when_part()
                self.state = 3383 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.WHEN):
                    break

            self.state = 3386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ELSE:
                self.state = 3385
                self.conditional_insert_else_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_insert_when_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PlSqlParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(PlSqlParser.THEN, 0)

        def multi_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Multi_table_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Multi_table_elementContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_conditional_insert_when_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_insert_when_part" ):
                listener.enterConditional_insert_when_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_insert_when_part" ):
                listener.exitConditional_insert_when_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_insert_when_part" ):
                return visitor.visitConditional_insert_when_part(self)
            else:
                return visitor.visitChildren(self)




    def conditional_insert_when_part(self):

        localctx = PlSqlParser.Conditional_insert_when_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_conditional_insert_when_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3388
            self.match(PlSqlParser.WHEN)
            self.state = 3389
            self.condition()
            self.state = 3390
            self.match(PlSqlParser.THEN)
            self.state = 3392 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3391
                self.multi_table_element()
                self.state = 3394 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.INTO):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_insert_else_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(PlSqlParser.ELSE, 0)

        def multi_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Multi_table_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Multi_table_elementContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_conditional_insert_else_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_insert_else_part" ):
                listener.enterConditional_insert_else_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_insert_else_part" ):
                listener.exitConditional_insert_else_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_insert_else_part" ):
                return visitor.visitConditional_insert_else_part(self)
            else:
                return visitor.visitChildren(self)




    def conditional_insert_else_part(self):

        localctx = PlSqlParser.Conditional_insert_else_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_conditional_insert_else_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3396
            self.match(PlSqlParser.ELSE)
            self.state = 3398 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3397
                self.multi_table_element()
                self.state = 3400 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.INTO):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_into_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(PlSqlParser.INTO, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(PlSqlParser.General_table_refContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_insert_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_into_clause" ):
                listener.enterInsert_into_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_into_clause" ):
                listener.exitInsert_into_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_into_clause" ):
                return visitor.visitInsert_into_clause(self)
            else:
                return visitor.visitChildren(self)




    def insert_into_clause(self):

        localctx = PlSqlParser.Insert_into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_insert_into_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3402
            self.match(PlSqlParser.INTO)
            self.state = 3403
            self.general_table_ref()
            self.state = 3415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
            if la_ == 1:
                self.state = 3404
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3405
                self.column_name()
                self.state = 3410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 3406
                    self.match(PlSqlParser.COMMA)
                    self.state = 3407
                    self.column_name()
                    self.state = 3412
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3413
                self.match(PlSqlParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Values_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(PlSqlParser.VALUES, 0)

        def expression_list(self):
            return self.getTypedRuleContext(PlSqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_values_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_clause" ):
                listener.enterValues_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_clause" ):
                listener.exitValues_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValues_clause" ):
                return visitor.visitValues_clause(self)
            else:
                return visitor.visitChildren(self)




    def values_clause(self):

        localctx = PlSqlParser.Values_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_values_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3417
            self.match(PlSqlParser.VALUES)
            self.state = 3418
            self.expression_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(PlSqlParser.MERGE, 0)

        def INTO(self):
            return self.getToken(PlSqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def selected_tableview(self):
            return self.getTypedRuleContext(PlSqlParser.Selected_tableviewContext,0)


        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def condition(self):
            return self.getTypedRuleContext(PlSqlParser.ConditionContext,0)


        def table_alias(self):
            return self.getTypedRuleContext(PlSqlParser.Table_aliasContext,0)


        def merge_update_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Merge_update_clauseContext,0)


        def merge_insert_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Merge_insert_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_merge_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_statement" ):
                listener.enterMerge_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_statement" ):
                listener.exitMerge_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_statement" ):
                return visitor.visitMerge_statement(self)
            else:
                return visitor.visitChildren(self)




    def merge_statement(self):

        localctx = PlSqlParser.Merge_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_merge_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3420
            self.match(PlSqlParser.MERGE)
            self.state = 3421
            self.match(PlSqlParser.INTO)
            self.state = 3422
            self.tableview_name()
            self.state = 3424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.AS) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 448)) | (1 << (PlSqlParser.CHAR_STRING - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 3423
                self.table_alias()


            self.state = 3426
            self.match(PlSqlParser.USING)
            self.state = 3427
            self.selected_tableview()
            self.state = 3428
            self.match(PlSqlParser.ON)
            self.state = 3429
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 3430
            self.condition()
            self.state = 3431
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 3440
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
            if la_ == 1:
                self.state = 3432
                self.merge_update_clause()
                self.state = 3434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.WHEN:
                    self.state = 3433
                    self.merge_insert_clause()



            elif la_ == 2:
                self.state = 3436
                self.merge_insert_clause()
                self.state = 3438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.WHEN:
                    self.state = 3437
                    self.merge_update_clause()




            self.state = 3443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LOG:
                self.state = 3442
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_update_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PlSqlParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(PlSqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(PlSqlParser.THEN, 0)

        def UPDATE(self):
            return self.getToken(PlSqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def merge_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Merge_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Merge_elementContext,i)


        def where_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Where_clauseContext,0)


        def merge_update_delete_part(self):
            return self.getTypedRuleContext(PlSqlParser.Merge_update_delete_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_merge_update_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_update_clause" ):
                listener.enterMerge_update_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_update_clause" ):
                listener.exitMerge_update_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_update_clause" ):
                return visitor.visitMerge_update_clause(self)
            else:
                return visitor.visitChildren(self)




    def merge_update_clause(self):

        localctx = PlSqlParser.Merge_update_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_merge_update_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3445
            self.match(PlSqlParser.WHEN)
            self.state = 3446
            self.match(PlSqlParser.MATCHED)
            self.state = 3447
            self.match(PlSqlParser.THEN)
            self.state = 3448
            self.match(PlSqlParser.UPDATE)
            self.state = 3449
            self.match(PlSqlParser.SET)
            self.state = 3450
            self.merge_element()
            self.state = 3455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 3451
                self.match(PlSqlParser.COMMA)
                self.state = 3452
                self.merge_element()
                self.state = 3457
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WHERE:
                self.state = 3458
                self.where_clause()


            self.state = 3462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DELETE:
                self.state = 3461
                self.merge_update_delete_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_merge_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_element" ):
                listener.enterMerge_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_element" ):
                listener.exitMerge_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_element" ):
                return visitor.visitMerge_element(self)
            else:
                return visitor.visitChildren(self)




    def merge_element(self):

        localctx = PlSqlParser.Merge_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_merge_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3464
            self.column_name()
            self.state = 3465
            self.match(PlSqlParser.EQUALS_OP)
            self.state = 3466
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_update_delete_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(PlSqlParser.DELETE, 0)

        def where_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_merge_update_delete_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_update_delete_part" ):
                listener.enterMerge_update_delete_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_update_delete_part" ):
                listener.exitMerge_update_delete_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_update_delete_part" ):
                return visitor.visitMerge_update_delete_part(self)
            else:
                return visitor.visitChildren(self)




    def merge_update_delete_part(self):

        localctx = PlSqlParser.Merge_update_delete_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_merge_update_delete_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3468
            self.match(PlSqlParser.DELETE)
            self.state = 3469
            self.where_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_insert_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PlSqlParser.WHEN, 0)

        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(PlSqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(PlSqlParser.THEN, 0)

        def INSERT(self):
            return self.getToken(PlSqlParser.INSERT, 0)

        def VALUES(self):
            return self.getToken(PlSqlParser.VALUES, 0)

        def expression_list(self):
            return self.getTypedRuleContext(PlSqlParser.Expression_listContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def where_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_merge_insert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_insert_clause" ):
                listener.enterMerge_insert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_insert_clause" ):
                listener.exitMerge_insert_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_insert_clause" ):
                return visitor.visitMerge_insert_clause(self)
            else:
                return visitor.visitChildren(self)




    def merge_insert_clause(self):

        localctx = PlSqlParser.Merge_insert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_merge_insert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3471
            self.match(PlSqlParser.WHEN)
            self.state = 3472
            self.match(PlSqlParser.NOT)
            self.state = 3473
            self.match(PlSqlParser.MATCHED)
            self.state = 3474
            self.match(PlSqlParser.THEN)
            self.state = 3475
            self.match(PlSqlParser.INSERT)
            self.state = 3487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.LEFT_PAREN:
                self.state = 3476
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3477
                self.column_name()
                self.state = 3482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 3478
                    self.match(PlSqlParser.COMMA)
                    self.state = 3479
                    self.column_name()
                    self.state = 3484
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3485
                self.match(PlSqlParser.RIGHT_PAREN)


            self.state = 3489
            self.match(PlSqlParser.VALUES)
            self.state = 3490
            self.expression_list()
            self.state = 3492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.WHERE:
                self.state = 3491
                self.where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selected_tableviewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Select_statementContext,0)


        def table_alias(self):
            return self.getTypedRuleContext(PlSqlParser.Table_aliasContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_selected_tableview

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelected_tableview" ):
                listener.enterSelected_tableview(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelected_tableview" ):
                listener.exitSelected_tableview(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelected_tableview" ):
                return visitor.visitSelected_tableview(self)
            else:
                return visitor.visitChildren(self)




    def selected_tableview(self):

        localctx = PlSqlParser.Selected_tableviewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_selected_tableview)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3499
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                self.state = 3494
                self.tableview_name()
                pass
            elif token in [PlSqlParser.LEFT_PAREN]:
                self.state = 3495
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3496
                self.select_statement()
                self.state = 3497
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.AS) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 448)) | (1 << (PlSqlParser.CHAR_STRING - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 3501
                self.table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lock_table_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(PlSqlParser.LOCK, 0)

        def TABLE(self):
            return self.getToken(PlSqlParser.TABLE, 0)

        def lock_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Lock_table_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Lock_table_elementContext,i)


        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def lock_mode(self):
            return self.getTypedRuleContext(PlSqlParser.Lock_modeContext,0)


        def MODE(self):
            return self.getToken(PlSqlParser.MODE, 0)

        def wait_nowait_part(self):
            return self.getTypedRuleContext(PlSqlParser.Wait_nowait_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_lock_table_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_table_statement" ):
                listener.enterLock_table_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_table_statement" ):
                listener.exitLock_table_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLock_table_statement" ):
                return visitor.visitLock_table_statement(self)
            else:
                return visitor.visitChildren(self)




    def lock_table_statement(self):

        localctx = PlSqlParser.Lock_table_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_lock_table_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3504
            self.match(PlSqlParser.LOCK)
            self.state = 3505
            self.match(PlSqlParser.TABLE)
            self.state = 3506
            self.lock_table_element()
            self.state = 3511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 3507
                self.match(PlSqlParser.COMMA)
                self.state = 3508
                self.lock_table_element()
                self.state = 3513
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3514
            self.match(PlSqlParser.IN)
            self.state = 3515
            self.lock_mode()
            self.state = 3516
            self.match(PlSqlParser.MODE)
            self.state = 3518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOWAIT or _la==PlSqlParser.WAIT:
                self.state = 3517
                self.wait_nowait_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Wait_nowait_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(PlSqlParser.WAIT, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def NOWAIT(self):
            return self.getToken(PlSqlParser.NOWAIT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_wait_nowait_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWait_nowait_part" ):
                listener.enterWait_nowait_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWait_nowait_part" ):
                listener.exitWait_nowait_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWait_nowait_part" ):
                return visitor.visitWait_nowait_part(self)
            else:
                return visitor.visitChildren(self)




    def wait_nowait_part(self):

        localctx = PlSqlParser.Wait_nowait_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_wait_nowait_part)
        try:
            self.state = 3523
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.WAIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3520
                self.match(PlSqlParser.WAIT)
                self.state = 3521
                self.expression(0)
                pass
            elif token in [PlSqlParser.NOWAIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3522
                self.match(PlSqlParser.NOWAIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lock_table_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def partition_extension_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Partition_extension_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_lock_table_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_table_element" ):
                listener.enterLock_table_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_table_element" ):
                listener.exitLock_table_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLock_table_element" ):
                return visitor.visitLock_table_element(self)
            else:
                return visitor.visitChildren(self)




    def lock_table_element(self):

        localctx = PlSqlParser.Lock_table_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_lock_table_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3525
            self.tableview_name()
            self.state = 3527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PARTITION or _la==PlSqlParser.SUBPARTITION:
                self.state = 3526
                self.partition_extension_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lock_modeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(PlSqlParser.ROW, 0)

        def SHARE(self):
            return self.getToken(PlSqlParser.SHARE, 0)

        def EXCLUSIVE(self):
            return self.getToken(PlSqlParser.EXCLUSIVE, 0)

        def UPDATE(self):
            return self.getToken(PlSqlParser.UPDATE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_lock_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_mode" ):
                listener.enterLock_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_mode" ):
                listener.exitLock_mode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLock_mode" ):
                return visitor.visitLock_mode(self)
            else:
                return visitor.visitChildren(self)




    def lock_mode(self):

        localctx = PlSqlParser.Lock_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_lock_mode)
        self._la = 0 # Token type
        try:
            self.state = 3541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3529
                self.match(PlSqlParser.ROW)
                self.state = 3530
                self.match(PlSqlParser.SHARE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3531
                self.match(PlSqlParser.ROW)
                self.state = 3532
                self.match(PlSqlParser.EXCLUSIVE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3533
                self.match(PlSqlParser.SHARE)
                self.state = 3535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.UPDATE:
                    self.state = 3534
                    self.match(PlSqlParser.UPDATE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3537
                self.match(PlSqlParser.SHARE)
                self.state = 3538
                self.match(PlSqlParser.ROW)
                self.state = 3539
                self.match(PlSqlParser.EXCLUSIVE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3540
                self.match(PlSqlParser.EXCLUSIVE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class General_table_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_table_expression_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Dml_table_expression_clauseContext,0)


        def ONLY(self):
            return self.getToken(PlSqlParser.ONLY, 0)

        def table_alias(self):
            return self.getTypedRuleContext(PlSqlParser.Table_aliasContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_general_table_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_table_ref" ):
                listener.enterGeneral_table_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_table_ref" ):
                listener.exitGeneral_table_ref(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneral_table_ref" ):
                return visitor.visitGeneral_table_ref(self)
            else:
                return visitor.visitChildren(self)




    def general_table_ref(self):

        localctx = PlSqlParser.General_table_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_general_table_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,427,self._ctx)
            if la_ == 1:
                self.state = 3543
                self.dml_table_expression_clause()
                pass

            elif la_ == 2:
                self.state = 3544
                self.match(PlSqlParser.ONLY)
                self.state = 3545
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3546
                self.dml_table_expression_clause()
                self.state = 3547
                self.match(PlSqlParser.RIGHT_PAREN)
                pass


            self.state = 3552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,428,self._ctx)
            if la_ == 1:
                self.state = 3551
                self.table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Static_returning_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def into_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Into_clauseContext,0)


        def RETURNING(self):
            return self.getToken(PlSqlParser.RETURNING, 0)

        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_static_returning_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatic_returning_clause" ):
                listener.enterStatic_returning_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatic_returning_clause" ):
                listener.exitStatic_returning_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatic_returning_clause" ):
                return visitor.visitStatic_returning_clause(self)
            else:
                return visitor.visitChildren(self)




    def static_returning_clause(self):

        localctx = PlSqlParser.Static_returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_static_returning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3554
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.RETURN or _la==PlSqlParser.RETURNING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3555
            self.expression(0)
            self.state = 3560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 3556
                self.match(PlSqlParser.COMMA)
                self.state = 3557
                self.expression(0)
                self.state = 3562
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3563
            self.into_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Error_logging_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG(self):
            return self.getToken(PlSqlParser.LOG, 0)

        def ERRORS(self):
            return self.getToken(PlSqlParser.ERRORS, 0)

        def error_logging_into_part(self):
            return self.getTypedRuleContext(PlSqlParser.Error_logging_into_partContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def error_logging_reject_part(self):
            return self.getTypedRuleContext(PlSqlParser.Error_logging_reject_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_error_logging_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_logging_clause" ):
                listener.enterError_logging_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_logging_clause" ):
                listener.exitError_logging_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitError_logging_clause" ):
                return visitor.visitError_logging_clause(self)
            else:
                return visitor.visitChildren(self)




    def error_logging_clause(self):

        localctx = PlSqlParser.Error_logging_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_error_logging_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3565
            self.match(PlSqlParser.LOG)
            self.state = 3566
            self.match(PlSqlParser.ERRORS)
            self.state = 3568
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,430,self._ctx)
            if la_ == 1:
                self.state = 3567
                self.error_logging_into_part()


            self.state = 3571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,431,self._ctx)
            if la_ == 1:
                self.state = 3570
                self.expression(0)


            self.state = 3574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.REJECT:
                self.state = 3573
                self.error_logging_reject_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Error_logging_into_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(PlSqlParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_error_logging_into_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_logging_into_part" ):
                listener.enterError_logging_into_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_logging_into_part" ):
                listener.exitError_logging_into_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitError_logging_into_part" ):
                return visitor.visitError_logging_into_part(self)
            else:
                return visitor.visitChildren(self)




    def error_logging_into_part(self):

        localctx = PlSqlParser.Error_logging_into_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_error_logging_into_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3576
            self.match(PlSqlParser.INTO)
            self.state = 3577
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Error_logging_reject_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REJECT(self):
            return self.getToken(PlSqlParser.REJECT, 0)

        def LIMIT(self):
            return self.getToken(PlSqlParser.LIMIT, 0)

        def UNLIMITED(self):
            return self.getToken(PlSqlParser.UNLIMITED, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_error_logging_reject_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_logging_reject_part" ):
                listener.enterError_logging_reject_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_logging_reject_part" ):
                listener.exitError_logging_reject_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitError_logging_reject_part" ):
                return visitor.visitError_logging_reject_part(self)
            else:
                return visitor.visitChildren(self)




    def error_logging_reject_part(self):

        localctx = PlSqlParser.Error_logging_reject_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_error_logging_reject_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3579
            self.match(PlSqlParser.REJECT)
            self.state = 3580
            self.match(PlSqlParser.LIMIT)
            self.state = 3583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
            if la_ == 1:
                self.state = 3581
                self.match(PlSqlParser.UNLIMITED)
                pass

            elif la_ == 2:
                self.state = 3582
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_table_expression_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_collection_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Table_collection_expressionContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Select_statementContext,0)


        def subquery_restriction_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Subquery_restriction_clauseContext,0)


        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def sample_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Sample_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_dml_table_expression_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_table_expression_clause" ):
                listener.enterDml_table_expression_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_table_expression_clause" ):
                listener.exitDml_table_expression_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_table_expression_clause" ):
                return visitor.visitDml_table_expression_clause(self)
            else:
                return visitor.visitChildren(self)




    def dml_table_expression_clause(self):

        localctx = PlSqlParser.Dml_table_expression_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_dml_table_expression_clause)
        self._la = 0 # Token type
        try:
            self.state = 3597
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.TABLE, PlSqlParser.THE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3585
                self.table_collection_expression()
                pass
            elif token in [PlSqlParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3586
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3587
                self.select_statement()
                self.state = 3589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.WITH:
                    self.state = 3588
                    self.subquery_restriction_clause()


                self.state = 3591
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3593
                self.tableview_name()
                self.state = 3595
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,435,self._ctx)
                if la_ == 1:
                    self.state = 3594
                    self.sample_clause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_collection_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(PlSqlParser.TABLE, 0)

        def THE(self):
            return self.getToken(PlSqlParser.THE, 0)

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_table_collection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_collection_expression" ):
                listener.enterTable_collection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_collection_expression" ):
                listener.exitTable_collection_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_collection_expression" ):
                return visitor.visitTable_collection_expression(self)
            else:
                return visitor.visitChildren(self)




    def table_collection_expression(self):

        localctx = PlSqlParser.Table_collection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_table_collection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3599
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.TABLE or _la==PlSqlParser.THE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
            if la_ == 1:
                self.state = 3600
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3601
                self.subquery(0)
                self.state = 3602
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 3604
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3605
                self.expression(0)
                self.state = 3606
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 3610
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,437,self._ctx)
                if la_ == 1:
                    self.state = 3607
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 3608
                    self.match(PlSqlParser.PLUS_SIGN)
                    self.state = 3609
                    self.match(PlSqlParser.RIGHT_PAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subquery_restriction_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PlSqlParser.WITH, 0)

        def READ(self):
            return self.getToken(PlSqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(PlSqlParser.ONLY, 0)

        def CHECK(self):
            return self.getToken(PlSqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(PlSqlParser.OPTION, 0)

        def CONSTRAINT(self):
            return self.getToken(PlSqlParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(PlSqlParser.Constraint_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_subquery_restriction_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_restriction_clause" ):
                listener.enterSubquery_restriction_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_restriction_clause" ):
                listener.exitSubquery_restriction_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery_restriction_clause" ):
                return visitor.visitSubquery_restriction_clause(self)
            else:
                return visitor.visitChildren(self)




    def subquery_restriction_clause(self):

        localctx = PlSqlParser.Subquery_restriction_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_subquery_restriction_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3614
            self.match(PlSqlParser.WITH)
            self.state = 3623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.READ]:
                self.state = 3615
                self.match(PlSqlParser.READ)
                self.state = 3616
                self.match(PlSqlParser.ONLY)
                pass
            elif token in [PlSqlParser.CHECK]:
                self.state = 3617
                self.match(PlSqlParser.CHECK)
                self.state = 3618
                self.match(PlSqlParser.OPTION)
                self.state = 3621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.CONSTRAINT:
                    self.state = 3619
                    self.match(PlSqlParser.CONSTRAINT)
                    self.state = 3620
                    self.constraint_name()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sample_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(PlSqlParser.SAMPLE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def BLOCK(self):
            return self.getToken(PlSqlParser.BLOCK, 0)

        def seed_part(self):
            return self.getTypedRuleContext(PlSqlParser.Seed_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_sample_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_clause" ):
                listener.enterSample_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_clause" ):
                listener.exitSample_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample_clause" ):
                return visitor.visitSample_clause(self)
            else:
                return visitor.visitChildren(self)




    def sample_clause(self):

        localctx = PlSqlParser.Sample_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_sample_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3625
            self.match(PlSqlParser.SAMPLE)
            self.state = 3627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.BLOCK:
                self.state = 3626
                self.match(PlSqlParser.BLOCK)


            self.state = 3629
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 3630
            self.expression(0)
            self.state = 3633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.COMMA:
                self.state = 3631
                self.match(PlSqlParser.COMMA)
                self.state = 3632
                self.expression(0)


            self.state = 3635
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 3637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,443,self._ctx)
            if la_ == 1:
                self.state = 3636
                self.seed_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Seed_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEED(self):
            return self.getToken(PlSqlParser.SEED, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_seed_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeed_part" ):
                listener.enterSeed_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeed_part" ):
                listener.exitSeed_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeed_part" ):
                return visitor.visitSeed_part(self)
            else:
                return visitor.visitChildren(self)




    def seed_part(self):

        localctx = PlSqlParser.Seed_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_seed_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3639
            self.match(PlSqlParser.SEED)
            self.state = 3640
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 3641
            self.expression(0)
            self.state = 3642
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR(self):
            return self.getToken(PlSqlParser.CURSOR, 0)

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_cursor_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_expression" ):
                listener.enterCursor_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_expression" ):
                listener.exitCursor_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_expression" ):
                return visitor.visitCursor_expression(self)
            else:
                return visitor.visitChildren(self)




    def cursor_expression(self):

        localctx = PlSqlParser.Cursor_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_cursor_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3644
            self.match(PlSqlParser.CURSOR)
            self.state = 3645
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 3646
            self.subquery(0)
            self.state = 3647
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_list" ):
                return visitor.visitExpression_list(self)
            else:
                return visitor.visitChildren(self)




    def expression_list(self):

        localctx = PlSqlParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3649
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 3651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CASE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DISTINCT - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXISTS - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FALSE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NOT - 192)) | (1 << (PlSqlParser.NULL - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.PRIOR - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUE - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 448)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 448)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 448)) | (1 << (PlSqlParser.CHAR_STRING - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)) | (1 << (PlSqlParser.LEFT_PAREN - 448)) | (1 << (PlSqlParser.PLUS_SIGN - 448)) | (1 << (PlSqlParser.MINUS_SIGN - 448)) | (1 << (PlSqlParser.BINDVAR - 448)) | (1 << (PlSqlParser.COLON - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 3650
                self.expression(0)


            self.state = 3657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 3653
                self.match(PlSqlParser.COMMA)
                self.state = 3654
                self.expression(0)
                self.state = 3659
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3660
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = PlSqlParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3662
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlSqlParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IgnoreExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def binary_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Binary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreExpr" ):
                listener.enterIgnoreExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreExpr" ):
                listener.exitIgnoreExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreExpr" ):
                return visitor.visitIgnoreExpr(self)
            else:
                return visitor.visitChildren(self)


    class AndExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)

        def AND(self):
            return self.getToken(PlSqlParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpr" ):
                listener.enterAndExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpr" ):
                listener.exitAndExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndExpr" ):
                return visitor.visitAndExpr(self)
            else:
                return visitor.visitChildren(self)


    class LikeExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Like_typeContext
            self._expression = None # ExpressionContext
            self.right = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)

        def like_type(self):
            return self.getTypedRuleContext(PlSqlParser.Like_typeContext,0)

        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(PlSqlParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikeExpr" ):
                listener.enterLikeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikeExpr" ):
                listener.exitLikeExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLikeExpr" ):
                return visitor.visitLikeExpr(self)
            else:
                return visitor.visitChildren(self)


    class RelExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Relational_operatorContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)

        def relational_operator(self):
            return self.getTypedRuleContext(PlSqlParser.Relational_operatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelExpr" ):
                listener.enterRelExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelExpr" ):
                listener.exitRelExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelExpr" ):
                return visitor.visitRelExpr(self)
            else:
                return visitor.visitChildren(self)


    class MemberExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # Binary_expressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)

        def binary_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Binary_expressionContext,0)

        def MEMBER(self):
            return self.getToken(PlSqlParser.MEMBER, 0)
        def SUBMULTISET(self):
            return self.getToken(PlSqlParser.SUBMULTISET, 0)
        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberExpr" ):
                listener.enterMemberExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberExpr" ):
                listener.exitMemberExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberExpr" ):
                return visitor.visitMemberExpr(self)
            else:
                return visitor.visitChildren(self)


    class BetweenExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self._expression = None # ExpressionContext
            self.right = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def AND(self):
            return self.getToken(PlSqlParser.AND, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)

        def BETWEEN(self):
            return self.getToken(PlSqlParser.BETWEEN, 0)
        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetweenExpr" ):
                listener.enterBetweenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetweenExpr" ):
                listener.exitBetweenExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetweenExpr" ):
                return visitor.visitBetweenExpr(self)
            else:
                return visitor.visitChildren(self)


    class CursorExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.expr = None # Cursor_partContext
            self.copyFrom(ctx)

        def CURSOR(self):
            return self.getToken(PlSqlParser.CURSOR, 0)
        def cursor_part(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_partContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorExpr" ):
                listener.enterCursorExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorExpr" ):
                listener.exitCursorExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursorExpr" ):
                return visitor.visitCursorExpr(self)
            else:
                return visitor.visitChildren(self)


    class IsExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # Is_partContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)

        def IS(self):
            return self.getToken(PlSqlParser.IS, 0)
        def is_part(self):
            return self.getTypedRuleContext(PlSqlParser.Is_partContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsExpr" ):
                listener.enterIsExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsExpr" ):
                listener.exitIsExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsExpr" ):
                return visitor.visitIsExpr(self)
            else:
                return visitor.visitChildren(self)


    class NotExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.expr = None # ExpressionContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)
        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpr" ):
                listener.enterNotExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpr" ):
                listener.exitNotExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotExpr" ):
                return visitor.visitNotExpr(self)
            else:
                return visitor.visitChildren(self)


    class InExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)

        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)
        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)

        def expression_list(self):
            return self.getTypedRuleContext(PlSqlParser.Expression_listContext,0)

        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInExpr" ):
                listener.enterInExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInExpr" ):
                listener.exitInExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInExpr" ):
                return visitor.visitInExpr(self)
            else:
                return visitor.visitChildren(self)


    class ParenExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpr" ):
                listener.enterParenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpr" ):
                listener.exitParenExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpr" ):
                return visitor.visitParenExpr(self)
            else:
                return visitor.visitChildren(self)


    class OrExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)

        def OR(self):
            return self.getToken(PlSqlParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrExpr" ):
                listener.enterOrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrExpr" ):
                listener.exitOrExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrExpr" ):
                return visitor.visitOrExpr(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlSqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 494
        self.enterRecursionRule(localctx, 494, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3674
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
            if la_ == 1:
                localctx = PlSqlParser.CursorExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3665
                localctx.op = self.match(PlSqlParser.CURSOR)
                self.state = 3666
                localctx.expr = self.cursor_part()
                pass

            elif la_ == 2:
                localctx = PlSqlParser.NotExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3667
                localctx.op = self.match(PlSqlParser.NOT)
                self.state = 3668
                localctx.expr = self.expression(5)
                pass

            elif la_ == 3:
                localctx = PlSqlParser.IgnoreExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3669
                self.binary_expression(0)
                pass

            elif la_ == 4:
                localctx = PlSqlParser.ParenExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3670
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3671
                self.expression(0)
                self.state = 3672
                self.match(PlSqlParser.RIGHT_PAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3728
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,454,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3726
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,453,self._ctx)
                    if la_ == 1:
                        localctx = PlSqlParser.BetweenExprContext(self, PlSqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3676
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 3678
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.NOT:
                            self.state = 3677
                            self.match(PlSqlParser.NOT)


                        self.state = 3680
                        localctx.op = self.match(PlSqlParser.BETWEEN)
                        self.state = 3681
                        localctx._expression = self.expression(0)
                        localctx.right.append(localctx._expression)
                        self.state = 3682
                        self.match(PlSqlParser.AND)
                        self.state = 3683
                        localctx._expression = self.expression(11)
                        localctx.right.append(localctx._expression)
                        pass

                    elif la_ == 2:
                        localctx = PlSqlParser.RelExprContext(self, PlSqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3685
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 3686
                        localctx.op = self.relational_operator()
                        self.state = 3687
                        localctx.right = self.expression(9)
                        pass

                    elif la_ == 3:
                        localctx = PlSqlParser.AndExprContext(self, PlSqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3689
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 3690
                        localctx.op = self.match(PlSqlParser.AND)
                        self.state = 3691
                        localctx.right = self.expression(5)
                        pass

                    elif la_ == 4:
                        localctx = PlSqlParser.OrExprContext(self, PlSqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3692
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 3693
                        localctx.op = self.match(PlSqlParser.OR)
                        self.state = 3694
                        localctx.right = self.expression(4)
                        pass

                    elif la_ == 5:
                        localctx = PlSqlParser.IsExprContext(self, PlSqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3695
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 3696
                        localctx.op = self.match(PlSqlParser.IS)
                        self.state = 3697
                        localctx.right = self.is_part()
                        pass

                    elif la_ == 6:
                        localctx = PlSqlParser.InExprContext(self, PlSqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3698
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 3700
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.NOT:
                            self.state = 3699
                            self.match(PlSqlParser.NOT)


                        self.state = 3702
                        localctx.op = self.match(PlSqlParser.IN)
                        self.state = 3708
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,449,self._ctx)
                        if la_ == 1:
                            self.state = 3703
                            self.match(PlSqlParser.LEFT_PAREN)
                            self.state = 3704
                            self.subquery(0)
                            self.state = 3705
                            self.match(PlSqlParser.RIGHT_PAREN)
                            pass

                        elif la_ == 2:
                            self.state = 3707
                            self.expression_list()
                            pass


                        pass

                    elif la_ == 7:
                        localctx = PlSqlParser.LikeExprContext(self, PlSqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3710
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 3712
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.NOT:
                            self.state = 3711
                            self.match(PlSqlParser.NOT)


                        self.state = 3714
                        localctx.op = self.like_type()
                        self.state = 3715
                        localctx._expression = self.expression(0)
                        localctx.right.append(localctx._expression)
                        self.state = 3718
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,451,self._ctx)
                        if la_ == 1:
                            self.state = 3716
                            self.match(PlSqlParser.ESCAPE)
                            self.state = 3717
                            localctx._expression = self.expression(0)
                            localctx.right.append(localctx._expression)


                        pass

                    elif la_ == 8:
                        localctx = PlSqlParser.MemberExprContext(self, PlSqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 3720
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 3721
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.MEMBER or _la==PlSqlParser.SUBMULTISET):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3723
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PlSqlParser.OF:
                            self.state = 3722
                            self.match(PlSqlParser.OF)


                        self.state = 3725
                        localctx.right = self.binary_expression(0)
                        pass

             
                self.state = 3730
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,454,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Is_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)

        def NAN(self):
            return self.getToken(PlSqlParser.NAN, 0)

        def PRESENT(self):
            return self.getToken(PlSqlParser.PRESENT, 0)

        def INFINITE(self):
            return self.getToken(PlSqlParser.INFINITE, 0)

        def A_LETTER(self):
            return self.getToken(PlSqlParser.A_LETTER, 0)

        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def EMPTY(self):
            return self.getToken(PlSqlParser.EMPTY, 0)

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Type_specContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Type_specContext,i)


        def NOT(self):
            return self.getToken(PlSqlParser.NOT, 0)

        def TYPE(self):
            return self.getToken(PlSqlParser.TYPE, 0)

        def ONLY(self):
            return self.getToken(PlSqlParser.ONLY, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_is_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_part" ):
                listener.enterIs_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_part" ):
                listener.exitIs_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIs_part" ):
                return visitor.visitIs_part(self)
            else:
                return visitor.visitChildren(self)




    def is_part(self):

        localctx = PlSqlParser.Is_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_is_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.NOT:
                self.state = 3731
                self.match(PlSqlParser.NOT)


            self.state = 3759
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.NULL]:
                self.state = 3734
                self.match(PlSqlParser.NULL)
                pass
            elif token in [PlSqlParser.NAN]:
                self.state = 3735
                self.match(PlSqlParser.NAN)
                pass
            elif token in [PlSqlParser.PRESENT]:
                self.state = 3736
                self.match(PlSqlParser.PRESENT)
                pass
            elif token in [PlSqlParser.INFINITE]:
                self.state = 3737
                self.match(PlSqlParser.INFINITE)
                pass
            elif token in [PlSqlParser.A_LETTER]:
                self.state = 3738
                self.match(PlSqlParser.A_LETTER)
                self.state = 3739
                self.match(PlSqlParser.SET)
                pass
            elif token in [PlSqlParser.EMPTY]:
                self.state = 3740
                self.match(PlSqlParser.EMPTY)
                pass
            elif token in [PlSqlParser.OF]:
                self.state = 3741
                self.match(PlSqlParser.OF)
                self.state = 3743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.TYPE:
                    self.state = 3742
                    self.match(PlSqlParser.TYPE)


                self.state = 3745
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3747
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
                if la_ == 1:
                    self.state = 3746
                    self.match(PlSqlParser.ONLY)


                self.state = 3749
                self.type_spec()
                self.state = 3754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 3750
                    self.match(PlSqlParser.COMMA)
                    self.state = 3751
                    self.type_spec()
                    self.state = 3756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3757
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_cursor_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_part" ):
                listener.enterCursor_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_part" ):
                listener.exitCursor_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_part" ):
                return visitor.visitCursor_part(self)
            else:
                return visitor.visitChildren(self)




    def cursor_part(self):

        localctx = PlSqlParser.Cursor_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_cursor_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3761
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 3762
            self.subquery(0)
            self.state = 3763
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multiset_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(PlSqlParser.MEMBER, 0)

        def SUBMULTISET(self):
            return self.getToken(PlSqlParser.SUBMULTISET, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_multiset_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiset_type" ):
                listener.enterMultiset_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiset_type" ):
                listener.exitMultiset_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiset_type" ):
                return visitor.visitMultiset_type(self)
            else:
                return visitor.visitChildren(self)




    def multiset_type(self):

        localctx = PlSqlParser.Multiset_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_multiset_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3765
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.MEMBER or _la==PlSqlParser.SUBMULTISET):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Relational_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_equal_op(self):
            return self.getTypedRuleContext(PlSqlParser.Not_equal_opContext,0)


        def less_than_or_equals_op(self):
            return self.getTypedRuleContext(PlSqlParser.Less_than_or_equals_opContext,0)


        def greater_than_or_equals_op(self):
            return self.getTypedRuleContext(PlSqlParser.Greater_than_or_equals_opContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_relational_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_operator" ):
                listener.enterRelational_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_operator" ):
                listener.exitRelational_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_operator" ):
                return visitor.visitRelational_operator(self)
            else:
                return visitor.visitChildren(self)




    def relational_operator(self):

        localctx = PlSqlParser.Relational_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_relational_operator)
        try:
            self.state = 3773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,460,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3767
                self.match(PlSqlParser.EQUALS_OP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3768
                self.not_equal_op()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3769
                self.match(PlSqlParser.LESS_THAN_OP)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3770
                self.match(PlSqlParser.GREATER_THAN_OP)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3771
                self.less_than_or_equals_op()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3772
                self.greater_than_or_equals_op()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Like_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(PlSqlParser.LIKE, 0)

        def LIKEC(self):
            return self.getToken(PlSqlParser.LIKEC, 0)

        def LIKE2(self):
            return self.getToken(PlSqlParser.LIKE2, 0)

        def LIKE4(self):
            return self.getToken(PlSqlParser.LIKE4, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_like_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike_type" ):
                listener.enterLike_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike_type" ):
                listener.exitLike_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLike_type" ):
                return visitor.visitLike_type(self)
            else:
                return visitor.visitChildren(self)




    def like_type(self):

        localctx = PlSqlParser.Like_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_like_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3775
            _la = self._input.LA(1)
            if not(((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (PlSqlParser.LIKE - 202)) | (1 << (PlSqlParser.LIKE2 - 202)) | (1 << (PlSqlParser.LIKE4 - 202)) | (1 << (PlSqlParser.LIKEC - 202)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Like_escape_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ESCAPE(self):
            return self.getToken(PlSqlParser.ESCAPE, 0)

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_like_escape_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike_escape_part" ):
                listener.enterLike_escape_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike_escape_part" ):
                listener.exitLike_escape_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLike_escape_part" ):
                return visitor.visitLike_escape_part(self)
            else:
                return visitor.visitChildren(self)




    def like_escape_part(self):

        localctx = PlSqlParser.Like_escape_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_like_escape_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3777
            self.match(PlSqlParser.ESCAPE)
            self.state = 3778
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Between_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,i)


        def AND(self):
            return self.getToken(PlSqlParser.AND, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_between_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween_elements" ):
                listener.enterBetween_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween_elements" ):
                listener.exitBetween_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetween_elements" ):
                return visitor.visitBetween_elements(self)
            else:
                return visitor.visitChildren(self)




    def between_elements(self):

        localctx = PlSqlParser.Between_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_between_elements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3780
            self.concatenation()
            self.state = 3781
            self.match(PlSqlParser.AND)
            self.state = 3782
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConcatenationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binary_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Binary_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_concatenation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation" ):
                listener.enterConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation" ):
                listener.exitConcatenation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcatenation" ):
                return visitor.visitConcatenation(self)
            else:
                return visitor.visitChildren(self)




    def concatenation(self):

        localctx = PlSqlParser.ConcatenationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_concatenation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3784
            self.binary_expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Binary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlSqlParser.RULE_binary_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class BinaryExprContext(Binary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.Binary_expressionContext
            super().__init__(parser)
            self.left = None # Binary_expressionContext
            self.op = None # Token
            self.right = None # Binary_expressionContext
            self.copyFrom(ctx)

        def binary_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Binary_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Binary_expressionContext,i)

        def CONCATENATION_OP(self):
            return self.getToken(PlSqlParser.CONCATENATION_OP, 0)
        def AT(self):
            return self.getToken(PlSqlParser.AT, 0)
        def interval_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Interval_expressionContext,0)

        def LOCAL(self):
            return self.getToken(PlSqlParser.LOCAL, 0)
        def TIME(self):
            return self.getToken(PlSqlParser.TIME, 0)
        def ZONE(self):
            return self.getToken(PlSqlParser.ZONE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryExpr" ):
                listener.enterBinaryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryExpr" ):
                listener.exitBinaryExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryExpr" ):
                return visitor.visitBinaryExpr(self)
            else:
                return visitor.visitChildren(self)


    class IgnoreBinaryExprContext(Binary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.Binary_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unary_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Unary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreBinaryExpr" ):
                listener.enterIgnoreBinaryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreBinaryExpr" ):
                listener.exitIgnoreBinaryExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreBinaryExpr" ):
                return visitor.visitIgnoreBinaryExpr(self)
            else:
                return visitor.visitChildren(self)


    class ParenBinaryExprContext(Binary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.Binary_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def binary_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Binary_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenBinaryExpr" ):
                listener.enterParenBinaryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenBinaryExpr" ):
                listener.exitParenBinaryExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenBinaryExpr" ):
                return visitor.visitParenBinaryExpr(self)
            else:
                return visitor.visitChildren(self)



    def binary_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlSqlParser.Binary_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 512
        self.enterRecursionRule(localctx, 512, self.RULE_binary_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,461,self._ctx)
            if la_ == 1:
                localctx = PlSqlParser.ParenBinaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3787
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3788
                self.binary_expression(0)
                self.state = 3789
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                localctx = PlSqlParser.IgnoreBinaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3791
                self.unary_expression(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3816
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,465,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3814
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,464,self._ctx)
                    if la_ == 1:
                        localctx = PlSqlParser.BinaryExprContext(self, PlSqlParser.Binary_expressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 3794
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 3795
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 490)) & ~0x3f) == 0 and ((1 << (_la - 490)) & ((1 << (PlSqlParser.PERCENT - 490)) | (1 << (PlSqlParser.ASTERISK - 490)) | (1 << (PlSqlParser.SOLIDUS - 490)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3796
                        localctx.right = self.binary_expression(6)
                        pass

                    elif la_ == 2:
                        localctx = PlSqlParser.BinaryExprContext(self, PlSqlParser.Binary_expressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 3797
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 3798
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.PLUS_SIGN or _la==PlSqlParser.MINUS_SIGN):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3799
                        localctx.right = self.binary_expression(5)
                        pass

                    elif la_ == 3:
                        localctx = PlSqlParser.BinaryExprContext(self, PlSqlParser.Binary_expressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 3800
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 3801
                        localctx.op = self.match(PlSqlParser.CONCATENATION_OP)
                        self.state = 3802
                        localctx.right = self.binary_expression(4)
                        pass

                    elif la_ == 4:
                        localctx = PlSqlParser.BinaryExprContext(self, PlSqlParser.Binary_expressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 3803
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3812
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [PlSqlParser.AT]:
                            self.state = 3804
                            self.match(PlSqlParser.AT)
                            self.state = 3809
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [PlSqlParser.LOCAL]:
                                self.state = 3805
                                self.match(PlSqlParser.LOCAL)
                                pass
                            elif token in [PlSqlParser.TIME]:
                                self.state = 3806
                                self.match(PlSqlParser.TIME)
                                self.state = 3807
                                self.match(PlSqlParser.ZONE)
                                self.state = 3808
                                self.binary_expression(0)
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass
                        elif token in [PlSqlParser.DAY, PlSqlParser.YEAR]:
                            self.state = 3811
                            self.interval_expression()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

             
                self.state = 3818
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,465,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Interval_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DAY(self):
            return self.getToken(PlSqlParser.DAY, 0)

        def TO(self):
            return self.getToken(PlSqlParser.TO, 0)

        def SECOND(self):
            return self.getToken(PlSqlParser.SECOND, 0)

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,i)


        def YEAR(self):
            return self.getToken(PlSqlParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(PlSqlParser.MONTH, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_interval_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expression" ):
                listener.enterInterval_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expression" ):
                listener.exitInterval_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval_expression" ):
                return visitor.visitInterval_expression(self)
            else:
                return visitor.visitChildren(self)




    def interval_expression(self):

        localctx = PlSqlParser.Interval_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_interval_expression)
        self._la = 0 # Token type
        try:
            self.state = 3843
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.DAY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3819
                self.match(PlSqlParser.DAY)
                self.state = 3824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.LEFT_PAREN:
                    self.state = 3820
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 3821
                    self.concatenation()
                    self.state = 3822
                    self.match(PlSqlParser.RIGHT_PAREN)


                self.state = 3826
                self.match(PlSqlParser.TO)
                self.state = 3827
                self.match(PlSqlParser.SECOND)
                self.state = 3832
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
                if la_ == 1:
                    self.state = 3828
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 3829
                    self.concatenation()
                    self.state = 3830
                    self.match(PlSqlParser.RIGHT_PAREN)


                pass
            elif token in [PlSqlParser.YEAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3834
                self.match(PlSqlParser.YEAR)
                self.state = 3839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.LEFT_PAREN:
                    self.state = 3835
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 3836
                    self.concatenation()
                    self.state = 3837
                    self.match(PlSqlParser.RIGHT_PAREN)


                self.state = 3841
                self.match(PlSqlParser.TO)
                self.state = 3842
                self.match(PlSqlParser.MONTH)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Unary_expressionContext,0)


        def model_expression_element(self):
            return self.getTypedRuleContext(PlSqlParser.Model_expression_elementContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_model_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_expression" ):
                listener.enterModel_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_expression" ):
                listener.exitModel_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_expression" ):
                return visitor.visitModel_expression(self)
            else:
                return visitor.visitChildren(self)




    def model_expression(self):

        localctx = PlSqlParser.Model_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_model_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3845
            self.unary_expression(0)
            self.state = 3846
            self.match(PlSqlParser.LEFT_BRACKET)
            self.state = 3847
            self.model_expression_element()
            self.state = 3848
            self.match(PlSqlParser.RIGHT_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_expression_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.ANY)
            else:
                return self.getToken(PlSqlParser.ANY, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def single_column_for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Single_column_for_loopContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Single_column_for_loopContext,i)


        def multi_column_for_loop(self):
            return self.getTypedRuleContext(PlSqlParser.Multi_column_for_loopContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_model_expression_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_expression_element" ):
                listener.enterModel_expression_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_expression_element" ):
                listener.exitModel_expression_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_expression_element" ):
                return visitor.visitModel_expression_element(self)
            else:
                return visitor.visitChildren(self)




    def model_expression_element(self):

        localctx = PlSqlParser.Model_expression_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_model_expression_element)
        self._la = 0 # Token type
        try:
            self.state = 3873
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,474,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3852
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,470,self._ctx)
                if la_ == 1:
                    self.state = 3850
                    self.match(PlSqlParser.ANY)
                    pass

                elif la_ == 2:
                    self.state = 3851
                    self.expression(0)
                    pass


                self.state = 3861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 3854
                    self.match(PlSqlParser.COMMA)
                    self.state = 3857
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,471,self._ctx)
                    if la_ == 1:
                        self.state = 3855
                        self.match(PlSqlParser.ANY)
                        pass

                    elif la_ == 2:
                        self.state = 3856
                        self.expression(0)
                        pass


                    self.state = 3863
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3864
                self.single_column_for_loop()
                self.state = 3869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 3865
                    self.match(PlSqlParser.COMMA)
                    self.state = 3866
                    self.single_column_for_loop()
                    self.state = 3871
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3872
                self.multi_column_for_loop()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Single_column_for_loopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ex1 = None # ExpressionContext
            self.ex2 = None # ExpressionContext
            self.ex3 = None # ExpressionContext

        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def expression_list(self):
            return self.getTypedRuleContext(PlSqlParser.Expression_listContext,0)


        def FROM(self):
            return self.getToken(PlSqlParser.FROM, 0)

        def TO(self):
            return self.getToken(PlSqlParser.TO, 0)

        def for_increment_decrement_type(self):
            return self.getTypedRuleContext(PlSqlParser.For_increment_decrement_typeContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def for_like_part(self):
            return self.getTypedRuleContext(PlSqlParser.For_like_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_single_column_for_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_column_for_loop" ):
                listener.enterSingle_column_for_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_column_for_loop" ):
                listener.exitSingle_column_for_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_column_for_loop" ):
                return visitor.visitSingle_column_for_loop(self)
            else:
                return visitor.visitChildren(self)




    def single_column_for_loop(self):

        localctx = PlSqlParser.Single_column_for_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_single_column_for_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3875
            self.match(PlSqlParser.FOR)
            self.state = 3876
            self.column_name()
            self.state = 3889
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.IN]:
                self.state = 3877
                self.match(PlSqlParser.IN)
                self.state = 3878
                self.expression_list()
                pass
            elif token in [PlSqlParser.FROM, PlSqlParser.LIKE]:
                self.state = 3880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.LIKE:
                    self.state = 3879
                    self.for_like_part()


                self.state = 3882
                self.match(PlSqlParser.FROM)
                self.state = 3883
                localctx.ex1 = self.expression(0)
                self.state = 3884
                self.match(PlSqlParser.TO)
                self.state = 3885
                localctx.ex2 = self.expression(0)
                self.state = 3886
                self.for_increment_decrement_type()
                self.state = 3887
                localctx.ex3 = self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_like_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(PlSqlParser.LIKE, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_for_like_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_like_part" ):
                listener.enterFor_like_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_like_part" ):
                listener.exitFor_like_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_like_part" ):
                return visitor.visitFor_like_part(self)
            else:
                return visitor.visitChildren(self)




    def for_like_part(self):

        localctx = PlSqlParser.For_like_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_for_like_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3891
            self.match(PlSqlParser.LIKE)
            self.state = 3892
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_increment_decrement_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCREMENT(self):
            return self.getToken(PlSqlParser.INCREMENT, 0)

        def DECREMENT(self):
            return self.getToken(PlSqlParser.DECREMENT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_for_increment_decrement_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_increment_decrement_type" ):
                listener.enterFor_increment_decrement_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_increment_decrement_type" ):
                listener.exitFor_increment_decrement_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_increment_decrement_type" ):
                return visitor.visitFor_increment_decrement_type(self)
            else:
                return visitor.visitChildren(self)




    def for_increment_decrement_type(self):

        localctx = PlSqlParser.For_increment_decrement_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_for_increment_decrement_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3894
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.DECREMENT or _la==PlSqlParser.INCREMENT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multi_column_for_loopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_nameContext,i)


        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Expression_listContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_multi_column_for_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_column_for_loop" ):
                listener.enterMulti_column_for_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_column_for_loop" ):
                listener.exitMulti_column_for_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulti_column_for_loop" ):
                return visitor.visitMulti_column_for_loop(self)
            else:
                return visitor.visitChildren(self)




    def multi_column_for_loop(self):

        localctx = PlSqlParser.Multi_column_for_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_multi_column_for_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3896
            self.match(PlSqlParser.FOR)
            self.state = 3897
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 3898
            self.column_name()
            self.state = 3903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 3899
                self.match(PlSqlParser.COMMA)
                self.state = 3900
                self.column_name()
                self.state = 3905
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3906
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 3907
            self.match(PlSqlParser.IN)
            self.state = 3908
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 3921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,479,self._ctx)
            if la_ == 1:
                self.state = 3909
                self.subquery(0)
                pass

            elif la_ == 2:
                self.state = 3910
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 3911
                self.expression_list()
                self.state = 3916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 3912
                    self.match(PlSqlParser.COMMA)
                    self.state = 3913
                    self.expression_list()
                    self.state = 3918
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3919
                self.match(PlSqlParser.RIGHT_PAREN)
                pass


            self.state = 3923
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlSqlParser.RULE_unary_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IgnoreUnaryExprContext(Unary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.Unary_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def case_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Case_statementContext,0)

        def quantified_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Quantified_expressionContext,0)

        def standard_function(self):
            return self.getTypedRuleContext(PlSqlParser.Standard_functionContext,0)

        def atom(self):
            return self.getTypedRuleContext(PlSqlParser.AtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreUnaryExpr" ):
                listener.enterIgnoreUnaryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreUnaryExpr" ):
                listener.exitIgnoreUnaryExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreUnaryExpr" ):
                return visitor.visitIgnoreUnaryExpr(self)
            else:
                return visitor.visitChildren(self)


    class UnaryExprContext(Unary_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.Unary_expressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def unary_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Unary_expressionContext,0)

        def PRIOR(self):
            return self.getToken(PlSqlParser.PRIOR, 0)
        def CONNECT_BY_ROOT(self):
            return self.getToken(PlSqlParser.CONNECT_BY_ROOT, 0)
        def NEW(self):
            return self.getToken(PlSqlParser.NEW, 0)
        def DISTINCT(self):
            return self.getToken(PlSqlParser.DISTINCT, 0)
        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)
        def model_expression_element(self):
            return self.getTypedRuleContext(PlSqlParser.Model_expression_elementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpr" ):
                listener.enterUnaryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpr" ):
                listener.exitUnaryExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpr" ):
                return visitor.visitUnaryExpr(self)
            else:
                return visitor.visitChildren(self)



    def unary_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PlSqlParser.Unary_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 528
        self.enterRecursionRule(localctx, 528, self.RULE_unary_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3942
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,480,self._ctx)
            if la_ == 1:
                localctx = PlSqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3926
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.PLUS_SIGN or _la==PlSqlParser.MINUS_SIGN):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3927
                self.unary_expression(10)
                pass

            elif la_ == 2:
                localctx = PlSqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3928
                localctx.op = self.match(PlSqlParser.PRIOR)
                self.state = 3929
                self.unary_expression(9)
                pass

            elif la_ == 3:
                localctx = PlSqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3930
                localctx.op = self.match(PlSqlParser.CONNECT_BY_ROOT)
                self.state = 3931
                self.unary_expression(8)
                pass

            elif la_ == 4:
                localctx = PlSqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3932
                localctx.op = self.match(PlSqlParser.NEW)
                self.state = 3933
                self.unary_expression(7)
                pass

            elif la_ == 5:
                localctx = PlSqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3934
                localctx.op = self.match(PlSqlParser.DISTINCT)
                self.state = 3935
                self.unary_expression(6)
                pass

            elif la_ == 6:
                localctx = PlSqlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3936
                localctx.op = self.match(PlSqlParser.ALL)
                self.state = 3937
                self.unary_expression(5)
                pass

            elif la_ == 7:
                localctx = PlSqlParser.IgnoreUnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3938
                self.case_statement()
                pass

            elif la_ == 8:
                localctx = PlSqlParser.IgnoreUnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3939
                self.quantified_expression()
                pass

            elif la_ == 9:
                localctx = PlSqlParser.IgnoreUnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3940
                self.standard_function()
                pass

            elif la_ == 10:
                localctx = PlSqlParser.IgnoreUnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3941
                self.atom()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3951
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,481,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PlSqlParser.UnaryExprContext(self, PlSqlParser.Unary_expressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_unary_expression)
                    self.state = 3944
                    if not self.precpred(self._ctx, 11):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                    self.state = 3945
                    localctx.op = self.match(PlSqlParser.LEFT_BRACKET)
                    self.state = 3946
                    self.model_expression_element()
                    self.state = 3947
                    self.match(PlSqlParser.RIGHT_BRACKET) 
                self.state = 3953
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,481,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def searched_case_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Searched_case_statementContext,0)


        def simple_case_statement(self):
            return self.getTypedRuleContext(PlSqlParser.Simple_case_statementContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_case_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_statement" ):
                listener.enterCase_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_statement" ):
                listener.exitCase_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_statement" ):
                return visitor.visitCase_statement(self)
            else:
                return visitor.visitChildren(self)




    def case_statement(self):

        localctx = PlSqlParser.Case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_case_statement)
        try:
            self.state = 3956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,482,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3954
                self.searched_case_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3955
                self.simple_case_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ck1 = None # Token

        def atom(self):
            return self.getTypedRuleContext(PlSqlParser.AtomContext,0)


        def END(self):
            return self.getToken(PlSqlParser.END, 0)

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.CASE)
            else:
                return self.getToken(PlSqlParser.CASE, i)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Label_nameContext,i)


        def simple_case_when_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Simple_case_when_partContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Simple_case_when_partContext,i)


        def case_else_part(self):
            return self.getTypedRuleContext(PlSqlParser.Case_else_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_simple_case_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_case_statement" ):
                listener.enterSimple_case_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_case_statement" ):
                listener.exitSimple_case_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_case_statement" ):
                return visitor.visitSimple_case_statement(self)
            else:
                return visitor.visitChildren(self)




    def simple_case_statement(self):

        localctx = PlSqlParser.Simple_case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_simple_case_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 3958
                self.label_name()


            self.state = 3961
            localctx.ck1 = self.match(PlSqlParser.CASE)
            self.state = 3962
            self.atom()
            self.state = 3964 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3963
                self.simple_case_when_part()
                self.state = 3966 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.WHEN):
                    break

            self.state = 3969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ELSE:
                self.state = 3968
                self.case_else_part()


            self.state = 3971
            self.match(PlSqlParser.END)
            self.state = 3973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,486,self._ctx)
            if la_ == 1:
                self.state = 3972
                self.match(PlSqlParser.CASE)


            self.state = 3976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,487,self._ctx)
            if la_ == 1:
                self.state = 3975
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_case_when_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PlSqlParser.WHEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def THEN(self):
            return self.getToken(PlSqlParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_simple_case_when_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_case_when_part" ):
                listener.enterSimple_case_when_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_case_when_part" ):
                listener.exitSimple_case_when_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_case_when_part" ):
                return visitor.visitSimple_case_when_part(self)
            else:
                return visitor.visitChildren(self)




    def simple_case_when_part(self):

        localctx = PlSqlParser.Simple_case_when_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_simple_case_when_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3978
            self.match(PlSqlParser.WHEN)
            self.state = 3979
            self.expression(0)
            self.state = 3980
            self.match(PlSqlParser.THEN)
            self.state = 3983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,488,self._ctx)
            if la_ == 1:
                self.state = 3981
                self.seq_of_statements()
                pass

            elif la_ == 2:
                self.state = 3982
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Searched_case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ck1 = None # Token

        def END(self):
            return self.getToken(PlSqlParser.END, 0)

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.CASE)
            else:
                return self.getToken(PlSqlParser.CASE, i)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Label_nameContext,i)


        def searched_case_when_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Searched_case_when_partContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Searched_case_when_partContext,i)


        def case_else_part(self):
            return self.getTypedRuleContext(PlSqlParser.Case_else_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_searched_case_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearched_case_statement" ):
                listener.enterSearched_case_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearched_case_statement" ):
                listener.exitSearched_case_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearched_case_statement" ):
                return visitor.visitSearched_case_statement(self)
            else:
                return visitor.visitChildren(self)




    def searched_case_statement(self):

        localctx = PlSqlParser.Searched_case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_searched_case_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 3985
                self.label_name()


            self.state = 3988
            localctx.ck1 = self.match(PlSqlParser.CASE)
            self.state = 3990 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3989
                self.searched_case_when_part()
                self.state = 3992 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PlSqlParser.WHEN):
                    break

            self.state = 3995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ELSE:
                self.state = 3994
                self.case_else_part()


            self.state = 3997
            self.match(PlSqlParser.END)
            self.state = 3999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,492,self._ctx)
            if la_ == 1:
                self.state = 3998
                self.match(PlSqlParser.CASE)


            self.state = 4002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,493,self._ctx)
            if la_ == 1:
                self.state = 4001
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Searched_case_when_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PlSqlParser.WHEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def THEN(self):
            return self.getToken(PlSqlParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_searched_case_when_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearched_case_when_part" ):
                listener.enterSearched_case_when_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearched_case_when_part" ):
                listener.exitSearched_case_when_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearched_case_when_part" ):
                return visitor.visitSearched_case_when_part(self)
            else:
                return visitor.visitChildren(self)




    def searched_case_when_part(self):

        localctx = PlSqlParser.Searched_case_when_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_searched_case_when_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4004
            self.match(PlSqlParser.WHEN)
            self.state = 4005
            self.expression(0)
            self.state = 4006
            self.match(PlSqlParser.THEN)
            self.state = 4009
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,494,self._ctx)
            if la_ == 1:
                self.state = 4007
                self.seq_of_statements()
                pass

            elif la_ == 2:
                self.state = 4008
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_else_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(PlSqlParser.ELSE, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(PlSqlParser.Seq_of_statementsContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_case_else_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_else_part" ):
                listener.enterCase_else_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_else_part" ):
                listener.exitCase_else_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_else_part" ):
                return visitor.visitCase_else_part(self)
            else:
                return visitor.visitChildren(self)




    def case_else_part(self):

        localctx = PlSqlParser.Case_else_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_case_else_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4011
            self.match(PlSqlParser.ELSE)
            self.state = 4014
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,495,self._ctx)
            if la_ == 1:
                self.state = 4012
                self.seq_of_statements()
                pass

            elif la_ == 2:
                self.state = 4013
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_element(self):
            return self.getTypedRuleContext(PlSqlParser.Table_elementContext,0)


        def outer_join_sign(self):
            return self.getTypedRuleContext(PlSqlParser.Outer_join_signContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(PlSqlParser.Bind_variableContext,0)


        def constant(self):
            return self.getTypedRuleContext(PlSqlParser.ConstantContext,0)


        def general_element(self):
            return self.getTypedRuleContext(PlSqlParser.General_elementContext,0)


        def atom(self):
            return self.getTypedRuleContext(PlSqlParser.AtomContext,0)


        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(PlSqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = PlSqlParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_atom)
        try:
            self.state = 4033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,497,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4016
                self.table_element()
                self.state = 4017
                self.outer_join_sign()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4019
                self.bind_variable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4020
                self.constant()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4021
                self.general_element()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4022
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4023
                self.atom()
                self.state = 4024
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4031
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,496,self._ctx)
                if la_ == 1:
                    self.state = 4026
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 4027
                    self.subquery(0)
                    self.state = 4028
                    self.match(PlSqlParser.RIGHT_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 4030
                    self.expression_list()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_or_vectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def vector_expr(self):
            return self.getTypedRuleContext(PlSqlParser.Vector_exprContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_expression_or_vector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_or_vector" ):
                listener.enterExpression_or_vector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_or_vector" ):
                listener.exitExpression_or_vector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_or_vector" ):
                return visitor.visitExpression_or_vector(self)
            else:
                return visitor.visitChildren(self)




    def expression_or_vector(self):

        localctx = PlSqlParser.Expression_or_vectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_expression_or_vector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4035
            self.expression(0)
            self.state = 4037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.COMMA:
                self.state = 4036
                self.vector_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Vector_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_vector_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expr" ):
                listener.enterVector_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expr" ):
                listener.exitVector_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVector_expr" ):
                return visitor.visitVector_expr(self)
            else:
                return visitor.visitChildren(self)




    def vector_expr(self):

        localctx = PlSqlParser.Vector_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_vector_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4039
            self.match(PlSqlParser.COMMA)
            self.state = 4040
            self.expression(0)
            self.state = 4045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 4041
                self.match(PlSqlParser.COMMA)
                self.state = 4042
                self.expression(0)
                self.state = 4047
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Quantified_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOME(self):
            return self.getToken(PlSqlParser.SOME, 0)

        def EXISTS(self):
            return self.getToken(PlSqlParser.EXISTS, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def ANY(self):
            return self.getToken(PlSqlParser.ANY, 0)

        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_quantified_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantified_expression" ):
                listener.enterQuantified_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantified_expression" ):
                listener.exitQuantified_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantified_expression" ):
                return visitor.visitQuantified_expression(self)
            else:
                return visitor.visitChildren(self)




    def quantified_expression(self):

        localctx = PlSqlParser.Quantified_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_quantified_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4048
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.ALL or _la==PlSqlParser.ANY or _la==PlSqlParser.EXISTS or _la==PlSqlParser.SOME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,500,self._ctx)
            if la_ == 1:
                self.state = 4049
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4050
                self.subquery(0)
                self.state = 4051
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 4053
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4054
                self.expression(0)
                self.state = 4055
                self.match(PlSqlParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Standard_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlSqlParser.RULE_standard_function

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AggregateCallContext(Standard_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.Standard_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregate_windowed_function(self):
            return self.getTypedRuleContext(PlSqlParser.Aggregate_windowed_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateCall" ):
                listener.enterAggregateCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateCall" ):
                listener.exitAggregateCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregateCall" ):
                return visitor.visitAggregateCall(self)
            else:
                return visitor.visitChildren(self)


    class TodoCallContext(Standard_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.Standard_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def regular_id(self):
            return self.getTypedRuleContext(PlSqlParser.Regular_idContext,0)

        def function_argument_modeling(self):
            return self.getTypedRuleContext(PlSqlParser.Function_argument_modelingContext,0)

        def using_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Using_clauseContext,0)

        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)
        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)

        def CAST(self):
            return self.getToken(PlSqlParser.CAST, 0)
        def XMLCAST(self):
            return self.getToken(PlSqlParser.XMLCAST, 0)
        def MULTISET(self):
            return self.getToken(PlSqlParser.MULTISET, 0)
        def subquery(self):
            return self.getTypedRuleContext(PlSqlParser.SubqueryContext,0)

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)

        def CHR(self):
            return self.getToken(PlSqlParser.CHR, 0)
        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)
        def NCHAR_CS(self):
            return self.getToken(PlSqlParser.NCHAR_CS, 0)
        def COLLECT(self):
            return self.getToken(PlSqlParser.COLLECT, 0)
        def collect_order_by_part(self):
            return self.getTypedRuleContext(PlSqlParser.Collect_order_by_partContext,0)

        def DISTINCT(self):
            return self.getToken(PlSqlParser.DISTINCT, 0)
        def UNIQUE(self):
            return self.getToken(PlSqlParser.UNIQUE, 0)
        def within_or_over_clause_keyword(self):
            return self.getTypedRuleContext(PlSqlParser.Within_or_over_clause_keywordContext,0)

        def function_argument(self):
            return self.getTypedRuleContext(PlSqlParser.Function_argumentContext,0)

        def within_or_over_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Within_or_over_partContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Within_or_over_partContext,i)

        def DECOMPOSE(self):
            return self.getToken(PlSqlParser.DECOMPOSE, 0)
        def CANONICAL(self):
            return self.getToken(PlSqlParser.CANONICAL, 0)
        def COMPATIBILITY(self):
            return self.getToken(PlSqlParser.COMPATIBILITY, 0)
        def EXTRACT(self):
            return self.getToken(PlSqlParser.EXTRACT, 0)
        def FROM(self):
            return self.getToken(PlSqlParser.FROM, 0)
        def function_argument_analytic(self):
            return self.getTypedRuleContext(PlSqlParser.Function_argument_analyticContext,0)

        def over_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Over_clauseContext,0)

        def FIRST_VALUE(self):
            return self.getToken(PlSqlParser.FIRST_VALUE, 0)
        def LAST_VALUE(self):
            return self.getToken(PlSqlParser.LAST_VALUE, 0)
        def respect_or_ignore_nulls(self):
            return self.getTypedRuleContext(PlSqlParser.Respect_or_ignore_nullsContext,0)

        def standard_prediction_function_keyword(self):
            return self.getTypedRuleContext(PlSqlParser.Standard_prediction_function_keywordContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)

        def cost_matrix_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Cost_matrix_clauseContext,0)

        def TRANSLATE(self):
            return self.getToken(PlSqlParser.TRANSLATE, 0)
        def CHAR_CS(self):
            return self.getToken(PlSqlParser.CHAR_CS, 0)
        def TREAT(self):
            return self.getToken(PlSqlParser.TREAT, 0)
        def REF(self):
            return self.getToken(PlSqlParser.REF, 0)
        def TRIM(self):
            return self.getToken(PlSqlParser.TRIM, 0)
        def quoted_string(self):
            return self.getTypedRuleContext(PlSqlParser.Quoted_stringContext,0)

        def LEADING(self):
            return self.getToken(PlSqlParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(PlSqlParser.TRAILING, 0)
        def BOTH(self):
            return self.getToken(PlSqlParser.BOTH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTodoCall" ):
                listener.enterTodoCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTodoCall" ):
                listener.exitTodoCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTodoCall" ):
                return visitor.visitTodoCall(self)
            else:
                return visitor.visitChildren(self)


    class XmlCallContext(Standard_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.Standard_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def XMLAGG(self):
            return self.getToken(PlSqlParser.XMLAGG, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)

        def order_by_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Order_by_clauseContext,0)

        def general_element(self):
            return self.getTypedRuleContext(PlSqlParser.General_elementContext,0)

        def xml_multiuse_expression_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Xml_multiuse_expression_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Xml_multiuse_expression_elementContext,i)

        def XMLCOLATTVAL(self):
            return self.getToken(PlSqlParser.XMLCOLATTVAL, 0)
        def XMLFOREST(self):
            return self.getToken(PlSqlParser.XMLFOREST, 0)
        def XMLELEMENT(self):
            return self.getToken(PlSqlParser.XMLELEMENT, 0)
        def xml_attributes_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Xml_attributes_clauseContext,0)

        def ENTITYESCAPING(self):
            return self.getToken(PlSqlParser.ENTITYESCAPING, 0)
        def NOENTITYESCAPING(self):
            return self.getToken(PlSqlParser.NOENTITYESCAPING, 0)
        def NAME(self):
            return self.getToken(PlSqlParser.NAME, 0)
        def EVALNAME(self):
            return self.getToken(PlSqlParser.EVALNAME, 0)
        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_aliasContext,i)

        def XMLEXISTS(self):
            return self.getToken(PlSqlParser.XMLEXISTS, 0)
        def xml_passing_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Xml_passing_clauseContext,0)

        def XMLPARSE(self):
            return self.getToken(PlSqlParser.XMLPARSE, 0)
        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,i)

        def DOCUMENT(self):
            return self.getToken(PlSqlParser.DOCUMENT, 0)
        def CONTENT(self):
            return self.getToken(PlSqlParser.CONTENT, 0)
        def WELLFORMED(self):
            return self.getToken(PlSqlParser.WELLFORMED, 0)
        def XMLPI(self):
            return self.getToken(PlSqlParser.XMLPI, 0)
        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)

        def XMLQUERY(self):
            return self.getToken(PlSqlParser.XMLQUERY, 0)
        def RETURNING(self):
            return self.getToken(PlSqlParser.RETURNING, 0)
        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)
        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)
        def EMPTY(self):
            return self.getToken(PlSqlParser.EMPTY, 0)
        def XMLROOT(self):
            return self.getToken(PlSqlParser.XMLROOT, 0)
        def xmlroot_param_version_part(self):
            return self.getTypedRuleContext(PlSqlParser.Xmlroot_param_version_partContext,0)

        def xmlroot_param_standalone_part(self):
            return self.getTypedRuleContext(PlSqlParser.Xmlroot_param_standalone_partContext,0)

        def XMLSERIALIZE(self):
            return self.getToken(PlSqlParser.XMLSERIALIZE, 0)
        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)
        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)

        def xmlserialize_param_enconding_part(self):
            return self.getTypedRuleContext(PlSqlParser.Xmlserialize_param_enconding_partContext,0)

        def xmlserialize_param_version_part(self):
            return self.getTypedRuleContext(PlSqlParser.Xmlserialize_param_version_partContext,0)

        def xmlserialize_param_ident_part(self):
            return self.getTypedRuleContext(PlSqlParser.Xmlserialize_param_ident_partContext,0)

        def DEFAULTS(self):
            return self.getToken(PlSqlParser.DEFAULTS, 0)
        def HIDE(self):
            return self.getToken(PlSqlParser.HIDE, 0)
        def SHOW(self):
            return self.getToken(PlSqlParser.SHOW, 0)
        def XMLTABLE(self):
            return self.getToken(PlSqlParser.XMLTABLE, 0)
        def xml_namespaces_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Xml_namespaces_clauseContext,0)

        def COLUMNS(self):
            return self.getToken(PlSqlParser.COLUMNS, 0)
        def xml_table_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Xml_table_columnContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Xml_table_columnContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlCall" ):
                listener.enterXmlCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlCall" ):
                listener.exitXmlCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlCall" ):
                return visitor.visitXmlCall(self)
            else:
                return visitor.visitChildren(self)



    def standard_function(self):

        localctx = PlSqlParser.Standard_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_standard_function)
        self._la = 0 # Token type
        try:
            self.state = 4356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,549,self._ctx)
            if la_ == 1:
                localctx = PlSqlParser.AggregateCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4059
                self.aggregate_windowed_function()
                pass

            elif la_ == 2:
                localctx = PlSqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4060
                self.regular_id()
                self.state = 4061
                self.function_argument_modeling()
                self.state = 4063
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,501,self._ctx)
                if la_ == 1:
                    self.state = 4062
                    self.using_clause()


                pass

            elif la_ == 3:
                localctx = PlSqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4065
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.CAST or _la==PlSqlParser.XMLCAST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4066
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4073
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,502,self._ctx)
                if la_ == 1:
                    self.state = 4067
                    self.match(PlSqlParser.MULTISET)
                    self.state = 4068
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 4069
                    self.subquery(0)
                    self.state = 4070
                    self.match(PlSqlParser.RIGHT_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 4072
                    self.concatenation()
                    pass


                self.state = 4075
                self.match(PlSqlParser.AS)
                self.state = 4076
                self.type_spec()
                self.state = 4077
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 4:
                localctx = PlSqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4079
                self.match(PlSqlParser.CHR)
                self.state = 4080
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4081
                self.concatenation()
                self.state = 4082
                self.match(PlSqlParser.USING)
                self.state = 4083
                self.match(PlSqlParser.NCHAR_CS)
                self.state = 4084
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 5:
                localctx = PlSqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4086
                self.match(PlSqlParser.COLLECT)
                self.state = 4087
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4089
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,503,self._ctx)
                if la_ == 1:
                    self.state = 4088
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.DISTINCT or _la==PlSqlParser.UNIQUE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4091
                self.concatenation()
                self.state = 4093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ORDER:
                    self.state = 4092
                    self.collect_order_by_part()


                self.state = 4095
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 6:
                localctx = PlSqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4097
                self.within_or_over_clause_keyword()
                self.state = 4098
                self.function_argument()
                self.state = 4100 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4099
                        self.within_or_over_part()

                    else:
                        raise NoViableAltException(self)
                    self.state = 4102 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,505,self._ctx)

                pass

            elif la_ == 7:
                localctx = PlSqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 4104
                self.match(PlSqlParser.DECOMPOSE)
                self.state = 4105
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4106
                self.concatenation()
                self.state = 4108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.CANONICAL or _la==PlSqlParser.COMPATIBILITY:
                    self.state = 4107
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.CANONICAL or _la==PlSqlParser.COMPATIBILITY):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4110
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 8:
                localctx = PlSqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 4112
                self.match(PlSqlParser.EXTRACT)
                self.state = 4113
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4114
                self.regular_id()
                self.state = 4115
                self.match(PlSqlParser.FROM)
                self.state = 4116
                self.concatenation()
                self.state = 4117
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 9:
                localctx = PlSqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 4119
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.FIRST_VALUE or _la==PlSqlParser.LAST_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4120
                self.function_argument_analytic()
                self.state = 4122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.IGNORE or _la==PlSqlParser.RESPECT:
                    self.state = 4121
                    self.respect_or_ignore_nulls()


                self.state = 4124
                self.over_clause()
                pass

            elif la_ == 10:
                localctx = PlSqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 4126
                self.standard_prediction_function_keyword()
                self.state = 4127
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4128
                self.expression(0)
                self.state = 4133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 4129
                    self.match(PlSqlParser.COMMA)
                    self.state = 4130
                    self.expression(0)
                    self.state = 4135
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COST:
                    self.state = 4136
                    self.cost_matrix_clause()


                self.state = 4140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.USING:
                    self.state = 4139
                    self.using_clause()


                self.state = 4142
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 11:
                localctx = PlSqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 4144
                self.match(PlSqlParser.TRANSLATE)
                self.state = 4145
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4146
                self.expression(0)
                self.state = 4149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.USING:
                    self.state = 4147
                    self.match(PlSqlParser.USING)
                    self.state = 4148
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.CHAR_CS or _la==PlSqlParser.NCHAR_CS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 4151
                    self.match(PlSqlParser.COMMA)
                    self.state = 4152
                    self.expression(0)
                    self.state = 4157
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4158
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 12:
                localctx = PlSqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 4160
                self.match(PlSqlParser.TREAT)
                self.state = 4161
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4162
                self.expression(0)
                self.state = 4163
                self.match(PlSqlParser.AS)
                self.state = 4165
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,513,self._ctx)
                if la_ == 1:
                    self.state = 4164
                    self.match(PlSqlParser.REF)


                self.state = 4167
                self.type_spec()
                self.state = 4168
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 13:
                localctx = PlSqlParser.TodoCallContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 4170
                self.match(PlSqlParser.TRIM)
                self.state = 4171
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4179
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,516,self._ctx)
                if la_ == 1:
                    self.state = 4173
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.BOTH or _la==PlSqlParser.LEADING or _la==PlSqlParser.TRAILING:
                        self.state = 4172
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.BOTH or _la==PlSqlParser.LEADING or _la==PlSqlParser.TRAILING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 4176
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.NATIONAL_CHAR_STRING_LIT or _la==PlSqlParser.CHAR_STRING:
                        self.state = 4175
                        self.quoted_string()


                    self.state = 4178
                    self.match(PlSqlParser.FROM)


                self.state = 4181
                self.concatenation()
                self.state = 4182
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 14:
                localctx = PlSqlParser.XmlCallContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 4184
                self.match(PlSqlParser.XMLAGG)
                self.state = 4185
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4186
                self.expression(0)
                self.state = 4188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ORDER:
                    self.state = 4187
                    self.order_by_clause()


                self.state = 4190
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 4193
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,518,self._ctx)
                if la_ == 1:
                    self.state = 4191
                    self.match(PlSqlParser.PERIOD)
                    self.state = 4192
                    self.general_element()


                pass

            elif la_ == 15:
                localctx = PlSqlParser.XmlCallContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 4195
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.XMLCOLATTVAL or _la==PlSqlParser.XMLFOREST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4196
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4197
                self.xml_multiuse_expression_element()
                self.state = 4202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 4198
                    self.match(PlSqlParser.COMMA)
                    self.state = 4199
                    self.xml_multiuse_expression_element()
                    self.state = 4204
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4205
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 4208
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,520,self._ctx)
                if la_ == 1:
                    self.state = 4206
                    self.match(PlSqlParser.PERIOD)
                    self.state = 4207
                    self.general_element()


                pass

            elif la_ == 16:
                localctx = PlSqlParser.XmlCallContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 4210
                self.match(PlSqlParser.XMLELEMENT)
                self.state = 4211
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,521,self._ctx)
                if la_ == 1:
                    self.state = 4212
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.ENTITYESCAPING or _la==PlSqlParser.NOENTITYESCAPING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4216
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,522,self._ctx)
                if la_ == 1:
                    self.state = 4215
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.EVALNAME or _la==PlSqlParser.NAME):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4218
                self.expression(0)
                self.state = 4221
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,523,self._ctx)
                if la_ == 1:
                    self.state = 4219
                    self.match(PlSqlParser.COMMA)
                    self.state = 4220
                    self.xml_attributes_clause()


                self.state = 4230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 4223
                    self.match(PlSqlParser.COMMA)
                    self.state = 4224
                    self.expression(0)
                    self.state = 4226
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.AS) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 448)) | (1 << (PlSqlParser.CHAR_STRING - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                        self.state = 4225
                        self.column_alias()


                    self.state = 4232
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4233
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 4236
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,526,self._ctx)
                if la_ == 1:
                    self.state = 4234
                    self.match(PlSqlParser.PERIOD)
                    self.state = 4235
                    self.general_element()


                pass

            elif la_ == 17:
                localctx = PlSqlParser.XmlCallContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 4238
                self.match(PlSqlParser.XMLEXISTS)
                self.state = 4239
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4240
                self.expression(0)
                self.state = 4242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.PASSING:
                    self.state = 4241
                    self.xml_passing_clause()


                self.state = 4244
                self.match(PlSqlParser.RIGHT_PAREN)
                pass

            elif la_ == 18:
                localctx = PlSqlParser.XmlCallContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 4246
                self.match(PlSqlParser.XMLPARSE)
                self.state = 4247
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4248
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.CONTENT or _la==PlSqlParser.DOCUMENT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4249
                self.concatenation()
                self.state = 4251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.WELLFORMED:
                    self.state = 4250
                    self.match(PlSqlParser.WELLFORMED)


                self.state = 4253
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 4256
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,529,self._ctx)
                if la_ == 1:
                    self.state = 4254
                    self.match(PlSqlParser.PERIOD)
                    self.state = 4255
                    self.general_element()


                pass

            elif la_ == 19:
                localctx = PlSqlParser.XmlCallContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 4258
                self.match(PlSqlParser.XMLPI)
                self.state = 4259
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4264
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.NAME]:
                    self.state = 4260
                    self.match(PlSqlParser.NAME)
                    self.state = 4261
                    self.r_id()
                    pass
                elif token in [PlSqlParser.EVALNAME]:
                    self.state = 4262
                    self.match(PlSqlParser.EVALNAME)
                    self.state = 4263
                    self.concatenation()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 4266
                    self.match(PlSqlParser.COMMA)
                    self.state = 4267
                    self.concatenation()


                self.state = 4270
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 4273
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,532,self._ctx)
                if la_ == 1:
                    self.state = 4271
                    self.match(PlSqlParser.PERIOD)
                    self.state = 4272
                    self.general_element()


                pass

            elif la_ == 20:
                localctx = PlSqlParser.XmlCallContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 4275
                self.match(PlSqlParser.XMLQUERY)
                self.state = 4276
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4277
                self.concatenation()
                self.state = 4279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.PASSING:
                    self.state = 4278
                    self.xml_passing_clause()


                self.state = 4281
                self.match(PlSqlParser.RETURNING)
                self.state = 4282
                self.match(PlSqlParser.CONTENT)
                self.state = 4286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.NULL:
                    self.state = 4283
                    self.match(PlSqlParser.NULL)
                    self.state = 4284
                    self.match(PlSqlParser.ON)
                    self.state = 4285
                    self.match(PlSqlParser.EMPTY)


                self.state = 4288
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 4291
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,535,self._ctx)
                if la_ == 1:
                    self.state = 4289
                    self.match(PlSqlParser.PERIOD)
                    self.state = 4290
                    self.general_element()


                pass

            elif la_ == 21:
                localctx = PlSqlParser.XmlCallContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 4293
                self.match(PlSqlParser.XMLROOT)
                self.state = 4294
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4295
                self.concatenation()
                self.state = 4298
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,536,self._ctx)
                if la_ == 1:
                    self.state = 4296
                    self.match(PlSqlParser.COMMA)
                    self.state = 4297
                    self.xmlroot_param_version_part()


                self.state = 4302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 4300
                    self.match(PlSqlParser.COMMA)
                    self.state = 4301
                    self.xmlroot_param_standalone_part()


                self.state = 4304
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 4307
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,538,self._ctx)
                if la_ == 1:
                    self.state = 4305
                    self.match(PlSqlParser.PERIOD)
                    self.state = 4306
                    self.general_element()


                pass

            elif la_ == 22:
                localctx = PlSqlParser.XmlCallContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 4309
                self.match(PlSqlParser.XMLSERIALIZE)
                self.state = 4310
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4311
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.CONTENT or _la==PlSqlParser.DOCUMENT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4312
                self.concatenation()
                self.state = 4315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.AS:
                    self.state = 4313
                    self.match(PlSqlParser.AS)
                    self.state = 4314
                    self.type_spec()


                self.state = 4318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.ENCODING:
                    self.state = 4317
                    self.xmlserialize_param_enconding_part()


                self.state = 4321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.VERSION:
                    self.state = 4320
                    self.xmlserialize_param_version_part()


                self.state = 4324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.INDENT or _la==PlSqlParser.NO:
                    self.state = 4323
                    self.xmlserialize_param_ident_part()


                self.state = 4328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.HIDE or _la==PlSqlParser.SHOW:
                    self.state = 4326
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.HIDE or _la==PlSqlParser.SHOW):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4327
                    self.match(PlSqlParser.DEFAULTS)


                self.state = 4330
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 4333
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,544,self._ctx)
                if la_ == 1:
                    self.state = 4331
                    self.match(PlSqlParser.PERIOD)
                    self.state = 4332
                    self.general_element()


                pass

            elif la_ == 23:
                localctx = PlSqlParser.XmlCallContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 4335
                self.match(PlSqlParser.XMLTABLE)
                self.state = 4336
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4338
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,545,self._ctx)
                if la_ == 1:
                    self.state = 4337
                    self.xml_namespaces_clause()


                self.state = 4340
                self.concatenation()
                self.state = 4342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.PASSING:
                    self.state = 4341
                    self.xml_passing_clause()


                self.state = 4349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COLUMNS:
                    self.state = 4344
                    self.match(PlSqlParser.COLUMNS)
                    self.state = 4345
                    self.xml_table_column()

                    self.state = 4346
                    self.match(PlSqlParser.COMMA)
                    self.state = 4347
                    self.xml_table_column()


                self.state = 4351
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 4354
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,548,self._ctx)
                if la_ == 1:
                    self.state = 4352
                    self.match(PlSqlParser.PERIOD)
                    self.state = 4353
                    self.general_element()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Aggregate_windowed_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.args = None # Token
            self.pref = None # Token

        def over_clause_keyword(self):
            return self.getTypedRuleContext(PlSqlParser.Over_clause_keywordContext,0)


        def function_argument_analytic(self):
            return self.getTypedRuleContext(PlSqlParser.Function_argument_analyticContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Over_clauseContext,0)


        def COUNT(self):
            return self.getToken(PlSqlParser.COUNT, 0)

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def DISTINCT(self):
            return self.getToken(PlSqlParser.DISTINCT, 0)

        def UNIQUE(self):
            return self.getToken(PlSqlParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(PlSqlParser.ALL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_aggregate_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_windowed_function" ):
                listener.enterAggregate_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_windowed_function" ):
                listener.exitAggregate_windowed_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_windowed_function" ):
                return visitor.visitAggregate_windowed_function(self)
            else:
                return visitor.visitChildren(self)




    def aggregate_windowed_function(self):

        localctx = PlSqlParser.Aggregate_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_aggregate_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 4376
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4358
                self.over_clause_keyword()
                self.state = 4359
                self.function_argument_analytic()
                self.state = 4361
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,550,self._ctx)
                if la_ == 1:
                    self.state = 4360
                    self.over_clause()


                pass
            elif token in [PlSqlParser.COUNT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4363
                self.match(PlSqlParser.COUNT)
                self.state = 4364
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4370
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.ASTERISK]:
                    self.state = 4365
                    localctx.args = self.match(PlSqlParser.ASTERISK)
                    pass
                elif token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ALL, PlSqlParser.ANALYZE, PlSqlParser.ANY, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CASE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONNECT_BY_ROOT, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DISTINCT, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FALSE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULL, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUE, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNIQUE, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT, PlSqlParser.CHAR_STRING, PlSqlParser.DELIMITED_ID, PlSqlParser.LEFT_PAREN, PlSqlParser.PLUS_SIGN, PlSqlParser.MINUS_SIGN, PlSqlParser.BINDVAR, PlSqlParser.COLON, PlSqlParser.REGULAR_ID]:
                    self.state = 4367
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,551,self._ctx)
                    if la_ == 1:
                        self.state = 4366
                        localctx.pref = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==PlSqlParser.ALL or _la==PlSqlParser.DISTINCT or _la==PlSqlParser.UNIQUE):
                            localctx.pref = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 4369
                    self.concatenation()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4372
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 4374
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,553,self._ctx)
                if la_ == 1:
                    self.state = 4373
                    self.over_clause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Over_clause_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(PlSqlParser.AVG, 0)

        def CORR(self):
            return self.getToken(PlSqlParser.CORR, 0)

        def LAG(self):
            return self.getToken(PlSqlParser.LAG, 0)

        def LEAD(self):
            return self.getToken(PlSqlParser.LEAD, 0)

        def MAX(self):
            return self.getToken(PlSqlParser.MAX, 0)

        def MEDIAN(self):
            return self.getToken(PlSqlParser.MEDIAN, 0)

        def MIN(self):
            return self.getToken(PlSqlParser.MIN, 0)

        def NTILE(self):
            return self.getToken(PlSqlParser.NTILE, 0)

        def RATIO_TO_REPORT(self):
            return self.getToken(PlSqlParser.RATIO_TO_REPORT, 0)

        def ROW_NUMBER(self):
            return self.getToken(PlSqlParser.ROW_NUMBER, 0)

        def SUM(self):
            return self.getToken(PlSqlParser.SUM, 0)

        def VARIANCE(self):
            return self.getToken(PlSqlParser.VARIANCE, 0)

        def REGR_(self):
            return self.getToken(PlSqlParser.REGR_, 0)

        def STDDEV(self):
            return self.getToken(PlSqlParser.STDDEV, 0)

        def VAR_(self):
            return self.getToken(PlSqlParser.VAR_, 0)

        def COVAR_(self):
            return self.getToken(PlSqlParser.COVAR_, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_over_clause_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause_keyword" ):
                listener.enterOver_clause_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause_keyword" ):
                listener.exitOver_clause_keyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver_clause_keyword" ):
                return visitor.visitOver_clause_keyword(self)
            else:
                return visitor.visitChildren(self)




    def over_clause_keyword(self):

        localctx = PlSqlParser.Over_clause_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_over_clause_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4378
            _la = self._input.LA(1)
            if not(((((_la - 465)) & ~0x3f) == 0 and ((1 << (_la - 465)) & ((1 << (PlSqlParser.AVG - 465)) | (1 << (PlSqlParser.CORR - 465)) | (1 << (PlSqlParser.LAG - 465)) | (1 << (PlSqlParser.LEAD - 465)) | (1 << (PlSqlParser.MAX - 465)) | (1 << (PlSqlParser.MEDIAN - 465)) | (1 << (PlSqlParser.MIN - 465)) | (1 << (PlSqlParser.NTILE - 465)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 465)) | (1 << (PlSqlParser.ROW_NUMBER - 465)) | (1 << (PlSqlParser.SUM - 465)) | (1 << (PlSqlParser.VARIANCE - 465)) | (1 << (PlSqlParser.REGR_ - 465)) | (1 << (PlSqlParser.STDDEV - 465)) | (1 << (PlSqlParser.VAR_ - 465)) | (1 << (PlSqlParser.COVAR_ - 465)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Within_or_over_clause_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CUME_DIST(self):
            return self.getToken(PlSqlParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(PlSqlParser.DENSE_RANK, 0)

        def LISTAGG(self):
            return self.getToken(PlSqlParser.LISTAGG, 0)

        def PERCENT_RANK(self):
            return self.getToken(PlSqlParser.PERCENT_RANK, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(PlSqlParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(PlSqlParser.PERCENTILE_DISC, 0)

        def RANK(self):
            return self.getToken(PlSqlParser.RANK, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_within_or_over_clause_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithin_or_over_clause_keyword" ):
                listener.enterWithin_or_over_clause_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithin_or_over_clause_keyword" ):
                listener.exitWithin_or_over_clause_keyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithin_or_over_clause_keyword" ):
                return visitor.visitWithin_or_over_clause_keyword(self)
            else:
                return visitor.visitChildren(self)




    def within_or_over_clause_keyword(self):

        localctx = PlSqlParser.Within_or_over_clause_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_within_or_over_clause_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4380
            _la = self._input.LA(1)
            if not(((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (PlSqlParser.CUME_DIST - 458)) | (1 << (PlSqlParser.DENSE_RANK - 458)) | (1 << (PlSqlParser.LISTAGG - 458)) | (1 << (PlSqlParser.PERCENT_RANK - 458)) | (1 << (PlSqlParser.PERCENTILE_CONT - 458)) | (1 << (PlSqlParser.PERCENTILE_DISC - 458)) | (1 << (PlSqlParser.RANK - 458)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Standard_prediction_function_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREDICTION(self):
            return self.getToken(PlSqlParser.PREDICTION, 0)

        def PREDICTION_BOUNDS(self):
            return self.getToken(PlSqlParser.PREDICTION_BOUNDS, 0)

        def PREDICTION_COST(self):
            return self.getToken(PlSqlParser.PREDICTION_COST, 0)

        def PREDICTION_DETAILS(self):
            return self.getToken(PlSqlParser.PREDICTION_DETAILS, 0)

        def PREDICTION_PROBABILITY(self):
            return self.getToken(PlSqlParser.PREDICTION_PROBABILITY, 0)

        def PREDICTION_SET(self):
            return self.getToken(PlSqlParser.PREDICTION_SET, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_standard_prediction_function_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandard_prediction_function_keyword" ):
                listener.enterStandard_prediction_function_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandard_prediction_function_keyword" ):
                listener.exitStandard_prediction_function_keyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandard_prediction_function_keyword" ):
                return visitor.visitStandard_prediction_function_keyword(self)
            else:
                return visitor.visitChildren(self)




    def standard_prediction_function_keyword(self):

        localctx = PlSqlParser.Standard_prediction_function_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_standard_prediction_function_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4382
            _la = self._input.LA(1)
            if not(((((_la - 452)) & ~0x3f) == 0 and ((1 << (_la - 452)) & ((1 << (PlSqlParser.PREDICTION - 452)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 452)) | (1 << (PlSqlParser.PREDICTION_COST - 452)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 452)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 452)) | (1 << (PlSqlParser.PREDICTION_SET - 452)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Over_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(PlSqlParser.OVER, 0)

        def query_partition_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Query_partition_clauseContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Order_by_clauseContext,0)


        def windowing_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Windowing_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver_clause" ):
                return visitor.visitOver_clause(self)
            else:
                return visitor.visitChildren(self)




    def over_clause(self):

        localctx = PlSqlParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4384
            self.match(PlSqlParser.OVER)
            self.state = 4385
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 4387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PARTITION:
                self.state = 4386
                self.query_partition_clause()


            self.state = 4393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.ORDER:
                self.state = 4389
                self.order_by_clause()
                self.state = 4391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.RANGE or _la==PlSqlParser.ROWS:
                    self.state = 4390
                    self.windowing_clause()




            self.state = 4395
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Windowing_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowing_type(self):
            return self.getTypedRuleContext(PlSqlParser.Windowing_typeContext,0)


        def BETWEEN(self):
            return self.getToken(PlSqlParser.BETWEEN, 0)

        def windowing_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Windowing_elementsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Windowing_elementsContext,i)


        def AND(self):
            return self.getToken(PlSqlParser.AND, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_windowing_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowing_clause" ):
                listener.enterWindowing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowing_clause" ):
                listener.exitWindowing_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowing_clause" ):
                return visitor.visitWindowing_clause(self)
            else:
                return visitor.visitChildren(self)




    def windowing_clause(self):

        localctx = PlSqlParser.Windowing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_windowing_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4397
            self.windowing_type()
            self.state = 4404
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.BETWEEN]:
                self.state = 4398
                self.match(PlSqlParser.BETWEEN)
                self.state = 4399
                self.windowing_elements()
                self.state = 4400
                self.match(PlSqlParser.AND)
                self.state = 4401
                self.windowing_elements()
                pass
            elif token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ALL, PlSqlParser.ANALYZE, PlSqlParser.ANY, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CASE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONNECT_BY_ROOT, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DISTINCT, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FALSE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULL, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUE, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT, PlSqlParser.CHAR_STRING, PlSqlParser.DELIMITED_ID, PlSqlParser.LEFT_PAREN, PlSqlParser.PLUS_SIGN, PlSqlParser.MINUS_SIGN, PlSqlParser.BINDVAR, PlSqlParser.COLON, PlSqlParser.REGULAR_ID]:
                self.state = 4403
                self.windowing_elements()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Windowing_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS(self):
            return self.getToken(PlSqlParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(PlSqlParser.RANGE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_windowing_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowing_type" ):
                listener.enterWindowing_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowing_type" ):
                listener.exitWindowing_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowing_type" ):
                return visitor.visitWindowing_type(self)
            else:
                return visitor.visitChildren(self)




    def windowing_type(self):

        localctx = PlSqlParser.Windowing_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_windowing_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4406
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.RANGE or _la==PlSqlParser.ROWS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Windowing_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(PlSqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(PlSqlParser.PRECEDING, 0)

        def CURRENT(self):
            return self.getToken(PlSqlParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(PlSqlParser.ROW, 0)

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def FOLLOWING(self):
            return self.getToken(PlSqlParser.FOLLOWING, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_windowing_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowing_elements" ):
                listener.enterWindowing_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowing_elements" ):
                listener.exitWindowing_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowing_elements" ):
                return visitor.visitWindowing_elements(self)
            else:
                return visitor.visitChildren(self)




    def windowing_elements(self):

        localctx = PlSqlParser.Windowing_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_windowing_elements)
        self._la = 0 # Token type
        try:
            self.state = 4415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,559,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4408
                self.match(PlSqlParser.UNBOUNDED)
                self.state = 4409
                self.match(PlSqlParser.PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4410
                self.match(PlSqlParser.CURRENT)
                self.state = 4411
                self.match(PlSqlParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4412
                self.concatenation()
                self.state = 4413
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.FOLLOWING or _la==PlSqlParser.PRECEDING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Using_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def using_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Using_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Using_elementContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_clause" ):
                listener.enterUsing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_clause" ):
                listener.exitUsing_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsing_clause" ):
                return visitor.visitUsing_clause(self)
            else:
                return visitor.visitChildren(self)




    def using_clause(self):

        localctx = PlSqlParser.Using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_using_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4417
            self.match(PlSqlParser.USING)
            self.state = 4427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,561,self._ctx)
            if la_ == 1:
                self.state = 4418
                self.match(PlSqlParser.ASTERISK)
                pass

            elif la_ == 2:
                self.state = 4419
                self.using_element()
                self.state = 4424
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,560,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4420
                        self.match(PlSqlParser.COMMA)
                        self.state = 4421
                        self.using_element() 
                    self.state = 4426
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,560,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Using_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selected_element(self):
            return self.getTypedRuleContext(PlSqlParser.Selected_elementContext,0)


        def IN(self):
            return self.getToken(PlSqlParser.IN, 0)

        def OUT(self):
            return self.getToken(PlSqlParser.OUT, 0)

        def column_alias(self):
            return self.getTypedRuleContext(PlSqlParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_using_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_element" ):
                listener.enterUsing_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_element" ):
                listener.exitUsing_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsing_element" ):
                return visitor.visitUsing_element(self)
            else:
                return visitor.visitChildren(self)




    def using_element(self):

        localctx = PlSqlParser.Using_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_using_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,563,self._ctx)
            if la_ == 1:
                self.state = 4429
                self.match(PlSqlParser.IN)
                self.state = 4431
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,562,self._ctx)
                if la_ == 1:
                    self.state = 4430
                    self.match(PlSqlParser.OUT)



            elif la_ == 2:
                self.state = 4433
                self.match(PlSqlParser.OUT)


            self.state = 4436
            self.selected_element()
            self.state = 4438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,564,self._ctx)
            if la_ == 1:
                self.state = 4437
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collect_order_by_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(PlSqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_collect_order_by_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollect_order_by_part" ):
                listener.enterCollect_order_by_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollect_order_by_part" ):
                listener.exitCollect_order_by_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollect_order_by_part" ):
                return visitor.visitCollect_order_by_part(self)
            else:
                return visitor.visitChildren(self)




    def collect_order_by_part(self):

        localctx = PlSqlParser.Collect_order_by_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_collect_order_by_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4440
            self.match(PlSqlParser.ORDER)
            self.state = 4441
            self.match(PlSqlParser.BY)
            self.state = 4442
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Within_or_over_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHIN(self):
            return self.getToken(PlSqlParser.WITHIN, 0)

        def GROUP(self):
            return self.getToken(PlSqlParser.GROUP, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Order_by_clauseContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Over_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_within_or_over_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithin_or_over_part" ):
                listener.enterWithin_or_over_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithin_or_over_part" ):
                listener.exitWithin_or_over_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithin_or_over_part" ):
                return visitor.visitWithin_or_over_part(self)
            else:
                return visitor.visitChildren(self)




    def within_or_over_part(self):

        localctx = PlSqlParser.Within_or_over_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_within_or_over_part)
        try:
            self.state = 4451
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.WITHIN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4444
                self.match(PlSqlParser.WITHIN)
                self.state = 4445
                self.match(PlSqlParser.GROUP)
                self.state = 4446
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4447
                self.order_by_clause()
                self.state = 4448
                self.match(PlSqlParser.RIGHT_PAREN)
                pass
            elif token in [PlSqlParser.OVER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4450
                self.over_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cost_matrix_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COST(self):
            return self.getToken(PlSqlParser.COST, 0)

        def MODEL(self):
            return self.getToken(PlSqlParser.MODEL, 0)

        def cost_class_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Cost_class_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Cost_class_nameContext,i)


        def VALUES(self):
            return self.getToken(PlSqlParser.VALUES, 0)

        def expression_list(self):
            return self.getTypedRuleContext(PlSqlParser.Expression_listContext,0)


        def AUTO(self):
            return self.getToken(PlSqlParser.AUTO, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_cost_matrix_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCost_matrix_clause" ):
                listener.enterCost_matrix_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCost_matrix_clause" ):
                listener.exitCost_matrix_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCost_matrix_clause" ):
                return visitor.visitCost_matrix_clause(self)
            else:
                return visitor.visitChildren(self)




    def cost_matrix_clause(self):

        localctx = PlSqlParser.Cost_matrix_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_cost_matrix_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4453
            self.match(PlSqlParser.COST)
            self.state = 4471
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.MODEL]:
                self.state = 4454
                self.match(PlSqlParser.MODEL)
                self.state = 4456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.AUTO:
                    self.state = 4455
                    self.match(PlSqlParser.AUTO)


                pass
            elif token in [PlSqlParser.LEFT_PAREN]:
                self.state = 4458
                self.match(PlSqlParser.LEFT_PAREN)
                self.state = 4459
                self.cost_class_name()
                self.state = 4464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 4460
                    self.match(PlSqlParser.COMMA)
                    self.state = 4461
                    self.cost_class_name()
                    self.state = 4466
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4467
                self.match(PlSqlParser.RIGHT_PAREN)
                self.state = 4468
                self.match(PlSqlParser.VALUES)
                self.state = 4469
                self.expression_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_passing_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSING(self):
            return self.getToken(PlSqlParser.PASSING, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def BY(self):
            return self.getToken(PlSqlParser.BY, 0)

        def VALUE(self):
            return self.getToken(PlSqlParser.VALUE, 0)

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_aliasContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xml_passing_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_passing_clause" ):
                listener.enterXml_passing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_passing_clause" ):
                listener.exitXml_passing_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_passing_clause" ):
                return visitor.visitXml_passing_clause(self)
            else:
                return visitor.visitChildren(self)




    def xml_passing_clause(self):

        localctx = PlSqlParser.Xml_passing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_xml_passing_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4473
            self.match(PlSqlParser.PASSING)
            self.state = 4476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.BY:
                self.state = 4474
                self.match(PlSqlParser.BY)
                self.state = 4475
                self.match(PlSqlParser.VALUE)


            self.state = 4478
            self.expression(0)
            self.state = 4480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.AS) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 448)) | (1 << (PlSqlParser.CHAR_STRING - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 4479
                self.column_alias()


            self.state = 4482
            self.match(PlSqlParser.COMMA)
            self.state = 4483
            self.expression(0)
            self.state = 4485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,571,self._ctx)
            if la_ == 1:
                self.state = 4484
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_attributes_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLATTRIBUTES(self):
            return self.getToken(PlSqlParser.XMLATTRIBUTES, 0)

        def xml_multiuse_expression_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Xml_multiuse_expression_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Xml_multiuse_expression_elementContext,i)


        def ENTITYESCAPING(self):
            return self.getToken(PlSqlParser.ENTITYESCAPING, 0)

        def NOENTITYESCAPING(self):
            return self.getToken(PlSqlParser.NOENTITYESCAPING, 0)

        def SCHEMACHECK(self):
            return self.getToken(PlSqlParser.SCHEMACHECK, 0)

        def NOSCHEMACHECK(self):
            return self.getToken(PlSqlParser.NOSCHEMACHECK, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_xml_attributes_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attributes_clause" ):
                listener.enterXml_attributes_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attributes_clause" ):
                listener.exitXml_attributes_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_attributes_clause" ):
                return visitor.visitXml_attributes_clause(self)
            else:
                return visitor.visitChildren(self)




    def xml_attributes_clause(self):

        localctx = PlSqlParser.Xml_attributes_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_xml_attributes_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4487
            self.match(PlSqlParser.XMLATTRIBUTES)
            self.state = 4488
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 4490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,572,self._ctx)
            if la_ == 1:
                self.state = 4489
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.ENTITYESCAPING or _la==PlSqlParser.NOENTITYESCAPING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,573,self._ctx)
            if la_ == 1:
                self.state = 4492
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.NOSCHEMACHECK or _la==PlSqlParser.SCHEMACHECK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4495
            self.xml_multiuse_expression_element()
            self.state = 4500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 4496
                self.match(PlSqlParser.COMMA)
                self.state = 4497
                self.xml_multiuse_expression_element()
                self.state = 4502
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4503
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_namespaces_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLNAMESPACES(self):
            return self.getToken(PlSqlParser.XMLNAMESPACES, 0)

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,i)


        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_aliasContext,i)


        def xml_general_default_part(self):
            return self.getTypedRuleContext(PlSqlParser.Xml_general_default_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xml_namespaces_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespaces_clause" ):
                listener.enterXml_namespaces_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespaces_clause" ):
                listener.exitXml_namespaces_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_namespaces_clause" ):
                return visitor.visitXml_namespaces_clause(self)
            else:
                return visitor.visitChildren(self)




    def xml_namespaces_clause(self):

        localctx = PlSqlParser.Xml_namespaces_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_xml_namespaces_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4505
            self.match(PlSqlParser.XMLNAMESPACES)
            self.state = 4506
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 4510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,575,self._ctx)
            if la_ == 1:
                self.state = 4507
                self.concatenation()
                self.state = 4508
                self.column_alias()


            self.state = 4518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 4512
                self.match(PlSqlParser.COMMA)
                self.state = 4513
                self.concatenation()
                self.state = 4514
                self.column_alias()
                self.state = 4520
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.DEFAULT:
                self.state = 4521
                self.xml_general_default_part()


            self.state = 4524
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_table_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xml_column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Xml_column_nameContext,0)


        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def ORDINALITY(self):
            return self.getToken(PlSqlParser.ORDINALITY, 0)

        def type_spec(self):
            return self.getTypedRuleContext(PlSqlParser.Type_specContext,0)


        def PATH(self):
            return self.getToken(PlSqlParser.PATH, 0)

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def xml_general_default_part(self):
            return self.getTypedRuleContext(PlSqlParser.Xml_general_default_partContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xml_table_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_table_column" ):
                listener.enterXml_table_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_table_column" ):
                listener.exitXml_table_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_table_column" ):
                return visitor.visitXml_table_column(self)
            else:
                return visitor.visitChildren(self)




    def xml_table_column(self):

        localctx = PlSqlParser.Xml_table_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_xml_table_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4526
            self.xml_column_name()
            self.state = 4537
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.FOR]:
                self.state = 4527
                self.match(PlSqlParser.FOR)
                self.state = 4528
                self.match(PlSqlParser.ORDINALITY)
                pass
            elif token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                self.state = 4529
                self.type_spec()
                self.state = 4532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.PATH:
                    self.state = 4530
                    self.match(PlSqlParser.PATH)
                    self.state = 4531
                    self.concatenation()


                self.state = 4535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.DEFAULT:
                    self.state = 4534
                    self.xml_general_default_part()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_general_default_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xml_general_default_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_general_default_part" ):
                listener.enterXml_general_default_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_general_default_part" ):
                listener.exitXml_general_default_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_general_default_part" ):
                return visitor.visitXml_general_default_part(self)
            else:
                return visitor.visitChildren(self)




    def xml_general_default_part(self):

        localctx = PlSqlParser.Xml_general_default_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_xml_general_default_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4539
            self.match(PlSqlParser.DEFAULT)
            self.state = 4540
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_multiuse_expression_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def EVALNAME(self):
            return self.getToken(PlSqlParser.EVALNAME, 0)

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xml_multiuse_expression_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_multiuse_expression_element" ):
                listener.enterXml_multiuse_expression_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_multiuse_expression_element" ):
                listener.exitXml_multiuse_expression_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_multiuse_expression_element" ):
                return visitor.visitXml_multiuse_expression_element(self)
            else:
                return visitor.visitChildren(self)




    def xml_multiuse_expression_element(self):

        localctx = PlSqlParser.Xml_multiuse_expression_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_xml_multiuse_expression_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4542
            self.expression(0)
            self.state = 4549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AS:
                self.state = 4543
                self.match(PlSqlParser.AS)
                self.state = 4547
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,581,self._ctx)
                if la_ == 1:
                    self.state = 4544
                    self.id_expression()
                    pass

                elif la_ == 2:
                    self.state = 4545
                    self.match(PlSqlParser.EVALNAME)
                    self.state = 4546
                    self.concatenation()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlroot_param_version_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(PlSqlParser.VERSION, 0)

        def NO(self):
            return self.getToken(PlSqlParser.NO, 0)

        def VALUE(self):
            return self.getToken(PlSqlParser.VALUE, 0)

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xmlroot_param_version_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlroot_param_version_part" ):
                listener.enterXmlroot_param_version_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlroot_param_version_part" ):
                listener.exitXmlroot_param_version_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlroot_param_version_part" ):
                return visitor.visitXmlroot_param_version_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlroot_param_version_part(self):

        localctx = PlSqlParser.Xmlroot_param_version_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_xmlroot_param_version_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4551
            self.match(PlSqlParser.VERSION)
            self.state = 4555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,583,self._ctx)
            if la_ == 1:
                self.state = 4552
                self.match(PlSqlParser.NO)
                self.state = 4553
                self.match(PlSqlParser.VALUE)
                pass

            elif la_ == 2:
                self.state = 4554
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlroot_param_standalone_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STANDALONE(self):
            return self.getToken(PlSqlParser.STANDALONE, 0)

        def YES(self):
            return self.getToken(PlSqlParser.YES, 0)

        def NO(self):
            return self.getToken(PlSqlParser.NO, 0)

        def VALUE(self):
            return self.getToken(PlSqlParser.VALUE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_xmlroot_param_standalone_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlroot_param_standalone_part" ):
                listener.enterXmlroot_param_standalone_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlroot_param_standalone_part" ):
                listener.exitXmlroot_param_standalone_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlroot_param_standalone_part" ):
                return visitor.visitXmlroot_param_standalone_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlroot_param_standalone_part(self):

        localctx = PlSqlParser.Xmlroot_param_standalone_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_xmlroot_param_standalone_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4557
            self.match(PlSqlParser.STANDALONE)
            self.state = 4563
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.YES]:
                self.state = 4558
                self.match(PlSqlParser.YES)
                pass
            elif token in [PlSqlParser.NO]:
                self.state = 4559
                self.match(PlSqlParser.NO)
                self.state = 4561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.VALUE:
                    self.state = 4560
                    self.match(PlSqlParser.VALUE)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlserialize_param_enconding_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCODING(self):
            return self.getToken(PlSqlParser.ENCODING, 0)

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xmlserialize_param_enconding_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlserialize_param_enconding_part" ):
                listener.enterXmlserialize_param_enconding_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlserialize_param_enconding_part" ):
                listener.exitXmlserialize_param_enconding_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlserialize_param_enconding_part" ):
                return visitor.visitXmlserialize_param_enconding_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlserialize_param_enconding_part(self):

        localctx = PlSqlParser.Xmlserialize_param_enconding_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_xmlserialize_param_enconding_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4565
            self.match(PlSqlParser.ENCODING)
            self.state = 4566
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlserialize_param_version_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(PlSqlParser.VERSION, 0)

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xmlserialize_param_version_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlserialize_param_version_part" ):
                listener.enterXmlserialize_param_version_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlserialize_param_version_part" ):
                listener.exitXmlserialize_param_version_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlserialize_param_version_part" ):
                return visitor.visitXmlserialize_param_version_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlserialize_param_version_part(self):

        localctx = PlSqlParser.Xmlserialize_param_version_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_xmlserialize_param_version_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4568
            self.match(PlSqlParser.VERSION)
            self.state = 4569
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlserialize_param_ident_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(PlSqlParser.NO, 0)

        def INDENT(self):
            return self.getToken(PlSqlParser.INDENT, 0)

        def SIZE(self):
            return self.getToken(PlSqlParser.SIZE, 0)

        def concatenation(self):
            return self.getTypedRuleContext(PlSqlParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xmlserialize_param_ident_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlserialize_param_ident_part" ):
                listener.enterXmlserialize_param_ident_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlserialize_param_ident_part" ):
                listener.exitXmlserialize_param_ident_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlserialize_param_ident_part" ):
                return visitor.visitXmlserialize_param_ident_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlserialize_param_ident_part(self):

        localctx = PlSqlParser.Xmlserialize_param_ident_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_xmlserialize_param_ident_part)
        self._la = 0 # Token type
        try:
            self.state = 4579
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.NO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4571
                self.match(PlSqlParser.NO)
                self.state = 4572
                self.match(PlSqlParser.INDENT)
                pass
            elif token in [PlSqlParser.INDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4573
                self.match(PlSqlParser.INDENT)
                self.state = 4577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.SIZE:
                    self.state = 4574
                    self.match(PlSqlParser.SIZE)
                    self.state = 4575
                    self.match(PlSqlParser.EQUALS_OP)
                    self.state = 4576
                    self.concatenation()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_plus_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whenever_command(self):
            return self.getTypedRuleContext(PlSqlParser.Whenever_commandContext,0)


        def exit_command(self):
            return self.getTypedRuleContext(PlSqlParser.Exit_commandContext,0)


        def prompt_command(self):
            return self.getTypedRuleContext(PlSqlParser.Prompt_commandContext,0)


        def set_command(self):
            return self.getTypedRuleContext(PlSqlParser.Set_commandContext,0)


        def show_errors_command(self):
            return self.getTypedRuleContext(PlSqlParser.Show_errors_commandContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_sql_plus_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_plus_command" ):
                listener.enterSql_plus_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_plus_command" ):
                listener.exitSql_plus_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_plus_command" ):
                return visitor.visitSql_plus_command(self)
            else:
                return visitor.visitChildren(self)




    def sql_plus_command(self):

        localctx = PlSqlParser.Sql_plus_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_sql_plus_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4587
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.SOLIDUS]:
                self.state = 4581
                self.match(PlSqlParser.SOLIDUS)
                pass
            elif token in [PlSqlParser.WHENEVER]:
                self.state = 4582
                self.whenever_command()
                pass
            elif token in [PlSqlParser.EXIT]:
                self.state = 4583
                self.exit_command()
                pass
            elif token in [PlSqlParser.PROMPT]:
                self.state = 4584
                self.prompt_command()
                pass
            elif token in [PlSqlParser.SET]:
                self.state = 4585
                self.set_command()
                pass
            elif token in [PlSqlParser.SHOW]:
                self.state = 4586
                self.show_errors_command()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Whenever_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHENEVER(self):
            return self.getToken(PlSqlParser.WHENEVER, 0)

        def SQLERROR(self):
            return self.getToken(PlSqlParser.SQLERROR, 0)

        def OSERROR(self):
            return self.getToken(PlSqlParser.OSERROR, 0)

        def EXIT(self):
            return self.getToken(PlSqlParser.EXIT, 0)

        def CONTINUE(self):
            return self.getToken(PlSqlParser.CONTINUE, 0)

        def SUCCESS(self):
            return self.getToken(PlSqlParser.SUCCESS, 0)

        def FAILURE(self):
            return self.getToken(PlSqlParser.FAILURE, 0)

        def WARNING(self):
            return self.getToken(PlSqlParser.WARNING, 0)

        def COMMIT(self):
            return self.getToken(PlSqlParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(PlSqlParser.ROLLBACK, 0)

        def NONE(self):
            return self.getToken(PlSqlParser.NONE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_whenever_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenever_command" ):
                listener.enterWhenever_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenever_command" ):
                listener.exitWhenever_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenever_command" ):
                return visitor.visitWhenever_command(self)
            else:
                return visitor.visitChildren(self)




    def whenever_command(self):

        localctx = PlSqlParser.Whenever_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_whenever_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4589
            self.match(PlSqlParser.WHENEVER)
            self.state = 4590
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.OSERROR or _la==PlSqlParser.SQLERROR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4596
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.EXIT]:
                self.state = 4591
                self.match(PlSqlParser.EXIT)
                self.state = 4592
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.FAILURE or _la==PlSqlParser.SUCCESS or _la==PlSqlParser.WARNING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4593
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.COMMIT or _la==PlSqlParser.ROLLBACK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [PlSqlParser.CONTINUE]:
                self.state = 4594
                self.match(PlSqlParser.CONTINUE)
                self.state = 4595
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.COMMIT or _la==PlSqlParser.NONE or _la==PlSqlParser.ROLLBACK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def regular_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Regular_idContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Regular_idContext,i)


        def CHAR_STRING(self):
            return self.getToken(PlSqlParser.CHAR_STRING, 0)

        def ON(self):
            return self.getToken(PlSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(PlSqlParser.OFF, 0)

        def numeric(self):
            return self.getTypedRuleContext(PlSqlParser.NumericContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_set_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_command" ):
                listener.enterSet_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_command" ):
                listener.exitSet_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_command" ):
                return visitor.visitSet_command(self)
            else:
                return visitor.visitChildren(self)




    def set_command(self):

        localctx = PlSqlParser.Set_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_set_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4598
            self.match(PlSqlParser.SET)
            self.state = 4599
            self.regular_id()
            self.state = 4605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,590,self._ctx)
            if la_ == 1:
                self.state = 4600
                self.match(PlSqlParser.CHAR_STRING)
                pass

            elif la_ == 2:
                self.state = 4601
                self.match(PlSqlParser.ON)
                pass

            elif la_ == 3:
                self.state = 4602
                self.match(PlSqlParser.OFF)
                pass

            elif la_ == 4:
                self.state = 4603
                self.numeric()
                pass

            elif la_ == 5:
                self.state = 4604
                self.regular_id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exit_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(PlSqlParser.EXIT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_exit_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit_command" ):
                listener.enterExit_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit_command" ):
                listener.exitExit_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExit_command" ):
                return visitor.visitExit_command(self)
            else:
                return visitor.visitChildren(self)




    def exit_command(self):

        localctx = PlSqlParser.Exit_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_exit_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4607
            self.match(PlSqlParser.EXIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Prompt_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROMPT(self):
            return self.getToken(PlSqlParser.PROMPT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_prompt_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrompt_command" ):
                listener.enterPrompt_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrompt_command" ):
                listener.exitPrompt_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrompt_command" ):
                return visitor.visitPrompt_command(self)
            else:
                return visitor.visitChildren(self)




    def prompt_command(self):

        localctx = PlSqlParser.Prompt_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_prompt_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4609
            self.match(PlSqlParser.PROMPT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Show_errors_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(PlSqlParser.SHOW, 0)

        def ERR(self):
            return self.getToken(PlSqlParser.ERR, 0)

        def ERRORS(self):
            return self.getToken(PlSqlParser.ERRORS, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_show_errors_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_errors_command" ):
                listener.enterShow_errors_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_errors_command" ):
                listener.exitShow_errors_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShow_errors_command" ):
                return visitor.visitShow_errors_command(self)
            else:
                return visitor.visitChildren(self)




    def show_errors_command(self):

        localctx = PlSqlParser.Show_errors_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_show_errors_command)
        try:
            self.state = 4615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,591,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4611
                self.match(PlSqlParser.SHOW)
                self.state = 4612
                self.match(PlSqlParser.ERR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4613
                self.match(PlSqlParser.SHOW)
                self.state = 4614
                self.match(PlSqlParser.ERRORS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_extension_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_list(self):
            return self.getTypedRuleContext(PlSqlParser.Expression_listContext,0)


        def SUBPARTITION(self):
            return self.getToken(PlSqlParser.SUBPARTITION, 0)

        def PARTITION(self):
            return self.getToken(PlSqlParser.PARTITION, 0)

        def FOR(self):
            return self.getToken(PlSqlParser.FOR, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_partition_extension_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_extension_clause" ):
                listener.enterPartition_extension_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_extension_clause" ):
                listener.exitPartition_extension_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartition_extension_clause" ):
                return visitor.visitPartition_extension_clause(self)
            else:
                return visitor.visitChildren(self)




    def partition_extension_clause(self):

        localctx = PlSqlParser.Partition_extension_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_partition_extension_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4617
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.PARTITION or _la==PlSqlParser.SUBPARTITION):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.FOR:
                self.state = 4618
                self.match(PlSqlParser.FOR)


            self.state = 4621
            self.expression_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def alias_quoted_string(self):
            return self.getTypedRuleContext(PlSqlParser.Alias_quoted_stringContext,0)


        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_alias" ):
                return visitor.visitColumn_alias(self)
            else:
                return visitor.visitChildren(self)




    def column_alias(self):

        localctx = PlSqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.state = 4631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,595,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.AS:
                    self.state = 4623
                    self.match(PlSqlParser.AS)


                self.state = 4628
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                    self.state = 4626
                    self.r_id()
                    pass
                elif token in [PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.CHAR_STRING]:
                    self.state = 4627
                    self.alias_quoted_string()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4630
                self.match(PlSqlParser.AS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def alias_quoted_string(self):
            return self.getTypedRuleContext(PlSqlParser.Alias_quoted_stringContext,0)


        def AS(self):
            return self.getToken(PlSqlParser.AS, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_alias" ):
                return visitor.visitTable_alias(self)
            else:
                return visitor.visitChildren(self)




    def table_alias(self):

        localctx = PlSqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_table_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AS:
                self.state = 4633
                self.match(PlSqlParser.AS)


            self.state = 4638
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                self.state = 4636
                self.r_id()
                pass
            elif token in [PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.CHAR_STRING]:
                self.state = 4637
                self.alias_quoted_string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alias_quoted_stringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quoted_string(self):
            return self.getTypedRuleContext(PlSqlParser.Quoted_stringContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_alias_quoted_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias_quoted_string" ):
                listener.enterAlias_quoted_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias_quoted_string" ):
                listener.exitAlias_quoted_string(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias_quoted_string" ):
                return visitor.visitAlias_quoted_string(self)
            else:
                return visitor.visitChildren(self)




    def alias_quoted_string(self):

        localctx = PlSqlParser.Alias_quoted_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_alias_quoted_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4640
            self.quoted_string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(PlSqlParser.WHERE, 0)

        def current_of_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Current_of_clauseContext,0)


        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhere_clause" ):
                return visitor.visitWhere_clause(self)
            else:
                return visitor.visitChildren(self)




    def where_clause(self):

        localctx = PlSqlParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4642
            self.match(PlSqlParser.WHERE)
            self.state = 4645
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.CURRENT]:
                self.state = 4643
                self.current_of_clause()
                pass
            elif token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ALL, PlSqlParser.ANALYZE, PlSqlParser.ANY, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CASE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONNECT_BY_ROOT, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DISTINCT, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXISTS, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FALSE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NOT, PlSqlParser.NULL, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.PRIOR, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUE, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT, PlSqlParser.CHAR_STRING, PlSqlParser.DELIMITED_ID, PlSqlParser.LEFT_PAREN, PlSqlParser.PLUS_SIGN, PlSqlParser.MINUS_SIGN, PlSqlParser.BINDVAR, PlSqlParser.COLON, PlSqlParser.REGULAR_ID]:
                self.state = 4644
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Current_of_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(PlSqlParser.CURRENT, 0)

        def OF(self):
            return self.getToken(PlSqlParser.OF, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(PlSqlParser.Cursor_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_current_of_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrent_of_clause" ):
                listener.enterCurrent_of_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrent_of_clause" ):
                listener.exitCurrent_of_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrent_of_clause" ):
                return visitor.visitCurrent_of_clause(self)
            else:
                return visitor.visitChildren(self)




    def current_of_clause(self):

        localctx = PlSqlParser.Current_of_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_current_of_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4647
            self.match(PlSqlParser.CURRENT)
            self.state = 4648
            self.match(PlSqlParser.OF)
            self.state = 4649
            self.cursor_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Into_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(PlSqlParser.INTO, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Variable_nameContext,i)


        def BULK(self):
            return self.getToken(PlSqlParser.BULK, 0)

        def COLLECT(self):
            return self.getToken(PlSqlParser.COLLECT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_clause" ):
                listener.enterInto_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_clause" ):
                listener.exitInto_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInto_clause" ):
                return visitor.visitInto_clause(self)
            else:
                return visitor.visitChildren(self)




    def into_clause(self):

        localctx = PlSqlParser.Into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_into_clause)
        self._la = 0 # Token type
        try:
            self.state = 4671
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.INTO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4651
                self.match(PlSqlParser.INTO)
                self.state = 4652
                self.variable_name()
                self.state = 4657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 4653
                    self.match(PlSqlParser.COMMA)
                    self.state = 4654
                    self.variable_name()
                    self.state = 4659
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [PlSqlParser.BULK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4660
                self.match(PlSqlParser.BULK)
                self.state = 4661
                self.match(PlSqlParser.COLLECT)
                self.state = 4662
                self.match(PlSqlParser.INTO)
                self.state = 4663
                self.variable_name()
                self.state = 4668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 4664
                    self.match(PlSqlParser.COMMA)
                    self.state = 4665
                    self.variable_name()
                    self.state = 4670
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def quoted_string(self):
            return self.getTypedRuleContext(PlSqlParser.Quoted_stringContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_xml_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_column_name" ):
                listener.enterXml_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_column_name" ):
                listener.exitXml_column_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_column_name" ):
                return visitor.visitXml_column_name(self)
            else:
                return visitor.visitChildren(self)




    def xml_column_name(self):

        localctx = PlSqlParser.Xml_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_xml_column_name)
        try:
            self.state = 4675
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4673
                self.r_id()
                pass
            elif token in [PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.CHAR_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4674
                self.quoted_string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cost_class_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_cost_class_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCost_class_name" ):
                listener.enterCost_class_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCost_class_name" ):
                listener.exitCost_class_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCost_class_name" ):
                return visitor.visitCost_class_name(self)
            else:
                return visitor.visitChildren(self)




    def cost_class_name(self):

        localctx = PlSqlParser.Cost_class_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_cost_class_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4677
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_attribute_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_name" ):
                listener.enterAttribute_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_name" ):
                listener.exitAttribute_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute_name" ):
                return visitor.visitAttribute_name(self)
            else:
                return visitor.visitChildren(self)




    def attribute_name(self):

        localctx = PlSqlParser.Attribute_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_attribute_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4679
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Savepoint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_savepoint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_name" ):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_name" ):
                listener.exitSavepoint_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSavepoint_name" ):
                return visitor.visitSavepoint_name(self)
            else:
                return visitor.visitChildren(self)




    def savepoint_name(self):

        localctx = PlSqlParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4681
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rollback_segment_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_rollback_segment_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_segment_name" ):
                listener.enterRollback_segment_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_segment_name" ):
                listener.exitRollback_segment_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollback_segment_name" ):
                return visitor.visitRollback_segment_name(self)
            else:
                return visitor.visitChildren(self)




    def rollback_segment_name(self):

        localctx = PlSqlParser.Rollback_segment_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_rollback_segment_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4683
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_var_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_table_var_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_var_name" ):
                listener.enterTable_var_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_var_name" ):
                listener.exitTable_var_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_var_name" ):
                return visitor.visitTable_var_name(self)
            else:
                return visitor.visitChildren(self)




    def table_var_name(self):

        localctx = PlSqlParser.Table_var_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_table_var_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4685
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Schema_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchema_name" ):
                return visitor.visitSchema_name(self)
            else:
                return visitor.visitChildren(self)




    def schema_name(self):

        localctx = PlSqlParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4687
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Routine_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def link_name(self):
            return self.getTypedRuleContext(PlSqlParser.Link_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_routine_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutine_name" ):
                listener.enterRoutine_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutine_name" ):
                listener.exitRoutine_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutine_name" ):
                return visitor.visitRoutine_name(self)
            else:
                return visitor.visitChildren(self)




    def routine_name(self):

        localctx = PlSqlParser.Routine_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_routine_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4689
            self.r_id()
            self.state = 4694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.PERIOD:
                self.state = 4690
                self.match(PlSqlParser.PERIOD)
                self.state = 4691
                self.id_expression()
                self.state = 4696
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AT_SIGN:
                self.state = 4697
                self.match(PlSqlParser.AT_SIGN)
                self.state = 4698
                self.link_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Package_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_package_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_name" ):
                listener.enterPackage_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_name" ):
                listener.exitPackage_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_name" ):
                return visitor.visitPackage_name(self)
            else:
                return visitor.visitChildren(self)




    def package_name(self):

        localctx = PlSqlParser.Package_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_package_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4701
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Implementation_type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_implementation_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementation_type_name" ):
                listener.enterImplementation_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementation_type_name" ):
                listener.exitImplementation_type_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplementation_type_name" ):
                return visitor.visitImplementation_type_name(self)
            else:
                return visitor.visitChildren(self)




    def implementation_type_name(self):

        localctx = PlSqlParser.Implementation_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_implementation_type_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4703
            self.r_id()
            self.state = 4706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PERIOD:
                self.state = 4704
                self.match(PlSqlParser.PERIOD)
                self.state = 4705
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameter_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_parameter_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_name" ):
                listener.enterParameter_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_name" ):
                listener.exitParameter_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_name" ):
                return visitor.visitParameter_name(self)
            else:
                return visitor.visitChildren(self)




    def parameter_name(self):

        localctx = PlSqlParser.Parameter_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_parameter_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4708
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reference_model_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_reference_model_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_model_name" ):
                listener.enterReference_model_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_model_name" ):
                listener.exitReference_model_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReference_model_name" ):
                return visitor.visitReference_model_name(self)
            else:
                return visitor.visitChildren(self)




    def reference_model_name(self):

        localctx = PlSqlParser.Reference_model_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_reference_model_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4710
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Main_model_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_main_model_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain_model_name" ):
                listener.enterMain_model_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain_model_name" ):
                listener.exitMain_model_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMain_model_name" ):
                return visitor.visitMain_model_name(self)
            else:
                return visitor.visitChildren(self)




    def main_model_name(self):

        localctx = PlSqlParser.Main_model_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_main_model_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4712
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Aggregate_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_aggregate_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_function_name" ):
                listener.enterAggregate_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_function_name" ):
                listener.exitAggregate_function_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_function_name" ):
                return visitor.visitAggregate_function_name(self)
            else:
                return visitor.visitChildren(self)




    def aggregate_function_name(self):

        localctx = PlSqlParser.Aggregate_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_aggregate_function_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4714
            self.r_id()
            self.state = 4719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.PERIOD:
                self.state = 4715
                self.match(PlSqlParser.PERIOD)
                self.state = 4716
                self.id_expression()
                self.state = 4721
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_query_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_name" ):
                listener.enterQuery_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_name" ):
                listener.exitQuery_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_name" ):
                return visitor.visitQuery_name(self)
            else:
                return visitor.visitChildren(self)




    def query_name(self):

        localctx = PlSqlParser.Query_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_query_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4722
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constraint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def link_name(self):
            return self.getTypedRuleContext(PlSqlParser.Link_nameContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_constraint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint_name" ):
                listener.enterConstraint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint_name" ):
                listener.exitConstraint_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraint_name" ):
                return visitor.visitConstraint_name(self)
            else:
                return visitor.visitChildren(self)




    def constraint_name(self):

        localctx = PlSqlParser.Constraint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_constraint_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4724
            self.r_id()
            self.state = 4729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.PERIOD:
                self.state = 4725
                self.match(PlSqlParser.PERIOD)
                self.state = 4726
                self.id_expression()
                self.state = 4731
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.AT_SIGN:
                self.state = 4732
                self.match(PlSqlParser.AT_SIGN)
                self.state = 4733
                self.link_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Label_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_label_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_name" ):
                listener.enterLabel_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_name" ):
                listener.exitLabel_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel_name" ):
                return visitor.visitLabel_name(self)
            else:
                return visitor.visitChildren(self)




    def label_name(self):

        localctx = PlSqlParser.Label_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_label_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4736
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_name" ):
                return visitor.visitType_name(self)
            else:
                return visitor.visitChildren(self)




    def type_name(self):

        localctx = PlSqlParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_type_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4738
            self.id_expression()
            self.state = 4743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.PERIOD:
                self.state = 4739
                self.match(PlSqlParser.PERIOD)
                self.state = 4740
                self.id_expression()
                self.state = 4745
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sequence_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_sequence_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_name" ):
                listener.enterSequence_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_name" ):
                listener.exitSequence_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_name" ):
                return visitor.visitSequence_name(self)
            else:
                return visitor.visitChildren(self)




    def sequence_name(self):

        localctx = PlSqlParser.Sequence_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_sequence_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4746
            self.id_expression()
            self.state = 4751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.PERIOD:
                self.state = 4747
                self.match(PlSqlParser.PERIOD)
                self.state = 4748
                self.id_expression()
                self.state = 4753
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exception_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_exception_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_name" ):
                listener.enterException_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_name" ):
                listener.exitException_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitException_name" ):
                return visitor.visitException_name(self)
            else:
                return visitor.visitChildren(self)




    def exception_name(self):

        localctx = PlSqlParser.Exception_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_exception_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4754
            self.r_id()
            self.state = 4759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.PERIOD:
                self.state = 4755
                self.match(PlSqlParser.PERIOD)
                self.state = 4756
                self.id_expression()
                self.state = 4761
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_name" ):
                return visitor.visitFunction_name(self)
            else:
                return visitor.visitChildren(self)




    def function_name(self):

        localctx = PlSqlParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_function_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4762
            self.r_id()
            self.state = 4765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PERIOD:
                self.state = 4763
                self.match(PlSqlParser.PERIOD)
                self.state = 4764
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Procedure_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_procedure_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_name" ):
                listener.enterProcedure_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_name" ):
                listener.exitProcedure_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedure_name" ):
                return visitor.visitProcedure_name(self)
            else:
                return visitor.visitChildren(self)




    def procedure_name(self):

        localctx = PlSqlParser.Procedure_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_procedure_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4767
            self.r_id()
            self.state = 4770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PERIOD:
                self.state = 4768
                self.match(PlSqlParser.PERIOD)
                self.state = 4769
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_trigger_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_name" ):
                listener.enterTrigger_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_name" ):
                listener.exitTrigger_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_name" ):
                return visitor.visitTrigger_name(self)
            else:
                return visitor.visitChildren(self)




    def trigger_name(self):

        localctx = PlSqlParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_trigger_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4772
            self.r_id()
            self.state = 4775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PERIOD:
                self.state = 4773
                self.match(PlSqlParser.PERIOD)
                self.state = 4774
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self):
            return self.getTypedRuleContext(PlSqlParser.Dot_idContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(PlSqlParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_variable_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_name" ):
                listener.enterVariable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_name" ):
                listener.exitVariable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_name" ):
                return visitor.visitVariable_name(self)
            else:
                return visitor.visitChildren(self)




    def variable_name(self):

        localctx = PlSqlParser.Variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_variable_name)
        try:
            self.state = 4779
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4777
                self.dot_id()
                pass
            elif token in [PlSqlParser.BINDVAR, PlSqlParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4778
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_name" ):
                return visitor.visitIndex_name(self)
            else:
                return visitor.visitChildren(self)




    def index_name(self):

        localctx = PlSqlParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4781
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(PlSqlParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_name" ):
                return visitor.visitCursor_name(self)
            else:
                return visitor.visitChildren(self)




    def cursor_name(self):

        localctx = PlSqlParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_cursor_name)
        try:
            self.state = 4785
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4783
                self.r_id()
                pass
            elif token in [PlSqlParser.BINDVAR, PlSqlParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4784
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Record_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(PlSqlParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_record_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_name" ):
                listener.enterRecord_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_name" ):
                listener.exitRecord_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_name" ):
                return visitor.visitRecord_name(self)
            else:
                return visitor.visitChildren(self)




    def record_name(self):

        localctx = PlSqlParser.Record_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_record_name)
        try:
            self.state = 4789
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4787
                self.r_id()
                pass
            elif token in [PlSqlParser.BINDVAR, PlSqlParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4788
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collection_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_collection_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_name" ):
                listener.enterCollection_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_name" ):
                listener.exitCollection_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollection_name" ):
                return visitor.visitCollection_name(self)
            else:
                return visitor.visitChildren(self)




    def collection_name(self):

        localctx = PlSqlParser.Collection_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_collection_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4791
            self.r_id()
            self.state = 4794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.PERIOD:
                self.state = 4792
                self.match(PlSqlParser.PERIOD)
                self.state = 4793
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Link_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_link_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLink_name" ):
                listener.enterLink_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLink_name" ):
                listener.exitLink_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLink_name" ):
                return visitor.visitLink_name(self)
            else:
                return visitor.visitChildren(self)




    def link_name(self):

        localctx = PlSqlParser.Link_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_link_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4796
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name" ):
                return visitor.visitColumn_name(self)
            else:
                return visitor.visitChildren(self)




    def column_name(self):

        localctx = PlSqlParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4798
            self.r_id()
            self.state = 4803
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,619,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4799
                    self.match(PlSqlParser.PERIOD)
                    self.state = 4800
                    self.id_expression() 
                self.state = 4805
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,619,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Tableview_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self):
            return self.getTypedRuleContext(PlSqlParser.Dot_idContext,0)


        def link_name(self):
            return self.getTypedRuleContext(PlSqlParser.Link_nameContext,0)


        def partition_extension_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Partition_extension_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_tableview_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableview_name" ):
                listener.enterTableview_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableview_name" ):
                listener.exitTableview_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableview_name" ):
                return visitor.visitTableview_name(self)
            else:
                return visitor.visitChildren(self)




    def tableview_name(self):

        localctx = PlSqlParser.Tableview_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_tableview_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4806
            self.dot_id()
            self.state = 4810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,620,self._ctx)
            if la_ == 1:
                self.state = 4807
                self.match(PlSqlParser.AT_SIGN)
                self.state = 4808
                self.link_name()

            elif la_ == 2:
                self.state = 4809
                self.partition_extension_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dot_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._id_expression = None # Id_expressionContext
            self.fields = list() # of Id_expressionContexts

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_dot_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_id" ):
                listener.enterDot_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_id" ):
                listener.exitDot_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDot_id" ):
                return visitor.visitDot_id(self)
            else:
                return visitor.visitChildren(self)




    def dot_id(self):

        localctx = PlSqlParser.Dot_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_dot_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4812
            localctx._id_expression = self.id_expression()
            localctx.fields.append(localctx._id_expression)
            self.state = 4817
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,621,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4813
                    self.match(PlSqlParser.PERIOD)
                    self.state = 4814
                    localctx._id_expression = self.id_expression()
                    localctx.fields.append(localctx._id_expression) 
                self.state = 4819
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,621,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlSqlParser.RULE_star

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar" ):
                listener.enterStar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar" ):
                listener.exitStar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar" ):
                return visitor.visitStar(self)
            else:
                return visitor.visitChildren(self)




    def star(self):

        localctx = PlSqlParser.StarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_star)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4820
            self.match(PlSqlParser.ASTERISK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Keep_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEEP(self):
            return self.getToken(PlSqlParser.KEEP, 0)

        def DENSE_RANK(self):
            return self.getToken(PlSqlParser.DENSE_RANK, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Order_by_clauseContext,0)


        def FIRST(self):
            return self.getToken(PlSqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(PlSqlParser.LAST, 0)

        def over_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Over_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_keep_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeep_clause" ):
                listener.enterKeep_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeep_clause" ):
                listener.exitKeep_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeep_clause" ):
                return visitor.visitKeep_clause(self)
            else:
                return visitor.visitChildren(self)




    def keep_clause(self):

        localctx = PlSqlParser.Keep_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_keep_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4822
            self.match(PlSqlParser.KEEP)
            self.state = 4823
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 4824
            self.match(PlSqlParser.DENSE_RANK)
            self.state = 4825
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.FIRST or _la==PlSqlParser.LAST):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4826
            self.order_by_clause()
            self.state = 4827
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 4829
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,622,self._ctx)
            if la_ == 1:
                self.state = 4828
                self.over_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ArgumentContext,i)


        def keep_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Keep_clauseContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_function_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument" ):
                listener.enterFunction_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument" ):
                listener.exitFunction_argument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_argument" ):
                return visitor.visitFunction_argument(self)
            else:
                return visitor.visitChildren(self)




    def function_argument(self):

        localctx = PlSqlParser.Function_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_function_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4831
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 4833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CASE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DISTINCT - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXISTS - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FALSE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NOT - 192)) | (1 << (PlSqlParser.NULL - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.PRIOR - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUE - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 448)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 448)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 448)) | (1 << (PlSqlParser.CHAR_STRING - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)) | (1 << (PlSqlParser.LEFT_PAREN - 448)) | (1 << (PlSqlParser.PLUS_SIGN - 448)) | (1 << (PlSqlParser.MINUS_SIGN - 448)) | (1 << (PlSqlParser.BINDVAR - 448)) | (1 << (PlSqlParser.COLON - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 4832
                self.argument()


            self.state = 4839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 4835
                self.match(PlSqlParser.COMMA)
                self.state = 4836
                self.argument()
                self.state = 4841
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4842
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 4844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,625,self._ctx)
            if la_ == 1:
                self.state = 4843
                self.keep_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_argument_analyticContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ArgumentContext,i)


        def keep_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Keep_clauseContext,0)


        def respect_or_ignore_nulls(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Respect_or_ignore_nullsContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Respect_or_ignore_nullsContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_function_argument_analytic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument_analytic" ):
                listener.enterFunction_argument_analytic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument_analytic" ):
                listener.exitFunction_argument_analytic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_argument_analytic" ):
                return visitor.visitFunction_argument_analytic(self)
            else:
                return visitor.visitChildren(self)




    def function_argument_analytic(self):

        localctx = PlSqlParser.Function_argument_analyticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_function_argument_analytic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4846
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 4851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CASE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DISTINCT - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXISTS - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FALSE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NOT - 192)) | (1 << (PlSqlParser.NULL - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.PRIOR - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUE - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 448)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 448)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 448)) | (1 << (PlSqlParser.CHAR_STRING - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)) | (1 << (PlSqlParser.LEFT_PAREN - 448)) | (1 << (PlSqlParser.PLUS_SIGN - 448)) | (1 << (PlSqlParser.MINUS_SIGN - 448)) | (1 << (PlSqlParser.BINDVAR - 448)) | (1 << (PlSqlParser.COLON - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                self.state = 4847
                self.argument()
                self.state = 4849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.IGNORE or _la==PlSqlParser.RESPECT:
                    self.state = 4848
                    self.respect_or_ignore_nulls()




            self.state = 4860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PlSqlParser.COMMA:
                self.state = 4853
                self.match(PlSqlParser.COMMA)
                self.state = 4854
                self.argument()
                self.state = 4856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.IGNORE or _la==PlSqlParser.RESPECT:
                    self.state = 4855
                    self.respect_or_ignore_nulls()


                self.state = 4862
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4863
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 4865
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,630,self._ctx)
            if la_ == 1:
                self.state = 4864
                self.keep_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_argument_modelingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(PlSqlParser.Column_nameContext,0)


        def USING(self):
            return self.getToken(PlSqlParser.USING, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(PlSqlParser.Tableview_nameContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def keep_clause(self):
            return self.getTypedRuleContext(PlSqlParser.Keep_clauseContext,0)


        def numeric(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.NumericContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.NumericContext,i)


        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.NULL)
            else:
                return self.getToken(PlSqlParser.NULL, i)

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Column_aliasContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_function_argument_modeling

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument_modeling" ):
                listener.enterFunction_argument_modeling(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument_modeling" ):
                listener.exitFunction_argument_modeling(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_argument_modeling" ):
                return visitor.visitFunction_argument_modeling(self)
            else:
                return visitor.visitChildren(self)




    def function_argument_modeling(self):

        localctx = PlSqlParser.Function_argument_modelingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_function_argument_modeling)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4867
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 4868
            self.column_name()
            self.state = 4881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.COMMA:
                self.state = 4869
                self.match(PlSqlParser.COMMA)
                self.state = 4872
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT]:
                    self.state = 4870
                    self.numeric()
                    pass
                elif token in [PlSqlParser.NULL]:
                    self.state = 4871
                    self.match(PlSqlParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.COMMA:
                    self.state = 4874
                    self.match(PlSqlParser.COMMA)
                    self.state = 4877
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT]:
                        self.state = 4875
                        self.numeric()
                        pass
                    elif token in [PlSqlParser.NULL]:
                        self.state = 4876
                        self.match(PlSqlParser.NULL)
                        pass
                    else:
                        raise NoViableAltException(self)





            self.state = 4883
            self.match(PlSqlParser.USING)
            self.state = 4903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,638,self._ctx)
            if la_ == 1:
                self.state = 4884
                self.tableview_name()
                self.state = 4885
                self.match(PlSqlParser.PERIOD)
                self.state = 4886
                self.match(PlSqlParser.ASTERISK)
                pass

            elif la_ == 2:
                self.state = 4888
                self.match(PlSqlParser.ASTERISK)
                pass

            elif la_ == 3:
                self.state = 4889
                self.expression(0)
                self.state = 4891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.AS) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 448)) | (1 << (PlSqlParser.CHAR_STRING - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                    self.state = 4890
                    self.column_alias()


                self.state = 4900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PlSqlParser.COMMA:
                    self.state = 4893
                    self.match(PlSqlParser.COMMA)
                    self.state = 4894
                    self.expression(0)
                    self.state = 4896
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.AS) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 448)) | (1 << (PlSqlParser.CHAR_STRING - 448)) | (1 << (PlSqlParser.DELIMITED_ID - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID:
                        self.state = 4895
                        self.column_alias()


                    self.state = 4902
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 4905
            self.match(PlSqlParser.RIGHT_PAREN)
            self.state = 4907
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,639,self._ctx)
            if la_ == 1:
                self.state = 4906
                self.keep_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Respect_or_ignore_nullsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS(self):
            return self.getToken(PlSqlParser.NULLS, 0)

        def RESPECT(self):
            return self.getToken(PlSqlParser.RESPECT, 0)

        def IGNORE(self):
            return self.getToken(PlSqlParser.IGNORE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_respect_or_ignore_nulls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRespect_or_ignore_nulls" ):
                listener.enterRespect_or_ignore_nulls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRespect_or_ignore_nulls" ):
                listener.exitRespect_or_ignore_nulls(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRespect_or_ignore_nulls" ):
                return visitor.visitRespect_or_ignore_nulls(self)
            else:
                return visitor.visitChildren(self)




    def respect_or_ignore_nulls(self):

        localctx = PlSqlParser.Respect_or_ignore_nullsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_respect_or_ignore_nulls)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4909
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.IGNORE or _la==PlSqlParser.RESPECT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4910
            self.match(PlSqlParser.NULLS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PlSqlParser.ExpressionContext,0)


        def r_id(self):
            return self.getTypedRuleContext(PlSqlParser.R_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = PlSqlParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,640,self._ctx)
            if la_ == 1:
                self.state = 4912
                self.r_id()
                self.state = 4913
                self.match(PlSqlParser.EQUALS_OP)
                self.state = 4914
                self.match(PlSqlParser.GREATER_THAN_OP)


            self.state = 4918
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datatype(self):
            return self.getTypedRuleContext(PlSqlParser.DatatypeContext,0)


        def type_name(self):
            return self.getTypedRuleContext(PlSqlParser.Type_nameContext,0)


        def REF(self):
            return self.getToken(PlSqlParser.REF, 0)

        def PERCENT_ROWTYPE(self):
            return self.getToken(PlSqlParser.PERCENT_ROWTYPE, 0)

        def PERCENT_TYPE(self):
            return self.getToken(PlSqlParser.PERCENT_TYPE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_spec" ):
                listener.enterType_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_spec" ):
                listener.exitType_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_spec" ):
                return visitor.visitType_spec(self)
            else:
                return visitor.visitChildren(self)




    def type_spec(self):

        localctx = PlSqlParser.Type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_type_spec)
        self._la = 0 # Token type
        try:
            self.state = 4928
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,643,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4920
                self.datatype()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4922
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,641,self._ctx)
                if la_ == 1:
                    self.state = 4921
                    self.match(PlSqlParser.REF)


                self.state = 4924
                self.type_name()
                self.state = 4926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.PERCENT_ROWTYPE or _la==PlSqlParser.PERCENT_TYPE:
                    self.state = 4925
                    _la = self._input.LA(1)
                    if not(_la==PlSqlParser.PERCENT_ROWTYPE or _la==PlSqlParser.PERCENT_TYPE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatatypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_datatype_element(self):
            return self.getTypedRuleContext(PlSqlParser.Native_datatype_elementContext,0)


        def precision_part(self):
            return self.getTypedRuleContext(PlSqlParser.Precision_partContext,0)


        def WITH(self):
            return self.getToken(PlSqlParser.WITH, 0)

        def TIME(self):
            return self.getToken(PlSqlParser.TIME, 0)

        def ZONE(self):
            return self.getToken(PlSqlParser.ZONE, 0)

        def LOCAL(self):
            return self.getToken(PlSqlParser.LOCAL, 0)

        def INTERVAL(self):
            return self.getToken(PlSqlParser.INTERVAL, 0)

        def TO(self):
            return self.getToken(PlSqlParser.TO, 0)

        def YEAR(self):
            return self.getToken(PlSqlParser.YEAR, 0)

        def DAY(self):
            return self.getToken(PlSqlParser.DAY, 0)

        def MONTH(self):
            return self.getToken(PlSqlParser.MONTH, 0)

        def SECOND(self):
            return self.getToken(PlSqlParser.SECOND, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return PlSqlParser.RULE_datatype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatatype" ):
                listener.enterDatatype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatatype" ):
                listener.exitDatatype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatatype" ):
                return visitor.visitDatatype(self)
            else:
                return visitor.visitChildren(self)




    def datatype(self):

        localctx = PlSqlParser.DatatypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_datatype)
        self._la = 0 # Token type
        try:
            self.state = 4958
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BOOLEAN, PlSqlParser.CHAR, PlSqlParser.CHARACTER, PlSqlParser.CLOB, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.FLOAT, PlSqlParser.HOUR, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.LONG, PlSqlParser.MINUTE, PlSqlParser.MLSLABEL, PlSqlParser.MONTH, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NCHAR, PlSqlParser.NCLOB, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.RAW, PlSqlParser.REAL, PlSqlParser.ROWID, PlSqlParser.SECOND, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SMALLINT, PlSqlParser.STRING, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.UROWID, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.YEAR, PlSqlParser.YMINTERVAL_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4930
                self.native_datatype_element()
                self.state = 4932
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,644,self._ctx)
                if la_ == 1:
                    self.state = 4931
                    self.precision_part()


                self.state = 4940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.WITH:
                    self.state = 4934
                    self.match(PlSqlParser.WITH)
                    self.state = 4936
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.LOCAL:
                        self.state = 4935
                        self.match(PlSqlParser.LOCAL)


                    self.state = 4938
                    self.match(PlSqlParser.TIME)
                    self.state = 4939
                    self.match(PlSqlParser.ZONE)


                pass
            elif token in [PlSqlParser.INTERVAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4942
                self.match(PlSqlParser.INTERVAL)
                self.state = 4943
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DAY or _la==PlSqlParser.YEAR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.LEFT_PAREN:
                    self.state = 4944
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 4945
                    self.expression(0)
                    self.state = 4946
                    self.match(PlSqlParser.RIGHT_PAREN)


                self.state = 4950
                self.match(PlSqlParser.TO)
                self.state = 4951
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.MONTH or _la==PlSqlParser.SECOND):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4956
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,648,self._ctx)
                if la_ == 1:
                    self.state = 4952
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 4953
                    self.expression(0)
                    self.state = 4954
                    self.match(PlSqlParser.RIGHT_PAREN)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Precision_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.NumericContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.NumericContext,i)


        def CHAR(self):
            return self.getToken(PlSqlParser.CHAR, 0)

        def BYTE(self):
            return self.getToken(PlSqlParser.BYTE, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_precision_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecision_part" ):
                listener.enterPrecision_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecision_part" ):
                listener.exitPrecision_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecision_part" ):
                return visitor.visitPrecision_part(self)
            else:
                return visitor.visitChildren(self)




    def precision_part(self):

        localctx = PlSqlParser.Precision_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_precision_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4960
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 4961
            self.numeric()
            self.state = 4964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.COMMA:
                self.state = 4962
                self.match(PlSqlParser.COMMA)
                self.state = 4963
                self.numeric()


            self.state = 4967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PlSqlParser.BYTE or _la==PlSqlParser.CHAR:
                self.state = 4966
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.BYTE or _la==PlSqlParser.CHAR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4969
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_datatype_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY_INTEGER(self):
            return self.getToken(PlSqlParser.BINARY_INTEGER, 0)

        def PLS_INTEGER(self):
            return self.getToken(PlSqlParser.PLS_INTEGER, 0)

        def NATURAL(self):
            return self.getToken(PlSqlParser.NATURAL, 0)

        def BINARY_FLOAT(self):
            return self.getToken(PlSqlParser.BINARY_FLOAT, 0)

        def BINARY_DOUBLE(self):
            return self.getToken(PlSqlParser.BINARY_DOUBLE, 0)

        def NATURALN(self):
            return self.getToken(PlSqlParser.NATURALN, 0)

        def POSITIVE(self):
            return self.getToken(PlSqlParser.POSITIVE, 0)

        def POSITIVEN(self):
            return self.getToken(PlSqlParser.POSITIVEN, 0)

        def SIGNTYPE(self):
            return self.getToken(PlSqlParser.SIGNTYPE, 0)

        def SIMPLE_INTEGER(self):
            return self.getToken(PlSqlParser.SIMPLE_INTEGER, 0)

        def NVARCHAR2(self):
            return self.getToken(PlSqlParser.NVARCHAR2, 0)

        def DEC(self):
            return self.getToken(PlSqlParser.DEC, 0)

        def INTEGER(self):
            return self.getToken(PlSqlParser.INTEGER, 0)

        def INT(self):
            return self.getToken(PlSqlParser.INT, 0)

        def NUMERIC(self):
            return self.getToken(PlSqlParser.NUMERIC, 0)

        def SMALLINT(self):
            return self.getToken(PlSqlParser.SMALLINT, 0)

        def NUMBER(self):
            return self.getToken(PlSqlParser.NUMBER, 0)

        def DECIMAL(self):
            return self.getToken(PlSqlParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(PlSqlParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(PlSqlParser.PRECISION, 0)

        def FLOAT(self):
            return self.getToken(PlSqlParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(PlSqlParser.REAL, 0)

        def NCHAR(self):
            return self.getToken(PlSqlParser.NCHAR, 0)

        def LONG(self):
            return self.getToken(PlSqlParser.LONG, 0)

        def RAW(self):
            return self.getToken(PlSqlParser.RAW, 0)

        def CHAR(self):
            return self.getToken(PlSqlParser.CHAR, 0)

        def CHARACTER(self):
            return self.getToken(PlSqlParser.CHARACTER, 0)

        def VARCHAR2(self):
            return self.getToken(PlSqlParser.VARCHAR2, 0)

        def VARCHAR(self):
            return self.getToken(PlSqlParser.VARCHAR, 0)

        def STRING(self):
            return self.getToken(PlSqlParser.STRING, 0)

        def BOOLEAN(self):
            return self.getToken(PlSqlParser.BOOLEAN, 0)

        def DATE(self):
            return self.getToken(PlSqlParser.DATE, 0)

        def ROWID(self):
            return self.getToken(PlSqlParser.ROWID, 0)

        def UROWID(self):
            return self.getToken(PlSqlParser.UROWID, 0)

        def YEAR(self):
            return self.getToken(PlSqlParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(PlSqlParser.MONTH, 0)

        def DAY(self):
            return self.getToken(PlSqlParser.DAY, 0)

        def HOUR(self):
            return self.getToken(PlSqlParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(PlSqlParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(PlSqlParser.SECOND, 0)

        def TIMEZONE_HOUR(self):
            return self.getToken(PlSqlParser.TIMEZONE_HOUR, 0)

        def TIMEZONE_MINUTE(self):
            return self.getToken(PlSqlParser.TIMEZONE_MINUTE, 0)

        def TIMEZONE_REGION(self):
            return self.getToken(PlSqlParser.TIMEZONE_REGION, 0)

        def TIMEZONE_ABBR(self):
            return self.getToken(PlSqlParser.TIMEZONE_ABBR, 0)

        def TIMESTAMP(self):
            return self.getToken(PlSqlParser.TIMESTAMP, 0)

        def TIMESTAMP_UNCONSTRAINED(self):
            return self.getToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0)

        def TIMESTAMP_TZ_UNCONSTRAINED(self):
            return self.getToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0)

        def TIMESTAMP_LTZ_UNCONSTRAINED(self):
            return self.getToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0)

        def YMINTERVAL_UNCONSTRAINED(self):
            return self.getToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0)

        def DSINTERVAL_UNCONSTRAINED(self):
            return self.getToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0)

        def BFILE(self):
            return self.getToken(PlSqlParser.BFILE, 0)

        def BLOB(self):
            return self.getToken(PlSqlParser.BLOB, 0)

        def CLOB(self):
            return self.getToken(PlSqlParser.CLOB, 0)

        def NCLOB(self):
            return self.getToken(PlSqlParser.NCLOB, 0)

        def MLSLABEL(self):
            return self.getToken(PlSqlParser.MLSLABEL, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_native_datatype_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_datatype_element" ):
                listener.enterNative_datatype_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_datatype_element" ):
                listener.exitNative_datatype_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNative_datatype_element" ):
                return visitor.visitNative_datatype_element(self)
            else:
                return visitor.visitChildren(self)




    def native_datatype_element(self):

        localctx = PlSqlParser.Native_datatype_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_native_datatype_element)
        self._la = 0 # Token type
        try:
            self.state = 5031
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.BINARY_INTEGER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4971
                self.match(PlSqlParser.BINARY_INTEGER)
                pass
            elif token in [PlSqlParser.PLS_INTEGER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4972
                self.match(PlSqlParser.PLS_INTEGER)
                pass
            elif token in [PlSqlParser.NATURAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4973
                self.match(PlSqlParser.NATURAL)
                pass
            elif token in [PlSqlParser.BINARY_FLOAT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4974
                self.match(PlSqlParser.BINARY_FLOAT)
                pass
            elif token in [PlSqlParser.BINARY_DOUBLE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4975
                self.match(PlSqlParser.BINARY_DOUBLE)
                pass
            elif token in [PlSqlParser.NATURALN]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4976
                self.match(PlSqlParser.NATURALN)
                pass
            elif token in [PlSqlParser.POSITIVE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4977
                self.match(PlSqlParser.POSITIVE)
                pass
            elif token in [PlSqlParser.POSITIVEN]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4978
                self.match(PlSqlParser.POSITIVEN)
                pass
            elif token in [PlSqlParser.SIGNTYPE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4979
                self.match(PlSqlParser.SIGNTYPE)
                pass
            elif token in [PlSqlParser.SIMPLE_INTEGER]:
                self.enterOuterAlt(localctx, 10)
                self.state = 4980
                self.match(PlSqlParser.SIMPLE_INTEGER)
                pass
            elif token in [PlSqlParser.NVARCHAR2]:
                self.enterOuterAlt(localctx, 11)
                self.state = 4981
                self.match(PlSqlParser.NVARCHAR2)
                pass
            elif token in [PlSqlParser.DEC]:
                self.enterOuterAlt(localctx, 12)
                self.state = 4982
                self.match(PlSqlParser.DEC)
                pass
            elif token in [PlSqlParser.INTEGER]:
                self.enterOuterAlt(localctx, 13)
                self.state = 4983
                self.match(PlSqlParser.INTEGER)
                pass
            elif token in [PlSqlParser.INT]:
                self.enterOuterAlt(localctx, 14)
                self.state = 4984
                self.match(PlSqlParser.INT)
                pass
            elif token in [PlSqlParser.NUMERIC]:
                self.enterOuterAlt(localctx, 15)
                self.state = 4985
                self.match(PlSqlParser.NUMERIC)
                pass
            elif token in [PlSqlParser.SMALLINT]:
                self.enterOuterAlt(localctx, 16)
                self.state = 4986
                self.match(PlSqlParser.SMALLINT)
                pass
            elif token in [PlSqlParser.NUMBER]:
                self.enterOuterAlt(localctx, 17)
                self.state = 4987
                self.match(PlSqlParser.NUMBER)
                pass
            elif token in [PlSqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 18)
                self.state = 4988
                self.match(PlSqlParser.DECIMAL)
                pass
            elif token in [PlSqlParser.DOUBLE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 4989
                self.match(PlSqlParser.DOUBLE)
                self.state = 4991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.PRECISION:
                    self.state = 4990
                    self.match(PlSqlParser.PRECISION)


                pass
            elif token in [PlSqlParser.FLOAT]:
                self.enterOuterAlt(localctx, 20)
                self.state = 4993
                self.match(PlSqlParser.FLOAT)
                pass
            elif token in [PlSqlParser.REAL]:
                self.enterOuterAlt(localctx, 21)
                self.state = 4994
                self.match(PlSqlParser.REAL)
                pass
            elif token in [PlSqlParser.NCHAR]:
                self.enterOuterAlt(localctx, 22)
                self.state = 4995
                self.match(PlSqlParser.NCHAR)
                pass
            elif token in [PlSqlParser.LONG]:
                self.enterOuterAlt(localctx, 23)
                self.state = 4996
                self.match(PlSqlParser.LONG)
                self.state = 4998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.RAW:
                    self.state = 4997
                    self.match(PlSqlParser.RAW)


                pass
            elif token in [PlSqlParser.CHAR]:
                self.enterOuterAlt(localctx, 24)
                self.state = 5000
                self.match(PlSqlParser.CHAR)
                pass
            elif token in [PlSqlParser.CHARACTER]:
                self.enterOuterAlt(localctx, 25)
                self.state = 5001
                self.match(PlSqlParser.CHARACTER)
                pass
            elif token in [PlSqlParser.VARCHAR2]:
                self.enterOuterAlt(localctx, 26)
                self.state = 5002
                self.match(PlSqlParser.VARCHAR2)
                pass
            elif token in [PlSqlParser.VARCHAR]:
                self.enterOuterAlt(localctx, 27)
                self.state = 5003
                self.match(PlSqlParser.VARCHAR)
                pass
            elif token in [PlSqlParser.STRING]:
                self.enterOuterAlt(localctx, 28)
                self.state = 5004
                self.match(PlSqlParser.STRING)
                pass
            elif token in [PlSqlParser.RAW]:
                self.enterOuterAlt(localctx, 29)
                self.state = 5005
                self.match(PlSqlParser.RAW)
                pass
            elif token in [PlSqlParser.BOOLEAN]:
                self.enterOuterAlt(localctx, 30)
                self.state = 5006
                self.match(PlSqlParser.BOOLEAN)
                pass
            elif token in [PlSqlParser.DATE]:
                self.enterOuterAlt(localctx, 31)
                self.state = 5007
                self.match(PlSqlParser.DATE)
                pass
            elif token in [PlSqlParser.ROWID]:
                self.enterOuterAlt(localctx, 32)
                self.state = 5008
                self.match(PlSqlParser.ROWID)
                pass
            elif token in [PlSqlParser.UROWID]:
                self.enterOuterAlt(localctx, 33)
                self.state = 5009
                self.match(PlSqlParser.UROWID)
                pass
            elif token in [PlSqlParser.YEAR]:
                self.enterOuterAlt(localctx, 34)
                self.state = 5010
                self.match(PlSqlParser.YEAR)
                pass
            elif token in [PlSqlParser.MONTH]:
                self.enterOuterAlt(localctx, 35)
                self.state = 5011
                self.match(PlSqlParser.MONTH)
                pass
            elif token in [PlSqlParser.DAY]:
                self.enterOuterAlt(localctx, 36)
                self.state = 5012
                self.match(PlSqlParser.DAY)
                pass
            elif token in [PlSqlParser.HOUR]:
                self.enterOuterAlt(localctx, 37)
                self.state = 5013
                self.match(PlSqlParser.HOUR)
                pass
            elif token in [PlSqlParser.MINUTE]:
                self.enterOuterAlt(localctx, 38)
                self.state = 5014
                self.match(PlSqlParser.MINUTE)
                pass
            elif token in [PlSqlParser.SECOND]:
                self.enterOuterAlt(localctx, 39)
                self.state = 5015
                self.match(PlSqlParser.SECOND)
                pass
            elif token in [PlSqlParser.TIMEZONE_HOUR]:
                self.enterOuterAlt(localctx, 40)
                self.state = 5016
                self.match(PlSqlParser.TIMEZONE_HOUR)
                pass
            elif token in [PlSqlParser.TIMEZONE_MINUTE]:
                self.enterOuterAlt(localctx, 41)
                self.state = 5017
                self.match(PlSqlParser.TIMEZONE_MINUTE)
                pass
            elif token in [PlSqlParser.TIMEZONE_REGION]:
                self.enterOuterAlt(localctx, 42)
                self.state = 5018
                self.match(PlSqlParser.TIMEZONE_REGION)
                pass
            elif token in [PlSqlParser.TIMEZONE_ABBR]:
                self.enterOuterAlt(localctx, 43)
                self.state = 5019
                self.match(PlSqlParser.TIMEZONE_ABBR)
                pass
            elif token in [PlSqlParser.TIMESTAMP]:
                self.enterOuterAlt(localctx, 44)
                self.state = 5020
                self.match(PlSqlParser.TIMESTAMP)
                pass
            elif token in [PlSqlParser.TIMESTAMP_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 45)
                self.state = 5021
                self.match(PlSqlParser.TIMESTAMP_UNCONSTRAINED)
                pass
            elif token in [PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 46)
                self.state = 5022
                self.match(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED)
                pass
            elif token in [PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 47)
                self.state = 5023
                self.match(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED)
                pass
            elif token in [PlSqlParser.YMINTERVAL_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 48)
                self.state = 5024
                self.match(PlSqlParser.YMINTERVAL_UNCONSTRAINED)
                pass
            elif token in [PlSqlParser.DSINTERVAL_UNCONSTRAINED]:
                self.enterOuterAlt(localctx, 49)
                self.state = 5025
                self.match(PlSqlParser.DSINTERVAL_UNCONSTRAINED)
                pass
            elif token in [PlSqlParser.BFILE]:
                self.enterOuterAlt(localctx, 50)
                self.state = 5026
                self.match(PlSqlParser.BFILE)
                pass
            elif token in [PlSqlParser.BLOB]:
                self.enterOuterAlt(localctx, 51)
                self.state = 5027
                self.match(PlSqlParser.BLOB)
                pass
            elif token in [PlSqlParser.CLOB]:
                self.enterOuterAlt(localctx, 52)
                self.state = 5028
                self.match(PlSqlParser.CLOB)
                pass
            elif token in [PlSqlParser.NCLOB]:
                self.enterOuterAlt(localctx, 53)
                self.state = 5029
                self.match(PlSqlParser.NCLOB)
                pass
            elif token in [PlSqlParser.MLSLABEL]:
                self.enterOuterAlt(localctx, 54)
                self.state = 5030
                self.match(PlSqlParser.MLSLABEL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bind_variableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINDVAR(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.BINDVAR)
            else:
                return self.getToken(PlSqlParser.BINDVAR, i)

        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(PlSqlParser.UNSIGNED_INTEGER, i)

        def general_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.General_elementContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.General_elementContext,i)


        def INDICATOR(self):
            return self.getToken(PlSqlParser.INDICATOR, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_bind_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBind_variable" ):
                listener.enterBind_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBind_variable" ):
                listener.exitBind_variable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBind_variable" ):
                return visitor.visitBind_variable(self)
            else:
                return visitor.visitChildren(self)




    def bind_variable(self):

        localctx = PlSqlParser.Bind_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_bind_variable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5036
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.BINDVAR]:
                self.state = 5033
                self.match(PlSqlParser.BINDVAR)
                pass
            elif token in [PlSqlParser.COLON]:
                self.state = 5034
                self.match(PlSqlParser.COLON)
                self.state = 5035
                self.match(PlSqlParser.UNSIGNED_INTEGER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,658,self._ctx)
            if la_ == 1:
                self.state = 5039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PlSqlParser.INDICATOR:
                    self.state = 5038
                    self.match(PlSqlParser.INDICATOR)


                self.state = 5044
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.BINDVAR]:
                    self.state = 5041
                    self.match(PlSqlParser.BINDVAR)
                    pass
                elif token in [PlSqlParser.COLON]:
                    self.state = 5042
                    self.match(PlSqlParser.COLON)
                    self.state = 5043
                    self.match(PlSqlParser.UNSIGNED_INTEGER)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 5052
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,659,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5048
                    self.match(PlSqlParser.PERIOD)
                    self.state = 5049
                    self.general_element() 
                self.state = 5054
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,659,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class General_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlSqlParser.RULE_general_element

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FuncCallContext(General_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.General_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dot_id(self):
            return self.getTypedRuleContext(PlSqlParser.Dot_idContext,0)

        def function_argument(self):
            return self.getTypedRuleContext(PlSqlParser.Function_argumentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncCall" ):
                listener.enterFuncCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncCall" ):
                listener.exitFuncCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncCall" ):
                return visitor.visitFuncCall(self)
            else:
                return visitor.visitChildren(self)


    class IdentifierContext(General_elementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PlSqlParser.General_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dot_id(self):
            return self.getTypedRuleContext(PlSqlParser.Dot_idContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)



    def general_element(self):

        localctx = PlSqlParser.General_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_general_element)
        try:
            self.state = 5059
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,660,self._ctx)
            if la_ == 1:
                localctx = PlSqlParser.FuncCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5055
                self.dot_id()
                self.state = 5056
                self.function_argument()
                pass

            elif la_ == 2:
                localctx = PlSqlParser.IdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5058
                self.dot_id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self):
            return self.getTypedRuleContext(PlSqlParser.Dot_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_table_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_element" ):
                listener.enterTable_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_element" ):
                listener.exitTable_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_element" ):
                return visitor.visitTable_element(self)
            else:
                return visitor.visitChildren(self)




    def table_element(self):

        localctx = PlSqlParser.Table_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_table_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5061
            self.dot_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP(self):
            return self.getToken(PlSqlParser.TIMESTAMP, 0)

        def quoted_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Quoted_stringContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Quoted_stringContext,i)


        def bind_variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PlSqlParser.Bind_variableContext)
            else:
                return self.getTypedRuleContext(PlSqlParser.Bind_variableContext,i)


        def AT(self):
            return self.getToken(PlSqlParser.AT, 0)

        def TIME(self):
            return self.getToken(PlSqlParser.TIME, 0)

        def ZONE(self):
            return self.getToken(PlSqlParser.ZONE, 0)

        def INTERVAL(self):
            return self.getToken(PlSqlParser.INTERVAL, 0)

        def DAY(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.DAY)
            else:
                return self.getToken(PlSqlParser.DAY, i)

        def HOUR(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.HOUR)
            else:
                return self.getToken(PlSqlParser.HOUR, i)

        def MINUTE(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.MINUTE)
            else:
                return self.getToken(PlSqlParser.MINUTE, i)

        def SECOND(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.SECOND)
            else:
                return self.getToken(PlSqlParser.SECOND, i)

        def general_element(self):
            return self.getTypedRuleContext(PlSqlParser.General_elementContext,0)


        def TO(self):
            return self.getToken(PlSqlParser.TO, 0)

        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(PlSqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(PlSqlParser.UNSIGNED_INTEGER, i)

        def numeric(self):
            return self.getTypedRuleContext(PlSqlParser.NumericContext,0)


        def DATE(self):
            return self.getToken(PlSqlParser.DATE, 0)

        def NULL(self):
            return self.getToken(PlSqlParser.NULL, 0)

        def TRUE(self):
            return self.getToken(PlSqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PlSqlParser.FALSE, 0)

        def DBTIMEZONE(self):
            return self.getToken(PlSqlParser.DBTIMEZONE, 0)

        def SESSIONTIMEZONE(self):
            return self.getToken(PlSqlParser.SESSIONTIMEZONE, 0)

        def MINVALUE(self):
            return self.getToken(PlSqlParser.MINVALUE, 0)

        def MAXVALUE(self):
            return self.getToken(PlSqlParser.MAXVALUE, 0)

        def DEFAULT(self):
            return self.getToken(PlSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = PlSqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 5125
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.TIMESTAMP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5063
                self.match(PlSqlParser.TIMESTAMP)
                self.state = 5066
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.CHAR_STRING]:
                    self.state = 5064
                    self.quoted_string()
                    pass
                elif token in [PlSqlParser.BINDVAR, PlSqlParser.COLON]:
                    self.state = 5065
                    self.bind_variable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5072
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,662,self._ctx)
                if la_ == 1:
                    self.state = 5068
                    self.match(PlSqlParser.AT)
                    self.state = 5069
                    self.match(PlSqlParser.TIME)
                    self.state = 5070
                    self.match(PlSqlParser.ZONE)
                    self.state = 5071
                    self.quoted_string()


                pass
            elif token in [PlSqlParser.INTERVAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5074
                self.match(PlSqlParser.INTERVAL)
                self.state = 5078
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.CHAR_STRING]:
                    self.state = 5075
                    self.quoted_string()
                    pass
                elif token in [PlSqlParser.BINDVAR, PlSqlParser.COLON]:
                    self.state = 5076
                    self.bind_variable()
                    pass
                elif token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.DELIMITED_ID, PlSqlParser.REGULAR_ID]:
                    self.state = 5077
                    self.general_element()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5080
                _la = self._input.LA(1)
                if not(_la==PlSqlParser.DAY or _la==PlSqlParser.HOUR or _la==PlSqlParser.MINUTE or _la==PlSqlParser.SECOND):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5094
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,667,self._ctx)
                if la_ == 1:
                    self.state = 5081
                    self.match(PlSqlParser.LEFT_PAREN)
                    self.state = 5084
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.UNSIGNED_INTEGER]:
                        self.state = 5082
                        self.match(PlSqlParser.UNSIGNED_INTEGER)
                        pass
                    elif token in [PlSqlParser.BINDVAR, PlSqlParser.COLON]:
                        self.state = 5083
                        self.bind_variable()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 5091
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PlSqlParser.COMMA:
                        self.state = 5086
                        self.match(PlSqlParser.COMMA)
                        self.state = 5089
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [PlSqlParser.UNSIGNED_INTEGER]:
                            self.state = 5087
                            self.match(PlSqlParser.UNSIGNED_INTEGER)
                            pass
                        elif token in [PlSqlParser.BINDVAR, PlSqlParser.COLON]:
                            self.state = 5088
                            self.bind_variable()
                            pass
                        else:
                            raise NoViableAltException(self)



                    self.state = 5093
                    self.match(PlSqlParser.RIGHT_PAREN)


                self.state = 5111
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,671,self._ctx)
                if la_ == 1:
                    self.state = 5096
                    self.match(PlSqlParser.TO)
                    self.state = 5109
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PlSqlParser.DAY]:
                        self.state = 5097
                        self.match(PlSqlParser.DAY)
                        pass
                    elif token in [PlSqlParser.HOUR]:
                        self.state = 5098
                        self.match(PlSqlParser.HOUR)
                        pass
                    elif token in [PlSqlParser.MINUTE]:
                        self.state = 5099
                        self.match(PlSqlParser.MINUTE)
                        pass
                    elif token in [PlSqlParser.SECOND]:
                        self.state = 5100
                        self.match(PlSqlParser.SECOND)
                        self.state = 5107
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,669,self._ctx)
                        if la_ == 1:
                            self.state = 5101
                            self.match(PlSqlParser.LEFT_PAREN)
                            self.state = 5104
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [PlSqlParser.UNSIGNED_INTEGER]:
                                self.state = 5102
                                self.match(PlSqlParser.UNSIGNED_INTEGER)
                                pass
                            elif token in [PlSqlParser.BINDVAR, PlSqlParser.COLON]:
                                self.state = 5103
                                self.bind_variable()
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 5106
                            self.match(PlSqlParser.RIGHT_PAREN)


                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            elif token in [PlSqlParser.UNSIGNED_INTEGER, PlSqlParser.APPROXIMATE_NUM_LIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5113
                self.numeric()
                pass
            elif token in [PlSqlParser.DATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5114
                self.match(PlSqlParser.DATE)
                self.state = 5115
                self.quoted_string()
                pass
            elif token in [PlSqlParser.NATIONAL_CHAR_STRING_LIT, PlSqlParser.CHAR_STRING]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5116
                self.quoted_string()
                pass
            elif token in [PlSqlParser.NULL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5117
                self.match(PlSqlParser.NULL)
                pass
            elif token in [PlSqlParser.TRUE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5118
                self.match(PlSqlParser.TRUE)
                pass
            elif token in [PlSqlParser.FALSE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 5119
                self.match(PlSqlParser.FALSE)
                pass
            elif token in [PlSqlParser.DBTIMEZONE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 5120
                self.match(PlSqlParser.DBTIMEZONE)
                pass
            elif token in [PlSqlParser.SESSIONTIMEZONE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 5121
                self.match(PlSqlParser.SESSIONTIMEZONE)
                pass
            elif token in [PlSqlParser.MINVALUE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 5122
                self.match(PlSqlParser.MINVALUE)
                pass
            elif token in [PlSqlParser.MAXVALUE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 5123
                self.match(PlSqlParser.MAXVALUE)
                pass
            elif token in [PlSqlParser.DEFAULT]:
                self.enterOuterAlt(localctx, 13)
                self.state = 5124
                self.match(PlSqlParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(PlSqlParser.UNSIGNED_INTEGER, 0)

        def APPROXIMATE_NUM_LIT(self):
            return self.getToken(PlSqlParser.APPROXIMATE_NUM_LIT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_numeric

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric" ):
                listener.enterNumeric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric" ):
                listener.exitNumeric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumeric" ):
                return visitor.visitNumeric(self)
            else:
                return visitor.visitChildren(self)




    def numeric(self):

        localctx = PlSqlParser.NumericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_numeric)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5127
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.UNSIGNED_INTEGER or _la==PlSqlParser.APPROXIMATE_NUM_LIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Numeric_negativeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SIGN(self):
            return self.getToken(PlSqlParser.MINUS_SIGN, 0)

        def numeric(self):
            return self.getTypedRuleContext(PlSqlParser.NumericContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_numeric_negative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_negative" ):
                listener.enterNumeric_negative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_negative" ):
                listener.exitNumeric_negative(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumeric_negative" ):
                return visitor.visitNumeric_negative(self)
            else:
                return visitor.visitChildren(self)




    def numeric_negative(self):

        localctx = PlSqlParser.Numeric_negativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_numeric_negative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5129
            self.match(PlSqlParser.MINUS_SIGN)
            self.state = 5130
            self.numeric()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Quoted_stringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_STRING(self):
            return self.getToken(PlSqlParser.CHAR_STRING, 0)

        def NATIONAL_CHAR_STRING_LIT(self):
            return self.getToken(PlSqlParser.NATIONAL_CHAR_STRING_LIT, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_quoted_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuoted_string" ):
                listener.enterQuoted_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuoted_string" ):
                listener.exitQuoted_string(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuoted_string" ):
                return visitor.visitQuoted_string(self)
            else:
                return visitor.visitChildren(self)




    def quoted_string(self):

        localctx = PlSqlParser.Quoted_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_quoted_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5132
            _la = self._input.LA(1)
            if not(_la==PlSqlParser.NATIONAL_CHAR_STRING_LIT or _la==PlSqlParser.CHAR_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class R_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_id(self):
            return self.getTypedRuleContext(PlSqlParser.Dot_idContext,0)


        def getRuleIndex(self):
            return PlSqlParser.RULE_r_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterR_id" ):
                listener.enterR_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitR_id" ):
                listener.exitR_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitR_id" ):
                return visitor.visitR_id(self)
            else:
                return visitor.visitChildren(self)




    def r_id(self):

        localctx = PlSqlParser.R_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_r_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5134
            self.dot_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Id_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(PlSqlParser.Regular_idContext,0)


        def DELIMITED_ID(self):
            return self.getToken(PlSqlParser.DELIMITED_ID, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_id_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_expression" ):
                listener.enterId_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_expression" ):
                listener.exitId_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitId_expression" ):
                return visitor.visitId_expression(self)
            else:
                return visitor.visitChildren(self)




    def id_expression(self):

        localctx = PlSqlParser.Id_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_id_expression)
        try:
            self.state = 5138
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.A_LETTER, PlSqlParser.ADD, PlSqlParser.AFTER, PlSqlParser.AGENT, PlSqlParser.AGGREGATE, PlSqlParser.ANALYZE, PlSqlParser.ARRAY, PlSqlParser.ASSUME, PlSqlParser.ASSERT, PlSqlParser.ASSOCIATE, PlSqlParser.AT, PlSqlParser.ATTRIBUTE, PlSqlParser.AUDIT, PlSqlParser.AUTHID, PlSqlParser.AUTO, PlSqlParser.AUTOMATIC, PlSqlParser.AUTONOMOUS_TRANSACTION, PlSqlParser.BATCH, PlSqlParser.BEFORE, PlSqlParser.BFILE, PlSqlParser.BINARY_DOUBLE, PlSqlParser.BINARY_FLOAT, PlSqlParser.BINARY_INTEGER, PlSqlParser.BLOB, PlSqlParser.BLOCK, PlSqlParser.BODY, PlSqlParser.BOOLEAN, PlSqlParser.BOTH, PlSqlParser.BULK, PlSqlParser.BYTE, PlSqlParser.C_LETTER, PlSqlParser.CALL, PlSqlParser.CANONICAL, PlSqlParser.CASCADE, PlSqlParser.CAST, PlSqlParser.CHAR, PlSqlParser.CHAR_CS, PlSqlParser.CHARACTER, PlSqlParser.CHR, PlSqlParser.CLOB, PlSqlParser.CLOSE, PlSqlParser.CLUSTER, PlSqlParser.COLLECT, PlSqlParser.COLUMNS, PlSqlParser.COMMENT, PlSqlParser.COMMIT, PlSqlParser.COMMITTED, PlSqlParser.COMPATIBILITY, PlSqlParser.COMPILE, PlSqlParser.COMPOUND, PlSqlParser.CONSTANT, PlSqlParser.CONSTRAINT, PlSqlParser.CONSTRAINTS, PlSqlParser.CONSTRUCTOR, PlSqlParser.CONTENT, PlSqlParser.CONTEXT, PlSqlParser.CONTINUE, PlSqlParser.CONVERT, PlSqlParser.CORRUPT_XID, PlSqlParser.CORRUPT_XID_ALL, PlSqlParser.COST, PlSqlParser.COUNT, PlSqlParser.CROSS, PlSqlParser.CUBE, PlSqlParser.CURRENT_USER, PlSqlParser.CURSOR, PlSqlParser.CUSTOMDATUM, PlSqlParser.CYCLE, PlSqlParser.DATA, PlSqlParser.DATABASE, PlSqlParser.DATE, PlSqlParser.DAY, PlSqlParser.DB_ROLE_CHANGE, PlSqlParser.DBTIMEZONE, PlSqlParser.DDL, PlSqlParser.DEBUG, PlSqlParser.DEC, PlSqlParser.DECIMAL, PlSqlParser.DECOMPOSE, PlSqlParser.DECREMENT, PlSqlParser.DEFAULTS, PlSqlParser.DEFERRED, PlSqlParser.DEFINER, PlSqlParser.DETERMINISTIC, PlSqlParser.DIMENSION, PlSqlParser.DISABLE, PlSqlParser.DISASSOCIATE, PlSqlParser.DOCUMENT, PlSqlParser.DOUBLE, PlSqlParser.DSINTERVAL_UNCONSTRAINED, PlSqlParser.EACH, PlSqlParser.ELEMENT, PlSqlParser.EMPTY, PlSqlParser.ENABLE, PlSqlParser.ENCODING, PlSqlParser.ENTITYESCAPING, PlSqlParser.ERR, PlSqlParser.ERRORS, PlSqlParser.ESCAPE, PlSqlParser.EVALNAME, PlSqlParser.EXCEPTION, PlSqlParser.EXCEPTION_INIT, PlSqlParser.EXCEPTIONS, PlSqlParser.EXCLUDE, PlSqlParser.EXECUTE, PlSqlParser.EXIT, PlSqlParser.EXPLAIN, PlSqlParser.EXTERNAL, PlSqlParser.EXTRACT, PlSqlParser.FAILURE, PlSqlParser.FINAL, PlSqlParser.FIRST, PlSqlParser.FIRST_VALUE, PlSqlParser.FLOAT, PlSqlParser.FOLLOWING, PlSqlParser.FOLLOWS, PlSqlParser.FORALL, PlSqlParser.FORCE, PlSqlParser.FULL, PlSqlParser.FUNCTION, PlSqlParser.GROUPING, PlSqlParser.HASH, PlSqlParser.HIDE, PlSqlParser.HOUR, PlSqlParser.IGNORE, PlSqlParser.IMMEDIATE, PlSqlParser.INCLUDE, PlSqlParser.INCLUDING, PlSqlParser.INCREMENT, PlSqlParser.INDENT, PlSqlParser.INDEXED, PlSqlParser.INDICATOR, PlSqlParser.INDICES, PlSqlParser.INFINITE, PlSqlParser.INLINE, PlSqlParser.INNER, PlSqlParser.INOUT, PlSqlParser.INSTANTIABLE, PlSqlParser.INSTEAD, PlSqlParser.INT, PlSqlParser.INTEGER, PlSqlParser.INTERVAL, PlSqlParser.INVALIDATE, PlSqlParser.ISOLATION, PlSqlParser.ITERATE, PlSqlParser.JAVA, PlSqlParser.JOIN, PlSqlParser.KEEP, PlSqlParser.LANGUAGE, PlSqlParser.LAST, PlSqlParser.LAST_VALUE, PlSqlParser.LEADING, PlSqlParser.LEFT, PlSqlParser.LEVEL, PlSqlParser.LIBRARY, PlSqlParser.LIKE2, PlSqlParser.LIKE4, PlSqlParser.LIKEC, PlSqlParser.LIMIT, PlSqlParser.LOCAL, PlSqlParser.LOCKED, PlSqlParser.LOG, PlSqlParser.LOGOFF, PlSqlParser.LOGON, PlSqlParser.LONG, PlSqlParser.LOOP, PlSqlParser.MAIN, PlSqlParser.MAP, PlSqlParser.MATCHED, PlSqlParser.MAXVALUE, PlSqlParser.MEASURES, PlSqlParser.MEMBER, PlSqlParser.MERGE, PlSqlParser.MINUTE, PlSqlParser.MINVALUE, PlSqlParser.MLSLABEL, PlSqlParser.MODEL, PlSqlParser.MODIFY, PlSqlParser.MONTH, PlSqlParser.MULTISET, PlSqlParser.NAME, PlSqlParser.NAN, PlSqlParser.NATURAL, PlSqlParser.NATURALN, PlSqlParser.NAV, PlSqlParser.NCHAR, PlSqlParser.NCHAR_CS, PlSqlParser.NCLOB, PlSqlParser.NESTED, PlSqlParser.NEW, PlSqlParser.NO, PlSqlParser.NOAUDIT, PlSqlParser.NOCOPY, PlSqlParser.NOCYCLE, PlSqlParser.NOENTITYESCAPING, PlSqlParser.NONE, PlSqlParser.NOSCHEMACHECK, PlSqlParser.NULLS, PlSqlParser.NUMBER, PlSqlParser.NUMERIC, PlSqlParser.NVARCHAR2, PlSqlParser.OBJECT, PlSqlParser.OFF, PlSqlParser.OID, PlSqlParser.OLD, PlSqlParser.ONLY, PlSqlParser.OPEN, PlSqlParser.ORADATA, PlSqlParser.ORDINALITY, PlSqlParser.OSERROR, PlSqlParser.OUT, PlSqlParser.OUTER, PlSqlParser.OVER, PlSqlParser.OVERRIDING, PlSqlParser.PACKAGE, PlSqlParser.PARALLEL_ENABLE, PlSqlParser.PARAMETERS, PlSqlParser.PARENT, PlSqlParser.PARTITION, PlSqlParser.PASSING, PlSqlParser.PATH, PlSqlParser.PIPELINED, PlSqlParser.PLAN, PlSqlParser.PLS_INTEGER, PlSqlParser.POSITIVE, PlSqlParser.POSITIVEN, PlSqlParser.PRAGMA, PlSqlParser.PRECEDING, PlSqlParser.PRECISION, PlSqlParser.PRESENT, PlSqlParser.RAISE, PlSqlParser.RANGE, PlSqlParser.RAW, PlSqlParser.READ, PlSqlParser.REAL, PlSqlParser.RECORD, PlSqlParser.REF, PlSqlParser.REFERENCE, PlSqlParser.REFERENCING, PlSqlParser.REJECT, PlSqlParser.RELIES_ON, PlSqlParser.RENAME, PlSqlParser.REPLACE, PlSqlParser.RESPECT, PlSqlParser.RESTRICT_REFERENCES, PlSqlParser.RESULT, PlSqlParser.RESULT_CACHE, PlSqlParser.RETURN, PlSqlParser.RETURNING, PlSqlParser.REUSE, PlSqlParser.REVERSE, PlSqlParser.RIGHT, PlSqlParser.ROLLBACK, PlSqlParser.ROLLUP, PlSqlParser.ROW, PlSqlParser.ROWID, PlSqlParser.ROWS, PlSqlParser.RULES, PlSqlParser.SAMPLE, PlSqlParser.SAVE, PlSqlParser.SAVEPOINT, PlSqlParser.SCHEMA, PlSqlParser.SCHEMACHECK, PlSqlParser.SCN, PlSqlParser.SECOND, PlSqlParser.SEED, PlSqlParser.SEGMENT, PlSqlParser.SELF, PlSqlParser.SEQUENTIAL, PlSqlParser.SERIALIZABLE, PlSqlParser.SERIALLY_REUSABLE, PlSqlParser.SERVERERROR, PlSqlParser.SESSIONTIMEZONE, PlSqlParser.SET, PlSqlParser.SETS, PlSqlParser.SETTINGS, PlSqlParser.SHOW, PlSqlParser.SHUTDOWN, PlSqlParser.SIBLINGS, PlSqlParser.SIGNTYPE, PlSqlParser.SIMPLE_INTEGER, PlSqlParser.SINGLE, PlSqlParser.SIZE, PlSqlParser.SKIP_, PlSqlParser.SMALLINT, PlSqlParser.SNAPSHOT, PlSqlParser.SOME, PlSqlParser.SPECIFICATION, PlSqlParser.SQLDATA, PlSqlParser.SQLERROR, PlSqlParser.STANDALONE, PlSqlParser.STARTUP, PlSqlParser.STATEMENT, PlSqlParser.STATEMENT_ID, PlSqlParser.STATIC, PlSqlParser.STATISTICS, PlSqlParser.STRING, PlSqlParser.SUBMULTISET, PlSqlParser.SUBPARTITION, PlSqlParser.SUBSTITUTABLE, PlSqlParser.SUBTYPE, PlSqlParser.SUCCESS, PlSqlParser.SUSPEND, PlSqlParser.TIME, PlSqlParser.TIMESTAMP, PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, PlSqlParser.TIMESTAMP_UNCONSTRAINED, PlSqlParser.TIMEZONE_ABBR, PlSqlParser.TIMEZONE_HOUR, PlSqlParser.TIMEZONE_MINUTE, PlSqlParser.TIMEZONE_REGION, PlSqlParser.TRAILING, PlSqlParser.TRANSACTION, PlSqlParser.TRANSLATE, PlSqlParser.TREAT, PlSqlParser.TRIGGER, PlSqlParser.TRIM, PlSqlParser.TRUNCATE, PlSqlParser.TYPE, PlSqlParser.UNBOUNDED, PlSqlParser.UNDER, PlSqlParser.UNLIMITED, PlSqlParser.UNTIL, PlSqlParser.UPDATED, PlSqlParser.UPSERT, PlSqlParser.UROWID, PlSqlParser.USE, PlSqlParser.VALIDATE, PlSqlParser.VALUE, PlSqlParser.VARCHAR, PlSqlParser.VARCHAR2, PlSqlParser.VARIABLE, PlSqlParser.VARRAY, PlSqlParser.VARYING, PlSqlParser.VERSION, PlSqlParser.VERSIONS, PlSqlParser.WAIT, PlSqlParser.WARNING, PlSqlParser.WELLFORMED, PlSqlParser.WHENEVER, PlSqlParser.WHILE, PlSqlParser.WITHIN, PlSqlParser.WORK, PlSqlParser.WRITE, PlSqlParser.XML, PlSqlParser.XMLAGG, PlSqlParser.XMLATTRIBUTES, PlSqlParser.XMLCAST, PlSqlParser.XMLCOLATTVAL, PlSqlParser.XMLELEMENT, PlSqlParser.XMLEXISTS, PlSqlParser.XMLFOREST, PlSqlParser.XMLNAMESPACES, PlSqlParser.XMLPARSE, PlSqlParser.XMLPI, PlSqlParser.XMLQUERY, PlSqlParser.XMLROOT, PlSqlParser.XMLSERIALIZE, PlSqlParser.XMLTABLE, PlSqlParser.YEAR, PlSqlParser.YES, PlSqlParser.YMINTERVAL_UNCONSTRAINED, PlSqlParser.ZONE, PlSqlParser.PREDICTION, PlSqlParser.PREDICTION_BOUNDS, PlSqlParser.PREDICTION_COST, PlSqlParser.PREDICTION_DETAILS, PlSqlParser.PREDICTION_PROBABILITY, PlSqlParser.PREDICTION_SET, PlSqlParser.CUME_DIST, PlSqlParser.DENSE_RANK, PlSqlParser.LISTAGG, PlSqlParser.PERCENT_RANK, PlSqlParser.PERCENTILE_CONT, PlSqlParser.PERCENTILE_DISC, PlSqlParser.RANK, PlSqlParser.AVG, PlSqlParser.CORR, PlSqlParser.LAG, PlSqlParser.LEAD, PlSqlParser.MAX, PlSqlParser.MEDIAN, PlSqlParser.MIN, PlSqlParser.NTILE, PlSqlParser.RATIO_TO_REPORT, PlSqlParser.ROW_NUMBER, PlSqlParser.SUM, PlSqlParser.VARIANCE, PlSqlParser.REGR_, PlSqlParser.STDDEV, PlSqlParser.VAR_, PlSqlParser.COVAR_, PlSqlParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5136
                self.regular_id()
                pass
            elif token in [PlSqlParser.DELIMITED_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5137
                self.match(PlSqlParser.DELIMITED_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_equal_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_EQUAL_OP(self):
            return self.getToken(PlSqlParser.NOT_EQUAL_OP, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_not_equal_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_equal_op" ):
                listener.enterNot_equal_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_equal_op" ):
                listener.exitNot_equal_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_equal_op" ):
                return visitor.visitNot_equal_op(self)
            else:
                return visitor.visitChildren(self)




    def not_equal_op(self):

        localctx = PlSqlParser.Not_equal_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_not_equal_op)
        try:
            self.state = 5147
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.NOT_EQUAL_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5140
                self.match(PlSqlParser.NOT_EQUAL_OP)
                pass
            elif token in [PlSqlParser.LESS_THAN_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5141
                self.match(PlSqlParser.LESS_THAN_OP)
                self.state = 5142
                self.match(PlSqlParser.GREATER_THAN_OP)
                pass
            elif token in [PlSqlParser.EXCLAMATION_OPERATOR_PART]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5143
                self.match(PlSqlParser.EXCLAMATION_OPERATOR_PART)
                self.state = 5144
                self.match(PlSqlParser.EQUALS_OP)
                pass
            elif token in [PlSqlParser.CARRET_OPERATOR_PART]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5145
                self.match(PlSqlParser.CARRET_OPERATOR_PART)
                self.state = 5146
                self.match(PlSqlParser.EQUALS_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Greater_than_or_equals_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlSqlParser.RULE_greater_than_or_equals_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGreater_than_or_equals_op" ):
                listener.enterGreater_than_or_equals_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGreater_than_or_equals_op" ):
                listener.exitGreater_than_or_equals_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGreater_than_or_equals_op" ):
                return visitor.visitGreater_than_or_equals_op(self)
            else:
                return visitor.visitChildren(self)




    def greater_than_or_equals_op(self):

        localctx = PlSqlParser.Greater_than_or_equals_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_greater_than_or_equals_op)
        try:
            self.state = 5152
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.GREATER_THAN_OR_EQUALS_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5149
                self.match(PlSqlParser.GREATER_THAN_OR_EQUALS_OP)
                pass
            elif token in [PlSqlParser.GREATER_THAN_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5150
                self.match(PlSqlParser.GREATER_THAN_OP)
                self.state = 5151
                self.match(PlSqlParser.EQUALS_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Less_than_or_equals_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlSqlParser.RULE_less_than_or_equals_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLess_than_or_equals_op" ):
                listener.enterLess_than_or_equals_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLess_than_or_equals_op" ):
                listener.exitLess_than_or_equals_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLess_than_or_equals_op" ):
                return visitor.visitLess_than_or_equals_op(self)
            else:
                return visitor.visitChildren(self)




    def less_than_or_equals_op(self):

        localctx = PlSqlParser.Less_than_or_equals_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_less_than_or_equals_op)
        try:
            self.state = 5157
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.LESS_THAN_OR_EQUALS_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5154
                self.match(PlSqlParser.LESS_THAN_OR_EQUALS_OP)
                pass
            elif token in [PlSqlParser.LESS_THAN_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5155
                self.match(PlSqlParser.LESS_THAN_OP)
                self.state = 5156
                self.match(PlSqlParser.EQUALS_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Concatenation_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlSqlParser.RULE_concatenation_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation_op" ):
                listener.enterConcatenation_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation_op" ):
                listener.exitConcatenation_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcatenation_op" ):
                return visitor.visitConcatenation_op(self)
            else:
                return visitor.visitChildren(self)




    def concatenation_op(self):

        localctx = PlSqlParser.Concatenation_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_concatenation_op)
        try:
            self.state = 5162
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PlSqlParser.CONCATENATION_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5159
                self.match(PlSqlParser.CONCATENATION_OP)
                pass
            elif token in [PlSqlParser.VERTICAL_BAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5160
                self.match(PlSqlParser.VERTICAL_BAR)
                self.state = 5161
                self.match(PlSqlParser.VERTICAL_BAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Outer_join_signContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PlSqlParser.RULE_outer_join_sign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuter_join_sign" ):
                listener.enterOuter_join_sign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuter_join_sign" ):
                listener.exitOuter_join_sign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOuter_join_sign" ):
                return visitor.visitOuter_join_sign(self)
            else:
                return visitor.visitChildren(self)




    def outer_join_sign(self):

        localctx = PlSqlParser.Outer_join_signContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_outer_join_sign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5164
            self.match(PlSqlParser.LEFT_PAREN)
            self.state = 5165
            self.match(PlSqlParser.PLUS_SIGN)
            self.state = 5166
            self.match(PlSqlParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Regular_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REGULAR_ID(self):
            return self.getToken(PlSqlParser.REGULAR_ID, 0)

        def A_LETTER(self):
            return self.getToken(PlSqlParser.A_LETTER, 0)

        def ADD(self):
            return self.getToken(PlSqlParser.ADD, 0)

        def AFTER(self):
            return self.getToken(PlSqlParser.AFTER, 0)

        def AGENT(self):
            return self.getToken(PlSqlParser.AGENT, 0)

        def AGGREGATE(self):
            return self.getToken(PlSqlParser.AGGREGATE, 0)

        def ASSUME(self):
            return self.getToken(PlSqlParser.ASSUME, 0)

        def ASSERT(self):
            return self.getToken(PlSqlParser.ASSERT, 0)

        def ANALYZE(self):
            return self.getToken(PlSqlParser.ANALYZE, 0)

        def ARRAY(self):
            return self.getToken(PlSqlParser.ARRAY, 0)

        def ASSOCIATE(self):
            return self.getToken(PlSqlParser.ASSOCIATE, 0)

        def AT(self):
            return self.getToken(PlSqlParser.AT, 0)

        def ATTRIBUTE(self):
            return self.getToken(PlSqlParser.ATTRIBUTE, 0)

        def AUDIT(self):
            return self.getToken(PlSqlParser.AUDIT, 0)

        def AUTHID(self):
            return self.getToken(PlSqlParser.AUTHID, 0)

        def AUTO(self):
            return self.getToken(PlSqlParser.AUTO, 0)

        def AUTOMATIC(self):
            return self.getToken(PlSqlParser.AUTOMATIC, 0)

        def AUTONOMOUS_TRANSACTION(self):
            return self.getToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0)

        def BATCH(self):
            return self.getToken(PlSqlParser.BATCH, 0)

        def BEFORE(self):
            return self.getToken(PlSqlParser.BEFORE, 0)

        def BFILE(self):
            return self.getToken(PlSqlParser.BFILE, 0)

        def BINARY_DOUBLE(self):
            return self.getToken(PlSqlParser.BINARY_DOUBLE, 0)

        def BINARY_FLOAT(self):
            return self.getToken(PlSqlParser.BINARY_FLOAT, 0)

        def BINARY_INTEGER(self):
            return self.getToken(PlSqlParser.BINARY_INTEGER, 0)

        def BLOB(self):
            return self.getToken(PlSqlParser.BLOB, 0)

        def BLOCK(self):
            return self.getToken(PlSqlParser.BLOCK, 0)

        def BODY(self):
            return self.getToken(PlSqlParser.BODY, 0)

        def BOOLEAN(self):
            return self.getToken(PlSqlParser.BOOLEAN, 0)

        def BOTH(self):
            return self.getToken(PlSqlParser.BOTH, 0)

        def BULK(self):
            return self.getToken(PlSqlParser.BULK, 0)

        def BYTE(self):
            return self.getToken(PlSqlParser.BYTE, 0)

        def C_LETTER(self):
            return self.getToken(PlSqlParser.C_LETTER, 0)

        def CALL(self):
            return self.getToken(PlSqlParser.CALL, 0)

        def CANONICAL(self):
            return self.getToken(PlSqlParser.CANONICAL, 0)

        def CASCADE(self):
            return self.getToken(PlSqlParser.CASCADE, 0)

        def CAST(self):
            return self.getToken(PlSqlParser.CAST, 0)

        def CHAR(self):
            return self.getToken(PlSqlParser.CHAR, 0)

        def CHAR_CS(self):
            return self.getToken(PlSqlParser.CHAR_CS, 0)

        def CHARACTER(self):
            return self.getToken(PlSqlParser.CHARACTER, 0)

        def CHR(self):
            return self.getToken(PlSqlParser.CHR, 0)

        def CLOB(self):
            return self.getToken(PlSqlParser.CLOB, 0)

        def CLOSE(self):
            return self.getToken(PlSqlParser.CLOSE, 0)

        def CLUSTER(self):
            return self.getToken(PlSqlParser.CLUSTER, 0)

        def COLLECT(self):
            return self.getToken(PlSqlParser.COLLECT, 0)

        def COLUMNS(self):
            return self.getToken(PlSqlParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(PlSqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(PlSqlParser.COMMIT, 0)

        def COMMITTED(self):
            return self.getToken(PlSqlParser.COMMITTED, 0)

        def COMPATIBILITY(self):
            return self.getToken(PlSqlParser.COMPATIBILITY, 0)

        def COMPILE(self):
            return self.getToken(PlSqlParser.COMPILE, 0)

        def COMPOUND(self):
            return self.getToken(PlSqlParser.COMPOUND, 0)

        def CONSTANT(self):
            return self.getToken(PlSqlParser.CONSTANT, 0)

        def CONSTRAINT(self):
            return self.getToken(PlSqlParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(PlSqlParser.CONSTRAINTS, 0)

        def CONSTRUCTOR(self):
            return self.getToken(PlSqlParser.CONSTRUCTOR, 0)

        def CONTENT(self):
            return self.getToken(PlSqlParser.CONTENT, 0)

        def CONTEXT(self):
            return self.getToken(PlSqlParser.CONTEXT, 0)

        def CONTINUE(self):
            return self.getToken(PlSqlParser.CONTINUE, 0)

        def CONVERT(self):
            return self.getToken(PlSqlParser.CONVERT, 0)

        def CORRUPT_XID(self):
            return self.getToken(PlSqlParser.CORRUPT_XID, 0)

        def CORRUPT_XID_ALL(self):
            return self.getToken(PlSqlParser.CORRUPT_XID_ALL, 0)

        def COST(self):
            return self.getToken(PlSqlParser.COST, 0)

        def COUNT(self):
            return self.getToken(PlSqlParser.COUNT, 0)

        def CROSS(self):
            return self.getToken(PlSqlParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(PlSqlParser.CUBE, 0)

        def CURRENT_USER(self):
            return self.getToken(PlSqlParser.CURRENT_USER, 0)

        def CURSOR(self):
            return self.getToken(PlSqlParser.CURSOR, 0)

        def CUSTOMDATUM(self):
            return self.getToken(PlSqlParser.CUSTOMDATUM, 0)

        def CYCLE(self):
            return self.getToken(PlSqlParser.CYCLE, 0)

        def DATA(self):
            return self.getToken(PlSqlParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(PlSqlParser.DATABASE, 0)

        def DATE(self):
            return self.getToken(PlSqlParser.DATE, 0)

        def DAY(self):
            return self.getToken(PlSqlParser.DAY, 0)

        def DB_ROLE_CHANGE(self):
            return self.getToken(PlSqlParser.DB_ROLE_CHANGE, 0)

        def DBTIMEZONE(self):
            return self.getToken(PlSqlParser.DBTIMEZONE, 0)

        def DDL(self):
            return self.getToken(PlSqlParser.DDL, 0)

        def DEBUG(self):
            return self.getToken(PlSqlParser.DEBUG, 0)

        def DEC(self):
            return self.getToken(PlSqlParser.DEC, 0)

        def DECIMAL(self):
            return self.getToken(PlSqlParser.DECIMAL, 0)

        def DECOMPOSE(self):
            return self.getToken(PlSqlParser.DECOMPOSE, 0)

        def DECREMENT(self):
            return self.getToken(PlSqlParser.DECREMENT, 0)

        def DEFAULTS(self):
            return self.getToken(PlSqlParser.DEFAULTS, 0)

        def DEFERRED(self):
            return self.getToken(PlSqlParser.DEFERRED, 0)

        def DEFINER(self):
            return self.getToken(PlSqlParser.DEFINER, 0)

        def DETERMINISTIC(self):
            return self.getToken(PlSqlParser.DETERMINISTIC, 0)

        def DIMENSION(self):
            return self.getToken(PlSqlParser.DIMENSION, 0)

        def DISABLE(self):
            return self.getToken(PlSqlParser.DISABLE, 0)

        def DISASSOCIATE(self):
            return self.getToken(PlSqlParser.DISASSOCIATE, 0)

        def DOCUMENT(self):
            return self.getToken(PlSqlParser.DOCUMENT, 0)

        def DOUBLE(self):
            return self.getToken(PlSqlParser.DOUBLE, 0)

        def DSINTERVAL_UNCONSTRAINED(self):
            return self.getToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0)

        def EACH(self):
            return self.getToken(PlSqlParser.EACH, 0)

        def ELEMENT(self):
            return self.getToken(PlSqlParser.ELEMENT, 0)

        def EMPTY(self):
            return self.getToken(PlSqlParser.EMPTY, 0)

        def ENABLE(self):
            return self.getToken(PlSqlParser.ENABLE, 0)

        def ENCODING(self):
            return self.getToken(PlSqlParser.ENCODING, 0)

        def ENTITYESCAPING(self):
            return self.getToken(PlSqlParser.ENTITYESCAPING, 0)

        def ERR(self):
            return self.getToken(PlSqlParser.ERR, 0)

        def ERRORS(self):
            return self.getToken(PlSqlParser.ERRORS, 0)

        def ESCAPE(self):
            return self.getToken(PlSqlParser.ESCAPE, 0)

        def EVALNAME(self):
            return self.getToken(PlSqlParser.EVALNAME, 0)

        def EXCEPTION(self):
            return self.getToken(PlSqlParser.EXCEPTION, 0)

        def EXCEPTION_INIT(self):
            return self.getToken(PlSqlParser.EXCEPTION_INIT, 0)

        def EXCEPTIONS(self):
            return self.getToken(PlSqlParser.EXCEPTIONS, 0)

        def EXCLUDE(self):
            return self.getToken(PlSqlParser.EXCLUDE, 0)

        def EXECUTE(self):
            return self.getToken(PlSqlParser.EXECUTE, 0)

        def EXIT(self):
            return self.getToken(PlSqlParser.EXIT, 0)

        def EXPLAIN(self):
            return self.getToken(PlSqlParser.EXPLAIN, 0)

        def EXTERNAL(self):
            return self.getToken(PlSqlParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(PlSqlParser.EXTRACT, 0)

        def FAILURE(self):
            return self.getToken(PlSqlParser.FAILURE, 0)

        def FINAL(self):
            return self.getToken(PlSqlParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(PlSqlParser.FIRST, 0)

        def FIRST_VALUE(self):
            return self.getToken(PlSqlParser.FIRST_VALUE, 0)

        def FLOAT(self):
            return self.getToken(PlSqlParser.FLOAT, 0)

        def FOLLOWING(self):
            return self.getToken(PlSqlParser.FOLLOWING, 0)

        def FOLLOWS(self):
            return self.getToken(PlSqlParser.FOLLOWS, 0)

        def FORALL(self):
            return self.getToken(PlSqlParser.FORALL, 0)

        def FORCE(self):
            return self.getToken(PlSqlParser.FORCE, 0)

        def FULL(self):
            return self.getToken(PlSqlParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(PlSqlParser.FUNCTION, 0)

        def GROUPING(self):
            return self.getToken(PlSqlParser.GROUPING, 0)

        def HASH(self):
            return self.getToken(PlSqlParser.HASH, 0)

        def HIDE(self):
            return self.getToken(PlSqlParser.HIDE, 0)

        def HOUR(self):
            return self.getToken(PlSqlParser.HOUR, 0)

        def IGNORE(self):
            return self.getToken(PlSqlParser.IGNORE, 0)

        def IMMEDIATE(self):
            return self.getToken(PlSqlParser.IMMEDIATE, 0)

        def INCLUDE(self):
            return self.getToken(PlSqlParser.INCLUDE, 0)

        def INCLUDING(self):
            return self.getToken(PlSqlParser.INCLUDING, 0)

        def INCREMENT(self):
            return self.getToken(PlSqlParser.INCREMENT, 0)

        def INDENT(self):
            return self.getToken(PlSqlParser.INDENT, 0)

        def INDEXED(self):
            return self.getToken(PlSqlParser.INDEXED, 0)

        def INDICATOR(self):
            return self.getToken(PlSqlParser.INDICATOR, 0)

        def INDICES(self):
            return self.getToken(PlSqlParser.INDICES, 0)

        def INFINITE(self):
            return self.getToken(PlSqlParser.INFINITE, 0)

        def INLINE(self):
            return self.getToken(PlSqlParser.INLINE, 0)

        def INNER(self):
            return self.getToken(PlSqlParser.INNER, 0)

        def INOUT(self):
            return self.getToken(PlSqlParser.INOUT, 0)

        def INSTANTIABLE(self):
            return self.getToken(PlSqlParser.INSTANTIABLE, 0)

        def INSTEAD(self):
            return self.getToken(PlSqlParser.INSTEAD, 0)

        def INT(self):
            return self.getToken(PlSqlParser.INT, 0)

        def INTEGER(self):
            return self.getToken(PlSqlParser.INTEGER, 0)

        def INTERVAL(self):
            return self.getToken(PlSqlParser.INTERVAL, 0)

        def INVALIDATE(self):
            return self.getToken(PlSqlParser.INVALIDATE, 0)

        def ISOLATION(self):
            return self.getToken(PlSqlParser.ISOLATION, 0)

        def ITERATE(self):
            return self.getToken(PlSqlParser.ITERATE, 0)

        def JAVA(self):
            return self.getToken(PlSqlParser.JAVA, 0)

        def JOIN(self):
            return self.getToken(PlSqlParser.JOIN, 0)

        def KEEP(self):
            return self.getToken(PlSqlParser.KEEP, 0)

        def LANGUAGE(self):
            return self.getToken(PlSqlParser.LANGUAGE, 0)

        def LAST(self):
            return self.getToken(PlSqlParser.LAST, 0)

        def LAST_VALUE(self):
            return self.getToken(PlSqlParser.LAST_VALUE, 0)

        def LEADING(self):
            return self.getToken(PlSqlParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(PlSqlParser.LEFT, 0)

        def LEVEL(self):
            return self.getToken(PlSqlParser.LEVEL, 0)

        def LIBRARY(self):
            return self.getToken(PlSqlParser.LIBRARY, 0)

        def LIKE2(self):
            return self.getToken(PlSqlParser.LIKE2, 0)

        def LIKE4(self):
            return self.getToken(PlSqlParser.LIKE4, 0)

        def LIKEC(self):
            return self.getToken(PlSqlParser.LIKEC, 0)

        def LIMIT(self):
            return self.getToken(PlSqlParser.LIMIT, 0)

        def LOCAL(self):
            return self.getToken(PlSqlParser.LOCAL, 0)

        def LOCKED(self):
            return self.getToken(PlSqlParser.LOCKED, 0)

        def LOG(self):
            return self.getToken(PlSqlParser.LOG, 0)

        def LOGOFF(self):
            return self.getToken(PlSqlParser.LOGOFF, 0)

        def LOGON(self):
            return self.getToken(PlSqlParser.LOGON, 0)

        def LONG(self):
            return self.getToken(PlSqlParser.LONG, 0)

        def LOOP(self):
            return self.getToken(PlSqlParser.LOOP, 0)

        def MAIN(self):
            return self.getToken(PlSqlParser.MAIN, 0)

        def MAP(self):
            return self.getToken(PlSqlParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(PlSqlParser.MATCHED, 0)

        def MAXVALUE(self):
            return self.getToken(PlSqlParser.MAXVALUE, 0)

        def MEASURES(self):
            return self.getToken(PlSqlParser.MEASURES, 0)

        def MEMBER(self):
            return self.getToken(PlSqlParser.MEMBER, 0)

        def MERGE(self):
            return self.getToken(PlSqlParser.MERGE, 0)

        def MINUTE(self):
            return self.getToken(PlSqlParser.MINUTE, 0)

        def MINVALUE(self):
            return self.getToken(PlSqlParser.MINVALUE, 0)

        def MLSLABEL(self):
            return self.getToken(PlSqlParser.MLSLABEL, 0)

        def MODEL(self):
            return self.getToken(PlSqlParser.MODEL, 0)

        def MODIFY(self):
            return self.getToken(PlSqlParser.MODIFY, 0)

        def MONTH(self):
            return self.getToken(PlSqlParser.MONTH, 0)

        def MULTISET(self):
            return self.getToken(PlSqlParser.MULTISET, 0)

        def NAME(self):
            return self.getToken(PlSqlParser.NAME, 0)

        def NAN(self):
            return self.getToken(PlSqlParser.NAN, 0)

        def NATURAL(self):
            return self.getToken(PlSqlParser.NATURAL, 0)

        def NATURALN(self):
            return self.getToken(PlSqlParser.NATURALN, 0)

        def NAV(self):
            return self.getToken(PlSqlParser.NAV, 0)

        def NCHAR(self):
            return self.getToken(PlSqlParser.NCHAR, 0)

        def NCHAR_CS(self):
            return self.getToken(PlSqlParser.NCHAR_CS, 0)

        def NCLOB(self):
            return self.getToken(PlSqlParser.NCLOB, 0)

        def NESTED(self):
            return self.getToken(PlSqlParser.NESTED, 0)

        def NEW(self):
            return self.getToken(PlSqlParser.NEW, 0)

        def NO(self):
            return self.getToken(PlSqlParser.NO, 0)

        def NOAUDIT(self):
            return self.getToken(PlSqlParser.NOAUDIT, 0)

        def NOCOPY(self):
            return self.getToken(PlSqlParser.NOCOPY, 0)

        def NOCYCLE(self):
            return self.getToken(PlSqlParser.NOCYCLE, 0)

        def NOENTITYESCAPING(self):
            return self.getToken(PlSqlParser.NOENTITYESCAPING, 0)

        def NONE(self):
            return self.getToken(PlSqlParser.NONE, 0)

        def NOSCHEMACHECK(self):
            return self.getToken(PlSqlParser.NOSCHEMACHECK, 0)

        def NULLS(self):
            return self.getToken(PlSqlParser.NULLS, 0)

        def NUMBER(self):
            return self.getToken(PlSqlParser.NUMBER, 0)

        def NUMERIC(self):
            return self.getToken(PlSqlParser.NUMERIC, 0)

        def NVARCHAR2(self):
            return self.getToken(PlSqlParser.NVARCHAR2, 0)

        def OBJECT(self):
            return self.getToken(PlSqlParser.OBJECT, 0)

        def OFF(self):
            return self.getToken(PlSqlParser.OFF, 0)

        def OID(self):
            return self.getToken(PlSqlParser.OID, 0)

        def OLD(self):
            return self.getToken(PlSqlParser.OLD, 0)

        def ONLY(self):
            return self.getToken(PlSqlParser.ONLY, 0)

        def OPEN(self):
            return self.getToken(PlSqlParser.OPEN, 0)

        def ORADATA(self):
            return self.getToken(PlSqlParser.ORADATA, 0)

        def ORDINALITY(self):
            return self.getToken(PlSqlParser.ORDINALITY, 0)

        def OSERROR(self):
            return self.getToken(PlSqlParser.OSERROR, 0)

        def OUT(self):
            return self.getToken(PlSqlParser.OUT, 0)

        def OUTER(self):
            return self.getToken(PlSqlParser.OUTER, 0)

        def OVER(self):
            return self.getToken(PlSqlParser.OVER, 0)

        def OVERRIDING(self):
            return self.getToken(PlSqlParser.OVERRIDING, 0)

        def PACKAGE(self):
            return self.getToken(PlSqlParser.PACKAGE, 0)

        def PARALLEL_ENABLE(self):
            return self.getToken(PlSqlParser.PARALLEL_ENABLE, 0)

        def PARAMETERS(self):
            return self.getToken(PlSqlParser.PARAMETERS, 0)

        def PARENT(self):
            return self.getToken(PlSqlParser.PARENT, 0)

        def PARTITION(self):
            return self.getToken(PlSqlParser.PARTITION, 0)

        def PASSING(self):
            return self.getToken(PlSqlParser.PASSING, 0)

        def PATH(self):
            return self.getToken(PlSqlParser.PATH, 0)

        def PIPELINED(self):
            return self.getToken(PlSqlParser.PIPELINED, 0)

        def PLAN(self):
            return self.getToken(PlSqlParser.PLAN, 0)

        def PLS_INTEGER(self):
            return self.getToken(PlSqlParser.PLS_INTEGER, 0)

        def POSITIVE(self):
            return self.getToken(PlSqlParser.POSITIVE, 0)

        def POSITIVEN(self):
            return self.getToken(PlSqlParser.POSITIVEN, 0)

        def PRAGMA(self):
            return self.getToken(PlSqlParser.PRAGMA, 0)

        def PRECEDING(self):
            return self.getToken(PlSqlParser.PRECEDING, 0)

        def PRECISION(self):
            return self.getToken(PlSqlParser.PRECISION, 0)

        def PRESENT(self):
            return self.getToken(PlSqlParser.PRESENT, 0)

        def RAISE(self):
            return self.getToken(PlSqlParser.RAISE, 0)

        def RANGE(self):
            return self.getToken(PlSqlParser.RANGE, 0)

        def RAW(self):
            return self.getToken(PlSqlParser.RAW, 0)

        def READ(self):
            return self.getToken(PlSqlParser.READ, 0)

        def REAL(self):
            return self.getToken(PlSqlParser.REAL, 0)

        def RECORD(self):
            return self.getToken(PlSqlParser.RECORD, 0)

        def REF(self):
            return self.getToken(PlSqlParser.REF, 0)

        def REFERENCE(self):
            return self.getToken(PlSqlParser.REFERENCE, 0)

        def REFERENCING(self):
            return self.getToken(PlSqlParser.REFERENCING, 0)

        def REJECT(self):
            return self.getToken(PlSqlParser.REJECT, 0)

        def RELIES_ON(self):
            return self.getToken(PlSqlParser.RELIES_ON, 0)

        def RENAME(self):
            return self.getToken(PlSqlParser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(PlSqlParser.REPLACE, 0)

        def RESPECT(self):
            return self.getToken(PlSqlParser.RESPECT, 0)

        def RESTRICT_REFERENCES(self):
            return self.getToken(PlSqlParser.RESTRICT_REFERENCES, 0)

        def RESULT(self):
            return self.getToken(PlSqlParser.RESULT, 0)

        def RESULT_CACHE(self):
            return self.getToken(PlSqlParser.RESULT_CACHE, 0)

        def RETURN(self):
            return self.getToken(PlSqlParser.RETURN, 0)

        def RETURNING(self):
            return self.getToken(PlSqlParser.RETURNING, 0)

        def REUSE(self):
            return self.getToken(PlSqlParser.REUSE, 0)

        def REVERSE(self):
            return self.getToken(PlSqlParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(PlSqlParser.RIGHT, 0)

        def ROLLBACK(self):
            return self.getToken(PlSqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(PlSqlParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(PlSqlParser.ROW, 0)

        def ROWID(self):
            return self.getToken(PlSqlParser.ROWID, 0)

        def ROWS(self):
            return self.getToken(PlSqlParser.ROWS, 0)

        def RULES(self):
            return self.getToken(PlSqlParser.RULES, 0)

        def SAMPLE(self):
            return self.getToken(PlSqlParser.SAMPLE, 0)

        def SAVE(self):
            return self.getToken(PlSqlParser.SAVE, 0)

        def SAVEPOINT(self):
            return self.getToken(PlSqlParser.SAVEPOINT, 0)

        def SCHEMA(self):
            return self.getToken(PlSqlParser.SCHEMA, 0)

        def SCHEMACHECK(self):
            return self.getToken(PlSqlParser.SCHEMACHECK, 0)

        def SCN(self):
            return self.getToken(PlSqlParser.SCN, 0)

        def SECOND(self):
            return self.getToken(PlSqlParser.SECOND, 0)

        def SEED(self):
            return self.getToken(PlSqlParser.SEED, 0)

        def SEGMENT(self):
            return self.getToken(PlSqlParser.SEGMENT, 0)

        def SELF(self):
            return self.getToken(PlSqlParser.SELF, 0)

        def SEQUENTIAL(self):
            return self.getToken(PlSqlParser.SEQUENTIAL, 0)

        def SERIALIZABLE(self):
            return self.getToken(PlSqlParser.SERIALIZABLE, 0)

        def SERIALLY_REUSABLE(self):
            return self.getToken(PlSqlParser.SERIALLY_REUSABLE, 0)

        def SERVERERROR(self):
            return self.getToken(PlSqlParser.SERVERERROR, 0)

        def SESSIONTIMEZONE(self):
            return self.getToken(PlSqlParser.SESSIONTIMEZONE, 0)

        def SET(self):
            return self.getToken(PlSqlParser.SET, 0)

        def SETS(self):
            return self.getToken(PlSqlParser.SETS, 0)

        def SETTINGS(self):
            return self.getToken(PlSqlParser.SETTINGS, 0)

        def SHOW(self):
            return self.getToken(PlSqlParser.SHOW, 0)

        def SHUTDOWN(self):
            return self.getToken(PlSqlParser.SHUTDOWN, 0)

        def SIBLINGS(self):
            return self.getToken(PlSqlParser.SIBLINGS, 0)

        def SIGNTYPE(self):
            return self.getToken(PlSqlParser.SIGNTYPE, 0)

        def SIMPLE_INTEGER(self):
            return self.getToken(PlSqlParser.SIMPLE_INTEGER, 0)

        def SINGLE(self):
            return self.getToken(PlSqlParser.SINGLE, 0)

        def SIZE(self):
            return self.getToken(PlSqlParser.SIZE, 0)

        def SKIP_(self):
            return self.getToken(PlSqlParser.SKIP_, 0)

        def SMALLINT(self):
            return self.getToken(PlSqlParser.SMALLINT, 0)

        def SNAPSHOT(self):
            return self.getToken(PlSqlParser.SNAPSHOT, 0)

        def SOME(self):
            return self.getToken(PlSqlParser.SOME, 0)

        def SPECIFICATION(self):
            return self.getToken(PlSqlParser.SPECIFICATION, 0)

        def SQLDATA(self):
            return self.getToken(PlSqlParser.SQLDATA, 0)

        def SQLERROR(self):
            return self.getToken(PlSqlParser.SQLERROR, 0)

        def STANDALONE(self):
            return self.getToken(PlSqlParser.STANDALONE, 0)

        def STARTUP(self):
            return self.getToken(PlSqlParser.STARTUP, 0)

        def STATEMENT(self):
            return self.getToken(PlSqlParser.STATEMENT, 0)

        def STATEMENT_ID(self):
            return self.getToken(PlSqlParser.STATEMENT_ID, 0)

        def STATIC(self):
            return self.getToken(PlSqlParser.STATIC, 0)

        def STATISTICS(self):
            return self.getToken(PlSqlParser.STATISTICS, 0)

        def STRING(self):
            return self.getToken(PlSqlParser.STRING, 0)

        def SUBMULTISET(self):
            return self.getToken(PlSqlParser.SUBMULTISET, 0)

        def SUBPARTITION(self):
            return self.getToken(PlSqlParser.SUBPARTITION, 0)

        def SUBSTITUTABLE(self):
            return self.getToken(PlSqlParser.SUBSTITUTABLE, 0)

        def SUBTYPE(self):
            return self.getToken(PlSqlParser.SUBTYPE, 0)

        def SUCCESS(self):
            return self.getToken(PlSqlParser.SUCCESS, 0)

        def SUSPEND(self):
            return self.getToken(PlSqlParser.SUSPEND, 0)

        def TIME(self):
            return self.getToken(PlSqlParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(PlSqlParser.TIMESTAMP, 0)

        def TIMESTAMP_LTZ_UNCONSTRAINED(self):
            return self.getToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0)

        def TIMESTAMP_TZ_UNCONSTRAINED(self):
            return self.getToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0)

        def TIMESTAMP_UNCONSTRAINED(self):
            return self.getToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0)

        def TIMEZONE_ABBR(self):
            return self.getToken(PlSqlParser.TIMEZONE_ABBR, 0)

        def TIMEZONE_HOUR(self):
            return self.getToken(PlSqlParser.TIMEZONE_HOUR, 0)

        def TIMEZONE_MINUTE(self):
            return self.getToken(PlSqlParser.TIMEZONE_MINUTE, 0)

        def TIMEZONE_REGION(self):
            return self.getToken(PlSqlParser.TIMEZONE_REGION, 0)

        def TRAILING(self):
            return self.getToken(PlSqlParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(PlSqlParser.TRANSACTION, 0)

        def TRANSLATE(self):
            return self.getToken(PlSqlParser.TRANSLATE, 0)

        def TREAT(self):
            return self.getToken(PlSqlParser.TREAT, 0)

        def TRIGGER(self):
            return self.getToken(PlSqlParser.TRIGGER, 0)

        def TRIM(self):
            return self.getToken(PlSqlParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(PlSqlParser.TRUNCATE, 0)

        def TYPE(self):
            return self.getToken(PlSqlParser.TYPE, 0)

        def UNBOUNDED(self):
            return self.getToken(PlSqlParser.UNBOUNDED, 0)

        def UNDER(self):
            return self.getToken(PlSqlParser.UNDER, 0)

        def UNLIMITED(self):
            return self.getToken(PlSqlParser.UNLIMITED, 0)

        def UNTIL(self):
            return self.getToken(PlSqlParser.UNTIL, 0)

        def UPDATED(self):
            return self.getToken(PlSqlParser.UPDATED, 0)

        def UPSERT(self):
            return self.getToken(PlSqlParser.UPSERT, 0)

        def UROWID(self):
            return self.getToken(PlSqlParser.UROWID, 0)

        def USE(self):
            return self.getToken(PlSqlParser.USE, 0)

        def VALIDATE(self):
            return self.getToken(PlSqlParser.VALIDATE, 0)

        def VALUE(self):
            return self.getToken(PlSqlParser.VALUE, 0)

        def VARCHAR(self):
            return self.getToken(PlSqlParser.VARCHAR, 0)

        def VARCHAR2(self):
            return self.getToken(PlSqlParser.VARCHAR2, 0)

        def VARIABLE(self):
            return self.getToken(PlSqlParser.VARIABLE, 0)

        def VARRAY(self):
            return self.getToken(PlSqlParser.VARRAY, 0)

        def VARYING(self):
            return self.getToken(PlSqlParser.VARYING, 0)

        def VERSION(self):
            return self.getToken(PlSqlParser.VERSION, 0)

        def VERSIONS(self):
            return self.getToken(PlSqlParser.VERSIONS, 0)

        def WAIT(self):
            return self.getToken(PlSqlParser.WAIT, 0)

        def WARNING(self):
            return self.getToken(PlSqlParser.WARNING, 0)

        def WELLFORMED(self):
            return self.getToken(PlSqlParser.WELLFORMED, 0)

        def WHENEVER(self):
            return self.getToken(PlSqlParser.WHENEVER, 0)

        def WHILE(self):
            return self.getToken(PlSqlParser.WHILE, 0)

        def WITHIN(self):
            return self.getToken(PlSqlParser.WITHIN, 0)

        def WORK(self):
            return self.getToken(PlSqlParser.WORK, 0)

        def WRITE(self):
            return self.getToken(PlSqlParser.WRITE, 0)

        def XML(self):
            return self.getToken(PlSqlParser.XML, 0)

        def XMLAGG(self):
            return self.getToken(PlSqlParser.XMLAGG, 0)

        def XMLATTRIBUTES(self):
            return self.getToken(PlSqlParser.XMLATTRIBUTES, 0)

        def XMLCAST(self):
            return self.getToken(PlSqlParser.XMLCAST, 0)

        def XMLCOLATTVAL(self):
            return self.getToken(PlSqlParser.XMLCOLATTVAL, 0)

        def XMLELEMENT(self):
            return self.getToken(PlSqlParser.XMLELEMENT, 0)

        def XMLEXISTS(self):
            return self.getToken(PlSqlParser.XMLEXISTS, 0)

        def XMLFOREST(self):
            return self.getToken(PlSqlParser.XMLFOREST, 0)

        def XMLNAMESPACES(self):
            return self.getToken(PlSqlParser.XMLNAMESPACES, 0)

        def XMLPARSE(self):
            return self.getToken(PlSqlParser.XMLPARSE, 0)

        def XMLPI(self):
            return self.getToken(PlSqlParser.XMLPI, 0)

        def XMLQUERY(self):
            return self.getToken(PlSqlParser.XMLQUERY, 0)

        def XMLROOT(self):
            return self.getToken(PlSqlParser.XMLROOT, 0)

        def XMLSERIALIZE(self):
            return self.getToken(PlSqlParser.XMLSERIALIZE, 0)

        def XMLTABLE(self):
            return self.getToken(PlSqlParser.XMLTABLE, 0)

        def YEAR(self):
            return self.getToken(PlSqlParser.YEAR, 0)

        def YES(self):
            return self.getToken(PlSqlParser.YES, 0)

        def YMINTERVAL_UNCONSTRAINED(self):
            return self.getToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0)

        def ZONE(self):
            return self.getToken(PlSqlParser.ZONE, 0)

        def PREDICTION(self):
            return self.getToken(PlSqlParser.PREDICTION, 0)

        def PREDICTION_BOUNDS(self):
            return self.getToken(PlSqlParser.PREDICTION_BOUNDS, 0)

        def PREDICTION_COST(self):
            return self.getToken(PlSqlParser.PREDICTION_COST, 0)

        def PREDICTION_DETAILS(self):
            return self.getToken(PlSqlParser.PREDICTION_DETAILS, 0)

        def PREDICTION_PROBABILITY(self):
            return self.getToken(PlSqlParser.PREDICTION_PROBABILITY, 0)

        def PREDICTION_SET(self):
            return self.getToken(PlSqlParser.PREDICTION_SET, 0)

        def CUME_DIST(self):
            return self.getToken(PlSqlParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(PlSqlParser.DENSE_RANK, 0)

        def LISTAGG(self):
            return self.getToken(PlSqlParser.LISTAGG, 0)

        def PERCENT_RANK(self):
            return self.getToken(PlSqlParser.PERCENT_RANK, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(PlSqlParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(PlSqlParser.PERCENTILE_DISC, 0)

        def RANK(self):
            return self.getToken(PlSqlParser.RANK, 0)

        def AVG(self):
            return self.getToken(PlSqlParser.AVG, 0)

        def CORR(self):
            return self.getToken(PlSqlParser.CORR, 0)

        def LAG(self):
            return self.getToken(PlSqlParser.LAG, 0)

        def LEAD(self):
            return self.getToken(PlSqlParser.LEAD, 0)

        def MAX(self):
            return self.getToken(PlSqlParser.MAX, 0)

        def MEDIAN(self):
            return self.getToken(PlSqlParser.MEDIAN, 0)

        def MIN(self):
            return self.getToken(PlSqlParser.MIN, 0)

        def NTILE(self):
            return self.getToken(PlSqlParser.NTILE, 0)

        def RATIO_TO_REPORT(self):
            return self.getToken(PlSqlParser.RATIO_TO_REPORT, 0)

        def ROW_NUMBER(self):
            return self.getToken(PlSqlParser.ROW_NUMBER, 0)

        def SUM(self):
            return self.getToken(PlSqlParser.SUM, 0)

        def VARIANCE(self):
            return self.getToken(PlSqlParser.VARIANCE, 0)

        def REGR_(self):
            return self.getToken(PlSqlParser.REGR_, 0)

        def STDDEV(self):
            return self.getToken(PlSqlParser.STDDEV, 0)

        def VAR_(self):
            return self.getToken(PlSqlParser.VAR_, 0)

        def COVAR_(self):
            return self.getToken(PlSqlParser.COVAR_, 0)

        def getRuleIndex(self):
            return PlSqlParser.RULE_regular_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegular_id" ):
                listener.enterRegular_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegular_id" ):
                listener.exitRegular_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegular_id" ):
                return visitor.visitRegular_id(self)
            else:
                return visitor.visitChildren(self)




    def regular_id(self):

        localctx = PlSqlParser.Regular_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_regular_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5168
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSUME) | (1 << PlSqlParser.ASSERT) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER) | (1 << PlSqlParser.BLOB) | (1 << PlSqlParser.BLOCK) | (1 << PlSqlParser.BODY) | (1 << PlSqlParser.BOOLEAN) | (1 << PlSqlParser.BOTH) | (1 << PlSqlParser.BULK) | (1 << PlSqlParser.BYTE) | (1 << PlSqlParser.C_LETTER) | (1 << PlSqlParser.CALL) | (1 << PlSqlParser.CANONICAL) | (1 << PlSqlParser.CASCADE) | (1 << PlSqlParser.CAST) | (1 << PlSqlParser.CHAR) | (1 << PlSqlParser.CHAR_CS) | (1 << PlSqlParser.CHARACTER) | (1 << PlSqlParser.CHR) | (1 << PlSqlParser.CLOB) | (1 << PlSqlParser.CLOSE) | (1 << PlSqlParser.CLUSTER) | (1 << PlSqlParser.COLLECT) | (1 << PlSqlParser.COLUMNS) | (1 << PlSqlParser.COMMENT) | (1 << PlSqlParser.COMMIT) | (1 << PlSqlParser.COMMITTED) | (1 << PlSqlParser.COMPATIBILITY) | (1 << PlSqlParser.COMPILE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)) | (1 << (PlSqlParser.DB_ROLE_CHANGE - 64)) | (1 << (PlSqlParser.DBTIMEZONE - 64)) | (1 << (PlSqlParser.DDL - 64)) | (1 << (PlSqlParser.DEBUG - 64)) | (1 << (PlSqlParser.DEC - 64)) | (1 << (PlSqlParser.DECIMAL - 64)) | (1 << (PlSqlParser.DECOMPOSE - 64)) | (1 << (PlSqlParser.DECREMENT - 64)) | (1 << (PlSqlParser.DEFAULTS - 64)) | (1 << (PlSqlParser.DEFERRED - 64)) | (1 << (PlSqlParser.DEFINER - 64)) | (1 << (PlSqlParser.DETERMINISTIC - 64)) | (1 << (PlSqlParser.DIMENSION - 64)) | (1 << (PlSqlParser.DISABLE - 64)) | (1 << (PlSqlParser.DISASSOCIATE - 64)) | (1 << (PlSqlParser.DOCUMENT - 64)) | (1 << (PlSqlParser.DOUBLE - 64)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (PlSqlParser.EACH - 64)) | (1 << (PlSqlParser.ELEMENT - 64)) | (1 << (PlSqlParser.EMPTY - 64)) | (1 << (PlSqlParser.ENABLE - 64)) | (1 << (PlSqlParser.ENCODING - 64)) | (1 << (PlSqlParser.ENTITYESCAPING - 64)) | (1 << (PlSqlParser.ERR - 64)) | (1 << (PlSqlParser.ERRORS - 64)) | (1 << (PlSqlParser.ESCAPE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FULL - 128)) | (1 << (PlSqlParser.FUNCTION - 128)) | (1 << (PlSqlParser.GROUPING - 128)) | (1 << (PlSqlParser.HASH - 128)) | (1 << (PlSqlParser.HIDE - 128)) | (1 << (PlSqlParser.HOUR - 128)) | (1 << (PlSqlParser.IGNORE - 128)) | (1 << (PlSqlParser.IMMEDIATE - 128)) | (1 << (PlSqlParser.INCLUDE - 128)) | (1 << (PlSqlParser.INCLUDING - 128)) | (1 << (PlSqlParser.INCREMENT - 128)) | (1 << (PlSqlParser.INDENT - 128)) | (1 << (PlSqlParser.INDEXED - 128)) | (1 << (PlSqlParser.INDICATOR - 128)) | (1 << (PlSqlParser.INDICES - 128)) | (1 << (PlSqlParser.INFINITE - 128)) | (1 << (PlSqlParser.INLINE - 128)) | (1 << (PlSqlParser.INNER - 128)) | (1 << (PlSqlParser.INOUT - 128)) | (1 << (PlSqlParser.INSTANTIABLE - 128)) | (1 << (PlSqlParser.INSTEAD - 128)) | (1 << (PlSqlParser.INT - 128)) | (1 << (PlSqlParser.INTEGER - 128)) | (1 << (PlSqlParser.INTERVAL - 128)) | (1 << (PlSqlParser.INVALIDATE - 128)) | (1 << (PlSqlParser.ISOLATION - 128)) | (1 << (PlSqlParser.ITERATE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LOCAL - 192)) | (1 << (PlSqlParser.LOCKED - 192)) | (1 << (PlSqlParser.LOG - 192)) | (1 << (PlSqlParser.LOGOFF - 192)) | (1 << (PlSqlParser.LOGON - 192)) | (1 << (PlSqlParser.LONG - 192)) | (1 << (PlSqlParser.LOOP - 192)) | (1 << (PlSqlParser.MAIN - 192)) | (1 << (PlSqlParser.MAP - 192)) | (1 << (PlSqlParser.MATCHED - 192)) | (1 << (PlSqlParser.MAXVALUE - 192)) | (1 << (PlSqlParser.MEASURES - 192)) | (1 << (PlSqlParser.MEMBER - 192)) | (1 << (PlSqlParser.MERGE - 192)) | (1 << (PlSqlParser.MINUTE - 192)) | (1 << (PlSqlParser.MINVALUE - 192)) | (1 << (PlSqlParser.MLSLABEL - 192)) | (1 << (PlSqlParser.MODEL - 192)) | (1 << (PlSqlParser.MODIFY - 192)) | (1 << (PlSqlParser.MONTH - 192)) | (1 << (PlSqlParser.MULTISET - 192)) | (1 << (PlSqlParser.NAME - 192)) | (1 << (PlSqlParser.NAN - 192)) | (1 << (PlSqlParser.NATURAL - 192)) | (1 << (PlSqlParser.NATURALN - 192)) | (1 << (PlSqlParser.NAV - 192)) | (1 << (PlSqlParser.NCHAR - 192)) | (1 << (PlSqlParser.NCHAR_CS - 192)) | (1 << (PlSqlParser.NCLOB - 192)) | (1 << (PlSqlParser.NESTED - 192)) | (1 << (PlSqlParser.NEW - 192)) | (1 << (PlSqlParser.NO - 192)) | (1 << (PlSqlParser.NOAUDIT - 192)) | (1 << (PlSqlParser.NOCOPY - 192)) | (1 << (PlSqlParser.NOCYCLE - 192)) | (1 << (PlSqlParser.NOENTITYESCAPING - 192)) | (1 << (PlSqlParser.NONE - 192)) | (1 << (PlSqlParser.NOSCHEMACHECK - 192)) | (1 << (PlSqlParser.NULLS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.ONLY - 256)) | (1 << (PlSqlParser.OPEN - 256)) | (1 << (PlSqlParser.ORADATA - 256)) | (1 << (PlSqlParser.ORDINALITY - 256)) | (1 << (PlSqlParser.OSERROR - 256)) | (1 << (PlSqlParser.OUT - 256)) | (1 << (PlSqlParser.OUTER - 256)) | (1 << (PlSqlParser.OVER - 256)) | (1 << (PlSqlParser.OVERRIDING - 256)) | (1 << (PlSqlParser.PACKAGE - 256)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 256)) | (1 << (PlSqlParser.PARAMETERS - 256)) | (1 << (PlSqlParser.PARENT - 256)) | (1 << (PlSqlParser.PARTITION - 256)) | (1 << (PlSqlParser.PASSING - 256)) | (1 << (PlSqlParser.PATH - 256)) | (1 << (PlSqlParser.PIPELINED - 256)) | (1 << (PlSqlParser.PLAN - 256)) | (1 << (PlSqlParser.PLS_INTEGER - 256)) | (1 << (PlSqlParser.POSITIVE - 256)) | (1 << (PlSqlParser.POSITIVEN - 256)) | (1 << (PlSqlParser.PRAGMA - 256)) | (1 << (PlSqlParser.PRECEDING - 256)) | (1 << (PlSqlParser.PRECISION - 256)) | (1 << (PlSqlParser.PRESENT - 256)) | (1 << (PlSqlParser.RAISE - 256)) | (1 << (PlSqlParser.RANGE - 256)) | (1 << (PlSqlParser.RAW - 256)) | (1 << (PlSqlParser.READ - 256)) | (1 << (PlSqlParser.REAL - 256)) | (1 << (PlSqlParser.RECORD - 256)) | (1 << (PlSqlParser.REF - 256)) | (1 << (PlSqlParser.REFERENCE - 256)) | (1 << (PlSqlParser.REFERENCING - 256)) | (1 << (PlSqlParser.REJECT - 256)) | (1 << (PlSqlParser.RELIES_ON - 256)) | (1 << (PlSqlParser.RENAME - 256)) | (1 << (PlSqlParser.REPLACE - 256)) | (1 << (PlSqlParser.RESPECT - 256)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 256)) | (1 << (PlSqlParser.RESULT - 256)) | (1 << (PlSqlParser.RESULT_CACHE - 256)) | (1 << (PlSqlParser.RETURN - 256)) | (1 << (PlSqlParser.RETURNING - 256)) | (1 << (PlSqlParser.REUSE - 256)) | (1 << (PlSqlParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (PlSqlParser.RIGHT - 320)) | (1 << (PlSqlParser.ROLLBACK - 320)) | (1 << (PlSqlParser.ROLLUP - 320)) | (1 << (PlSqlParser.ROW - 320)) | (1 << (PlSqlParser.ROWID - 320)) | (1 << (PlSqlParser.ROWS - 320)) | (1 << (PlSqlParser.RULES - 320)) | (1 << (PlSqlParser.SAMPLE - 320)) | (1 << (PlSqlParser.SAVE - 320)) | (1 << (PlSqlParser.SAVEPOINT - 320)) | (1 << (PlSqlParser.SCHEMA - 320)) | (1 << (PlSqlParser.SCHEMACHECK - 320)) | (1 << (PlSqlParser.SCN - 320)) | (1 << (PlSqlParser.SECOND - 320)) | (1 << (PlSqlParser.SEED - 320)) | (1 << (PlSqlParser.SEGMENT - 320)) | (1 << (PlSqlParser.SELF - 320)) | (1 << (PlSqlParser.SEQUENTIAL - 320)) | (1 << (PlSqlParser.SERIALIZABLE - 320)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 320)) | (1 << (PlSqlParser.SERVERERROR - 320)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 320)) | (1 << (PlSqlParser.SET - 320)) | (1 << (PlSqlParser.SETS - 320)) | (1 << (PlSqlParser.SETTINGS - 320)) | (1 << (PlSqlParser.SHOW - 320)) | (1 << (PlSqlParser.SHUTDOWN - 320)) | (1 << (PlSqlParser.SIBLINGS - 320)) | (1 << (PlSqlParser.SIGNTYPE - 320)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 320)) | (1 << (PlSqlParser.SINGLE - 320)) | (1 << (PlSqlParser.SIZE - 320)) | (1 << (PlSqlParser.SKIP_ - 320)) | (1 << (PlSqlParser.SMALLINT - 320)) | (1 << (PlSqlParser.SNAPSHOT - 320)) | (1 << (PlSqlParser.SOME - 320)) | (1 << (PlSqlParser.SPECIFICATION - 320)) | (1 << (PlSqlParser.SQLDATA - 320)) | (1 << (PlSqlParser.SQLERROR - 320)) | (1 << (PlSqlParser.STANDALONE - 320)) | (1 << (PlSqlParser.STARTUP - 320)) | (1 << (PlSqlParser.STATEMENT - 320)) | (1 << (PlSqlParser.STATEMENT_ID - 320)) | (1 << (PlSqlParser.STATIC - 320)) | (1 << (PlSqlParser.STATISTICS - 320)) | (1 << (PlSqlParser.STRING - 320)) | (1 << (PlSqlParser.SUBMULTISET - 320)) | (1 << (PlSqlParser.SUBPARTITION - 320)) | (1 << (PlSqlParser.SUBSTITUTABLE - 320)) | (1 << (PlSqlParser.SUBTYPE - 320)) | (1 << (PlSqlParser.SUCCESS - 320)) | (1 << (PlSqlParser.SUSPEND - 320)) | (1 << (PlSqlParser.TIME - 320)) | (1 << (PlSqlParser.TIMESTAMP - 320)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 384)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 384)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 384)) | (1 << (PlSqlParser.TIMEZONE_REGION - 384)) | (1 << (PlSqlParser.TRAILING - 384)) | (1 << (PlSqlParser.TRANSACTION - 384)) | (1 << (PlSqlParser.TRANSLATE - 384)) | (1 << (PlSqlParser.TREAT - 384)) | (1 << (PlSqlParser.TRIGGER - 384)) | (1 << (PlSqlParser.TRIM - 384)) | (1 << (PlSqlParser.TRUNCATE - 384)) | (1 << (PlSqlParser.TYPE - 384)) | (1 << (PlSqlParser.UNBOUNDED - 384)) | (1 << (PlSqlParser.UNDER - 384)) | (1 << (PlSqlParser.UNLIMITED - 384)) | (1 << (PlSqlParser.UNTIL - 384)) | (1 << (PlSqlParser.UPDATED - 384)) | (1 << (PlSqlParser.UPSERT - 384)) | (1 << (PlSqlParser.UROWID - 384)) | (1 << (PlSqlParser.USE - 384)) | (1 << (PlSqlParser.VALIDATE - 384)) | (1 << (PlSqlParser.VALUE - 384)) | (1 << (PlSqlParser.VARCHAR - 384)) | (1 << (PlSqlParser.VARCHAR2 - 384)) | (1 << (PlSqlParser.VARIABLE - 384)) | (1 << (PlSqlParser.VARRAY - 384)) | (1 << (PlSqlParser.VARYING - 384)) | (1 << (PlSqlParser.VERSION - 384)) | (1 << (PlSqlParser.VERSIONS - 384)) | (1 << (PlSqlParser.WAIT - 384)) | (1 << (PlSqlParser.WARNING - 384)) | (1 << (PlSqlParser.WELLFORMED - 384)) | (1 << (PlSqlParser.WHENEVER - 384)) | (1 << (PlSqlParser.WHILE - 384)) | (1 << (PlSqlParser.WITHIN - 384)) | (1 << (PlSqlParser.WORK - 384)) | (1 << (PlSqlParser.WRITE - 384)) | (1 << (PlSqlParser.XML - 384)) | (1 << (PlSqlParser.XMLAGG - 384)) | (1 << (PlSqlParser.XMLATTRIBUTES - 384)) | (1 << (PlSqlParser.XMLCAST - 384)) | (1 << (PlSqlParser.XMLCOLATTVAL - 384)) | (1 << (PlSqlParser.XMLELEMENT - 384)) | (1 << (PlSqlParser.XMLEXISTS - 384)) | (1 << (PlSqlParser.XMLFOREST - 384)) | (1 << (PlSqlParser.XMLNAMESPACES - 384)) | (1 << (PlSqlParser.XMLPARSE - 384)) | (1 << (PlSqlParser.XMLPI - 384)) | (1 << (PlSqlParser.XMLQUERY - 384)) | (1 << (PlSqlParser.XMLROOT - 384)) | (1 << (PlSqlParser.XMLSERIALIZE - 384)) | (1 << (PlSqlParser.XMLTABLE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (PlSqlParser.YEAR - 448)) | (1 << (PlSqlParser.YES - 448)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (PlSqlParser.ZONE - 448)) | (1 << (PlSqlParser.PREDICTION - 448)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 448)) | (1 << (PlSqlParser.PREDICTION_COST - 448)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 448)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 448)) | (1 << (PlSqlParser.PREDICTION_SET - 448)) | (1 << (PlSqlParser.CUME_DIST - 448)) | (1 << (PlSqlParser.DENSE_RANK - 448)) | (1 << (PlSqlParser.LISTAGG - 448)) | (1 << (PlSqlParser.PERCENT_RANK - 448)) | (1 << (PlSqlParser.PERCENTILE_CONT - 448)) | (1 << (PlSqlParser.PERCENTILE_DISC - 448)) | (1 << (PlSqlParser.RANK - 448)) | (1 << (PlSqlParser.AVG - 448)) | (1 << (PlSqlParser.CORR - 448)) | (1 << (PlSqlParser.LAG - 448)) | (1 << (PlSqlParser.LEAD - 448)) | (1 << (PlSqlParser.MAX - 448)) | (1 << (PlSqlParser.MEDIAN - 448)) | (1 << (PlSqlParser.MIN - 448)) | (1 << (PlSqlParser.NTILE - 448)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 448)) | (1 << (PlSqlParser.ROW_NUMBER - 448)) | (1 << (PlSqlParser.SUM - 448)) | (1 << (PlSqlParser.VARIANCE - 448)) | (1 << (PlSqlParser.REGR_ - 448)) | (1 << (PlSqlParser.STDDEV - 448)) | (1 << (PlSqlParser.VAR_ - 448)) | (1 << (PlSqlParser.COVAR_ - 448)))) != 0) or _la==PlSqlParser.REGULAR_ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[159] = self.subquery_sempred
        self._predicates[165] = self.table_ref_sempred
        self._predicates[247] = self.expression_sempred
        self._predicates[256] = self.binary_expression_sempred
        self._predicates[264] = self.unary_expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def subquery_sempred(self, localctx:SubqueryContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def table_ref_sempred(self, localctx:Table_refContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 7)
         

    def binary_expression_sempred(self, localctx:Binary_expressionContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 6)
         

    def unary_expression_sempred(self, localctx:Unary_expressionContext, predIndex:int):
            if predIndex == 14:
                return self.precpred(self._ctx, 11)
         




